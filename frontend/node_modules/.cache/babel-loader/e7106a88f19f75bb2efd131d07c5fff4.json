{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar React = require('react');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n/**\n * Detecs if on a mobile device.\n */\nfunction isMobile() {\n  // But first, detect if running on the browser in case of SSR:\n  const isBrowser = typeof window !== 'undefined';\n  if (isBrowser) {\n    if (navigator && /Mobi|Android/i.test(navigator.userAgentData || navigator.userAgent)) return true;else return false;\n  }\n  return false;\n}\nconst defaultProps = {\n  isMobile: isMobile()\n};\nconst ManagerStateContext = React__default[\"default\"].createContext(undefined);\nfunction managerReducer(state, action) {\n  switch (action.type) {\n    case 'update-is-mobile':\n      {\n        return Object.assign(Object.assign({}, state), {\n          isMobile: state.isMobile\n        });\n      }\n    case 'register-slide':\n      {\n        const {\n          slides\n        } = state;\n        slides.set(action.payload.ref, {\n          ref: action.payload.ref,\n          number: slides.size + 1,\n          label: action.payload.label\n        });\n        return {\n          isMobile: state.isMobile,\n          slides,\n          totalSlides: slides.size\n        };\n      }\n    case 'remove-slide':\n      {\n        const {\n          slides\n        } = state;\n        slides.delete(action.payload);\n        return {\n          isMobile: state.isMobile,\n          slides,\n          totalSlides: slides.size\n        };\n      }\n    default:\n      {\n        throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n      }\n  }\n}\nfunction ManagerProvider(_ref) {\n  let {\n    children,\n    manager\n  } = _ref;\n  var _a;\n  const [state, dispatch] = React__default[\"default\"].useReducer(managerReducer, {\n    isMobile: (_a = manager === null || manager === void 0 ? void 0 : manager.isMobile) !== null && _a !== void 0 ? _a : defaultProps.isMobile,\n    slides: new Map(),\n    totalSlides: 0\n  });\n  /**\n   * Finds a Slide by its React `ref`.\n   */\n  const getSlide = ref => {\n    return state.slides.get(ref);\n  };\n  /**\n   * Registers a rendered Slide.\n   */\n  const registerSlide = (ref, label) => {\n    dispatch({\n      type: 'register-slide',\n      payload: {\n        ref,\n        label\n      }\n    });\n  };\n  /**\n   * Removes a Slide.\n   */\n  const removeSlide = ref => {\n    dispatch({\n      type: 'remove-slide',\n      payload: ref\n    });\n  };\n  /**\n   * If `manager.isMobile` prop changes, update the current state.\n   */\n  React__default[\"default\"].useEffect(() => {\n    if (typeof (manager === null || manager === void 0 ? void 0 : manager.isMobile) === 'boolean') dispatch({\n      type: 'update-is-mobile',\n      payload: manager === null || manager === void 0 ? void 0 : manager.isMobile\n    });\n  }, [manager === null || manager === void 0 ? void 0 : manager.isMobile]);\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    getSlide,\n    registerSlide,\n    removeSlide\n  };\n  return jsxRuntime.jsx(ManagerStateContext.Provider, Object.assign({\n    value: value\n  }, {\n    children: children\n  }));\n}\nfunction useManager() {\n  const context = React__default[\"default\"].useContext(ManagerStateContext);\n  if (context === undefined) {\n    throw new Error('useManager must be used within a ManagerProvider');\n  }\n  return context;\n}\nexports.ManagerProvider = ManagerProvider;\nexports.useManager = useManager;","map":{"version":3,"sources":["../../src/modules/Manager.tsx"],"names":["React","_jsx"],"mappings":"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","sourcesContent":["import React from 'react';\n\ntype Slide = {\n  ref: React.RefObject<HTMLElement>;\n  number: number;\n  label?: string;\n};\n\nexport interface ManagerProps {\n  /**\n   * Determines if on a mobile device. If true, the control buttons at the sides of the slider won't render.\n   * @default /Mobi|Android/i.test(navigator.userAgentData || navigator.userAgent)\n   */\n  isMobile?: boolean;\n}\n\ninterface GetSlide {\n  (ref: Slide['ref']): Slide | undefined;\n}\n\ninterface RegisterSlide {\n  (ref: Slide['ref'], label?: string): void;\n}\n\ninterface RemoveSlide {\n  (ref: Slide['ref']): void;\n}\n\ntype Action =\n  | {\n      type: 'update-is-mobile';\n      payload: boolean;\n    }\n  | {\n      type: 'register-slide';\n      payload: Pick<Slide, 'ref' | 'label'>;\n    }\n  | {\n      type: 'remove-slide';\n      payload: Slide['ref'];\n    };\ninterface State extends Required<ManagerProps> {\n  slides: Map<Slide['ref'], Slide>;\n  totalSlides: number;\n}\ntype ProviderProps = React.PropsWithChildren<{ manager?: ManagerProps }>;\n\n/**\n * Detecs if on a mobile device.\n */\nfunction isMobile(): boolean {\n  // But first, detect if running on the browser in case of SSR:\n  const isBrowser = typeof window !== 'undefined';\n\n  if (isBrowser) {\n    if (\n      navigator &&\n      /Mobi|Android/i.test(navigator.userAgentData || navigator.userAgent)\n    )\n      return true;\n    else return false;\n  }\n\n  return false;\n}\n\nconst defaultProps: Pick<State, keyof ManagerProps> = {\n  isMobile: isMobile()\n};\n\nconst ManagerStateContext = React.createContext<\n  | {\n      state: State;\n      getSlide: GetSlide;\n      registerSlide: RegisterSlide;\n      removeSlide: RemoveSlide;\n    }\n  | undefined\n>(undefined);\n\nfunction managerReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'update-is-mobile': {\n      return { ...state, isMobile: state.isMobile };\n    }\n    case 'register-slide': {\n      const { slides } = state;\n      slides.set(action.payload.ref, {\n        ref: action.payload.ref,\n        number: slides.size + 1,\n        label: action.payload.label\n      });\n      return { isMobile: state.isMobile, slides, totalSlides: slides.size };\n    }\n    case 'remove-slide': {\n      const { slides } = state;\n      slides.delete(action.payload);\n      return { isMobile: state.isMobile, slides, totalSlides: slides.size };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction ManagerProvider({ children, manager }: ProviderProps) {\n  const [state, dispatch] = React.useReducer(managerReducer, {\n    isMobile: manager?.isMobile ?? defaultProps.isMobile,\n    slides: new Map(),\n    totalSlides: 0\n  } as State);\n\n  /**\n   * Finds a Slide by its React `ref`.\n   */\n  const getSlide: GetSlide = (ref) => {\n    return state.slides.get(ref);\n  };\n\n  /**\n   * Registers a rendered Slide.\n   */\n  const registerSlide: RegisterSlide = (ref, label) => {\n    dispatch({\n      type: 'register-slide',\n      payload: {\n        ref,\n        label\n      }\n    });\n  };\n\n  /**\n   * Removes a Slide.\n   */\n  const removeSlide: RemoveSlide = (ref) => {\n    dispatch({\n      type: 'remove-slide',\n      payload: ref\n    });\n  };\n\n  /**\n   * If `manager.isMobile` prop changes, update the current state.\n   */\n  React.useEffect(() => {\n    if (typeof manager?.isMobile === 'boolean')\n      dispatch({\n        type: 'update-is-mobile',\n        payload: manager?.isMobile\n      });\n  }, [manager?.isMobile]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = { state, getSlide, registerSlide, removeSlide };\n\n  return (\n    <ManagerStateContext.Provider value={value}>\n      {children}\n    </ManagerStateContext.Provider>\n  );\n}\n\nfunction useManager() {\n  const context = React.useContext(ManagerStateContext);\n\n  if (context === undefined) {\n    throw new Error('useManager must be used within a ManagerProvider');\n  }\n\n  return context;\n}\n\nexport { ManagerProvider, useManager };\n"]},"metadata":{},"sourceType":"script"}