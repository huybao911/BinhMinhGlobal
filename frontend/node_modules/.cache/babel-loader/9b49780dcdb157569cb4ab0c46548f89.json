{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar React = require('react');\nvar reactIntersectionObserver_modern = require('../node_modules/.pnpm/react-intersection-observer@9.4.0_react@18.2.0/node_modules/react-intersection-observer/react-intersection-observer.modern.mjs.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nconst IntersectionObserverStateContext = React__default[\"default\"].createContext(undefined);\nfunction IntersectionObserverProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [ref, inView] = reactIntersectionObserver_modern.useInView({\n    threshold: 0\n  });\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    elementObservedRef: ref,\n    isInView: inView\n  };\n  return jsxRuntime.jsx(IntersectionObserverStateContext.Provider, Object.assign({\n    value: value\n  }, {\n    children: children\n  }));\n}\nfunction useIntersectionObserver() {\n  const context = React__default[\"default\"].useContext(IntersectionObserverStateContext);\n  if (context === undefined) {\n    throw new Error('useIntersectionObserver must be used within a IntersectionObserverProvider');\n  }\n  return context;\n}\nexports.IntersectionObserverProvider = IntersectionObserverProvider;\nexports.useIntersectionObserver = useIntersectionObserver;","map":{"version":3,"sources":["../../src/modules/IntersectionObserver.tsx"],"names":["React","useInView","_jsx"],"mappings":";;;;;;;;;;;;;;AAKA,MAAM,gCAAgC,GAAGA,cAAAA,CAAAA,SAAAA,CAAK,CAAC,aAAa,CAM1D,SAAS,CAAC;AAEZ,SAAS,4BAA4B,CAAA,IAAA,EAA4B;EAAA,IAA3B;IAAE;EAAQ,CAAiB,GAAA,IAAA;EAC/D,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAGC,gCAAAA,CAAAA,SAAS,CAAC;IAAE,SAAS,EAAE;EAAC,CAAE,CAAC;;;EAIjD,MAAM,KAAK,GAAG;IACZ,kBAAkB,EAAE,GAAG;IACvB,QAAQ,EAAE;GACX;EAED,OACEC,UAAAA,CAAAA,GAAAA,CAAC,gCAAgC,CAAC,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA;IAAC,KAAK,EAAE;EAAK,CAAA,EAAA;IAAA,QAAA,EACpD;EAAQ,CAAA,CAAA,CACiC;AAEhD;AAEA,SAAS,uBAAuB,CAAA,EAAA;EAC9B,MAAM,OAAO,GAAGF,cAAAA,CAAAA,SAAAA,CAAK,CAAC,UAAU,CAAC,gCAAgC,CAAC;EAElE,IAAI,OAAO,KAAK,SAAS,EAAE;IACzB,MAAM,IAAI,KAAK,CACb,4EAA4E,CAC7E;EACF;EAED,OAAO,OAAO;AAChB","sourcesContent":["import React from 'react';\nimport { useInView } from 'react-intersection-observer';\n\ntype ProviderProps = React.PropsWithChildren;\n\nconst IntersectionObserverStateContext = React.createContext<\n  | {\n      elementObservedRef: (node?: Element | null | undefined) => void;\n      isInView: boolean;\n    }\n  | undefined\n>(undefined);\n\nfunction IntersectionObserverProvider({ children }: ProviderProps) {\n  const [ref, inView] = useInView({ threshold: 0 });\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    elementObservedRef: ref,\n    isInView: inView\n  };\n\n  return (\n    <IntersectionObserverStateContext.Provider value={value}>\n      {children}\n    </IntersectionObserverStateContext.Provider>\n  );\n}\n\nfunction useIntersectionObserver() {\n  const context = React.useContext(IntersectionObserverStateContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useIntersectionObserver must be used within a IntersectionObserverProvider'\n    );\n  }\n\n  return context;\n}\n\nexport { IntersectionObserverProvider, useIntersectionObserver };\n"]},"metadata":{},"sourceType":"script"}