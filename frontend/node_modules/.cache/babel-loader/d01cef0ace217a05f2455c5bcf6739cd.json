{"ast":null,"code":"import o, { Component as h } from \"react\";\nimport { createPortal as y } from \"react-dom\";\nimport a from \"imagesloaded\";\nimport s from \"prop-types\";\nconst u = !!(typeof window < \"u\" && window.document && window.document.createElement);\nclass r extends h {\n  constructor(e) {\n    super(e), this.state = {\n      flickityReady: !1,\n      flickityCreated: !1,\n      cellCount: 0\n    }, this.carousel = null, this.flkty = null;\n  }\n  static getDerivedStateFromProps(e, t) {\n    const i = o.Children.count(e.children);\n    return i !== t.cellCount ? {\n      flickityReady: !1,\n      cellCount: i\n    } : null;\n  }\n  componentDidUpdate(e, t) {\n    if (!this.flkty) return;\n    const {\n        children: i,\n        options: {\n          draggable: l,\n          initialIndex: n\n        },\n        reloadOnUpdate: c,\n        disableImagesLoaded: d\n      } = this.props,\n      {\n        flickityReady: f\n      } = this.state;\n    if (c || !t.flickityReady && f) {\n      const p = this.flkty.isActive;\n      this.flkty.deactivate(), this.flkty.selectedIndex = n || 0, this.flkty.options.draggable = l === void 0 ? i ? i.length > 1 : !1 : l, p && this.flkty.activate(), !d && this.carousel && a(this.carousel, () => {\n        this.flkty.reloadCells();\n      });\n    } else this.flkty.reloadCells();\n  }\n  async componentDidMount() {\n    if (!u || !this.carousel) return null;\n    const e = (await import(\"flickity\")).default,\n      {\n        flickityRef: t,\n        options: i\n      } = this.props;\n    this.flkty = new e(this.carousel, i), t && t(this.flkty), this.props.static ? this.setReady() : this.setState({\n      flickityCreated: !0\n    });\n  }\n  setReady() {\n    if (this.state.flickityReady) return;\n    const e = () => this.setState({\n      flickityReady: !0\n    });\n    this.props.disableImagesLoaded ? e() : a(this.carousel, e);\n  }\n  renderPortal() {\n    if (!this.carousel) return null;\n    const e = this.carousel.querySelector(\".flickity-slider\");\n    if (e) {\n      const t = y(this.props.children, e);\n      return setTimeout(() => this.setReady(), 0), t;\n    }\n  }\n  render() {\n    return o.createElement(this.props.elementType, {\n      className: this.props.className,\n      ref: e => {\n        this.carousel = e;\n      }\n    }, this.props.static ? this.props.children : this.renderPortal());\n  }\n}\nr.propTypes = {\n  children: s.array,\n  className: s.string,\n  disableImagesLoaded: s.bool,\n  elementType: s.string,\n  flickityRef: s.func,\n  options: s.object,\n  reloadOnUpdate: s.bool,\n  static: s.bool\n};\nr.defaultProps = {\n  className: \"\",\n  disableImagesLoaded: !1,\n  elementType: \"div\",\n  options: {},\n  reloadOnUpdate: !1,\n  static: !1\n};\nexport { r as default };","map":{"version":3,"sources":["../src/index.js"],"names":["canUseDOM","FlickityComponent","Component","props","state","cellCount","React","prevProps","prevState","reloadOnUpdate","flickityReady","isActive","initialIndex","draggable","children","disableImagesLoaded","imagesloaded","Flickity","options","flickityRef","setFlickityToReady","mountNode","element","createPortal","c","PropTypes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport imagesloaded from 'imagesloaded';\nimport PropTypes from 'prop-types';\n\nconst canUseDOM = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nclass FlickityComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      flickityReady: false,\n      flickityCreated: false,\n      cellCount: 0,\n    };\n\n    this.carousel = null;\n    this.flkty = null;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    const cellCount = React.Children.count(props.children);\n    if (cellCount !== state.cellCount)\n      return { flickityReady: false, cellCount };\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (!this.flkty) return;\n    const {\n      children,\n      options: { draggable, initialIndex },\n      reloadOnUpdate,\n      disableImagesLoaded,\n    } = this.props;\n    const { flickityReady } = this.state;\n    if (reloadOnUpdate || (!prevState.flickityReady && flickityReady)) {\n      const isActive = this.flkty.isActive;\n      this.flkty.deactivate();\n      this.flkty.selectedIndex = initialIndex || 0;\n      this.flkty.options.draggable =\n        draggable === undefined\n          ? children\n            ? children.length > 1\n            : false\n          : draggable;\n      if (isActive) this.flkty.activate();\n      if (!disableImagesLoaded && this.carousel) {\n        imagesloaded(this.carousel, () => {\n          this.flkty.reloadCells();\n        });\n      }\n    } else {\n      this.flkty.reloadCells();\n    }\n  }\n\n  async componentDidMount() {\n    if (!canUseDOM || !this.carousel) return null;\n    const Flickity = (await import('flickity')).default;\n    const { flickityRef, options } = this.props;\n    this.flkty = new Flickity(this.carousel, options);\n    if (flickityRef) flickityRef(this.flkty);\n    if (this.props.static) {\n      this.setReady();\n    } else {\n      this.setState({ flickityCreated: true });\n    }\n  }\n\n  setReady() {\n    if (this.state.flickityReady) return;\n    const setFlickityToReady = () => this.setState({ flickityReady: true });\n    if (this.props.disableImagesLoaded) setFlickityToReady();\n    else imagesloaded(this.carousel, setFlickityToReady);\n  }\n\n  renderPortal() {\n    if (!this.carousel) return null;\n    const mountNode = this.carousel.querySelector('.flickity-slider');\n    if (mountNode) {\n      const element = createPortal(this.props.children, mountNode);\n      setTimeout(() => this.setReady(), 0);\n      return element;\n    }\n  }\n\n  render() {\n    return React.createElement(\n      this.props.elementType,\n      {\n        className: this.props.className,\n        ref: (c) => {\n          this.carousel = c;\n        },\n      },\n      this.props.static ? this.props.children : this.renderPortal()\n    );\n  }\n}\n\nFlickityComponent.propTypes = {\n  children: PropTypes.array,\n  className: PropTypes.string,\n  disableImagesLoaded: PropTypes.bool,\n  elementType: PropTypes.string,\n  flickityRef: PropTypes.func,\n  options: PropTypes.object,\n  reloadOnUpdate: PropTypes.bool,\n  static: PropTypes.bool,\n};\n\nFlickityComponent.defaultProps = {\n  className: '',\n  disableImagesLoaded: false,\n  elementType: 'div',\n  options: {},\n  reloadOnUpdate: false,\n  static: false,\n};\n\nexport default FlickityComponent;\n"]},"metadata":{},"sourceType":"module"}