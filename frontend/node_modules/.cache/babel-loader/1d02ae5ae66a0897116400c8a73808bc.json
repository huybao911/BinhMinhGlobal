{"ast":null,"code":"import types from \"redux/actions/types\";\nconst initialState = [];\nconst alertReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case types.SET_ALERT:\n      return [...state, action.payload];\n    case types.REMOVE_ALERT:\n      return state.filter(alert => alert.id !== action.payload);\n    default:\n      return state;\n  }\n};\nexport default alertReducer;","map":{"version":3,"names":["types","initialState","alertReducer","state","arguments","length","undefined","action","type","SET_ALERT","payload","REMOVE_ALERT","filter","alert","id"],"sources":["C:/Users/ADMIN/Desktop/DATN_CTV/frontend/src/redux/reducers/alert.ts"],"sourcesContent":["import types from \"redux/actions/types\";\nimport { IAlertState, AlertActions } from \"redux/types/alert\";\n\nconst initialState: IAlertState[] = [];\n\nconst alertReducer = (\n  state = initialState,\n  action: AlertActions\n): IAlertState[] => {\n  switch (action.type) {\n    case types.SET_ALERT:\n      return [...state, action.payload];\n\n    case types.REMOVE_ALERT:\n      return state.filter((alert: IAlertState) => alert.id !== action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default alertReducer;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,qBAAqB;AAGvC,MAAMC,YAA2B,GAAG,EAAE;AAEtC,MAAMC,YAAY,GAAG,SAAAA,CAAA,EAGD;EAAA,IAFlBC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGH,YAAY;EAAA,IACpBM,MAAoB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEpB,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAKR,KAAK,CAACS,SAAS;MAClB,OAAO,CAAC,GAAGN,KAAK,EAAEI,MAAM,CAACG,OAAO,CAAC;IAEnC,KAAKV,KAAK,CAACW,YAAY;MACrB,OAAOR,KAAK,CAACS,MAAM,CAAEC,KAAkB,IAAKA,KAAK,CAACC,EAAE,KAAKP,MAAM,CAACG,OAAO,CAAC;IAE1E;MACE,OAAOP,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,YAAY"},"metadata":{},"sourceType":"module"}