{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar React = require('react');\nvar Controller = require('./Controller.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n/**\n * `AccessibilityOrientation` definition used for the `SliderProps.orientation` prop.\n * Used to define which swipes (depending on directions) will change the slides,\n * and where and how will the buttons render, if set to render.\n */\nexports.AccessibilityOrientation = void 0;\n(function (AccessibilityOrientation) {\n  AccessibilityOrientation[\"VERTICAL\"] = \"vertical\";\n  AccessibilityOrientation[\"HORIZONTAL\"] = \"horizontal\";\n})(exports.AccessibilityOrientation || (exports.AccessibilityOrientation = {}));\nconst defaultProps = {\n  shouldDisplayButtons: true,\n  shouldSlideOnArrowKeypress: true,\n  orientation: exports.AccessibilityOrientation.HORIZONTAL,\n  thresholdToSlide: 50\n};\nconst AccessibilityStateContext = React__default[\"default\"].createContext(undefined);\nfunction accessibilityReducer(state, action) {\n  switch (action.type) {\n    case 'start-motion':\n      {\n        return {\n          initialX: action.payload.x,\n          initialY: action.payload.y,\n          currentX: undefined,\n          currentY: undefined\n        };\n      }\n    case 'update-motion':\n      {\n        return {\n          initialX: state.initialX,\n          initialY: state.initialY,\n          currentX: action.payload.x,\n          currentY: action.payload.y\n        };\n      }\n    case 'end-motion':\n      {\n        return {\n          initialX: undefined,\n          initialY: undefined,\n          currentX: undefined,\n          currentY: undefined\n        };\n      }\n    default:\n      {\n        throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n      }\n  }\n}\nfunction AccessibilityProvider(_ref) {\n  let {\n    children,\n    accessibility\n  } = _ref;\n  var _a, _b, _c;\n  const params = {\n    shouldDisplayButtons: (_a = accessibility === null || accessibility === void 0 ? void 0 : accessibility.shouldDisplayButtons) !== null && _a !== void 0 ? _a : defaultProps.shouldDisplayButtons,\n    shouldSlideOnArrowKeypress: (_b = accessibility === null || accessibility === void 0 ? void 0 : accessibility.shouldSlideOnArrowKeypress) !== null && _b !== void 0 ? _b : defaultProps.shouldSlideOnArrowKeypress,\n    orientation: (accessibility === null || accessibility === void 0 ? void 0 : accessibility.orientation) || defaultProps.orientation,\n    thresholdToSlide: (_c = accessibility === null || accessibility === void 0 ? void 0 : accessibility.thresholdToSlide) !== null && _c !== void 0 ? _c : defaultProps.thresholdToSlide\n  };\n  const [state, dispatch] = React__default[\"default\"].useReducer(accessibilityReducer, {\n    initialX: undefined,\n    initialY: undefined,\n    currentX: undefined,\n    currentY: undefined\n  });\n  const {\n    goToNextSlide,\n    goToPreviousSlide\n  } = Controller.useController();\n  /**\n   * Sets the initial coordinates of the touch event.\n   */\n  const onTouchStartHandler = event => {\n    dispatch({\n      type: 'start-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n  /**\n   * Sets the current coordinates of the touch event to the state.\n   */\n  const onTouchMoveHandler = event => {\n    dispatch({\n      type: 'update-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n  /**\n   * Determines in which direction **and** sense (vector) the user is swiping.\n   * Animations are then set accordingly depending on which direction the user is dragging and the slide is changed.\n   * Finally the touch state is set back to the initial state, where everything is undefined.\n   */\n  const onTouchEndHandler = () => {\n    const diffX = Number(state.initialX) - Number(state.currentX);\n    const diffY = Number(state.initialY) - Number(state.currentY);\n    const isSlidingHorizontally = Math.abs(diffX) > Math.abs(diffY);\n    const isSliderSetHorizontally = params.orientation === exports.AccessibilityOrientation.HORIZONTAL;\n    const isSliderSetVertically = params.orientation === exports.AccessibilityOrientation.VERTICAL;\n    if (isSlidingHorizontally && isSliderSetHorizontally && Math.abs(diffX) >= params.thresholdToSlide) {\n      const isSwipingRight = diffX > 0;\n      if (isSwipingRight) goToNextSlide();else goToPreviousSlide();\n    } else if (!isSlidingHorizontally && isSliderSetVertically && Math.abs(diffY) >= params.thresholdToSlide) {\n      const isSwipingUp = diffY > 0;\n      if (isSwipingUp) goToNextSlide();else goToPreviousSlide();\n    }\n    dispatch({\n      type: 'end-motion'\n    });\n  };\n  const onArrowKeypressHandler = e => {\n    if (!params.shouldSlideOnArrowKeypress) return;\n    const code = e.key || e.code || e.keyCode;\n    const isHorizontal = params.orientation === exports.AccessibilityOrientation.HORIZONTAL;\n    switch (true) {\n      // Left keypress.\n      case isHorizontal && (code === 'ArrowLeft' || code === 37):\n        goToPreviousSlide();\n        break;\n      // Right keypress.\n      case isHorizontal && (code === 'ArrowRight' || code === 39):\n        goToNextSlide();\n        break;\n      // Up keypress.\n      case !isHorizontal && (code === 'ArrowUp' || code === 38):\n        goToPreviousSlide();\n        break;\n      // Down keypress.\n      case !isHorizontal && (code === 'ArrowDown' || code === 40):\n        goToNextSlide();\n        break;\n    }\n  };\n  /**\n   * After mounting, similar to `componentDidMount`, setup the window event listeners for keydowns. The event handlers will be changing the slides if enabled to do so.\n   */\n  React__default[\"default\"].useEffect(() => {\n    window.addEventListener('keydown', onArrowKeypressHandler);\n    /**\n     * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n     */\n    return () => {\n      window.removeEventListener('keydown', onArrowKeypressHandler);\n    };\n  }, [onArrowKeypressHandler]);\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    shouldDisplayButtons: params.shouldDisplayButtons,\n    orientation: params.orientation,\n    onTouchStartHandler,\n    onTouchMoveHandler,\n    onTouchEndHandler\n  };\n  return jsxRuntime.jsx(AccessibilityStateContext.Provider, Object.assign({\n    value: value\n  }, {\n    children: children\n  }));\n}\nfunction useAccessibility() {\n  const context = React__default[\"default\"].useContext(AccessibilityStateContext);\n  if (context === undefined) {\n    throw new Error('useAccessibility must be used within a AccessibilityProvider');\n  }\n  return context;\n}\nexports.AccessibilityProvider = AccessibilityProvider;\nexports.useAccessibility = useAccessibility;","map":{"version":3,"sources":["../../src/modules/Accessibility.tsx"],"names":["AccessibilityOrientation","React","useController","_jsx"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { useController } from './Controller';\n\n/**\n * `AccessibilityOrientation` definition used for the `SliderProps.orientation` prop.\n * Used to define which swipes (depending on directions) will change the slides,\n * and where and how will the buttons render, if set to render.\n */\nexport enum AccessibilityOrientation {\n  VERTICAL = 'vertical',\n  HORIZONTAL = 'horizontal'\n}\n\nexport interface AccessibilityProps {\n  /**\n   * Controls render of the next and previous buttons.\n   * @default true\n   */\n  shouldDisplayButtons?: boolean;\n  /**\n   * When an arrow key is pressed, the active slide will change respectively to the pressed arrow.\n   * The left and down arrows will set the previous slide, and the right and up arrows will set the next slide.\n   * The left and right will only work if the slider is horizontal, and the up and down arrows will only work if the slider is vertical.\n   * @default true\n   */\n  shouldSlideOnArrowKeypress?: boolean;\n  /**\n   * The slider orientation can either set to be `horizontal` or `vertical`.\n   * The orientation sets the slide buttons respective to the orientation (e.g. if vertical, the buttons will be at the top and at the bottom).\n   * Swipe (touch) gestures in mobile devices to change slides will also be configured automatically depending on the orientation (e.g. if horizontal, swiping vertically won't change slides).\n   * @default 'horizontal'\n   */\n  orientation?: `${AccessibilityOrientation}`;\n  /**\n   * Pixel threshold for the Slider to register a swiping command to change slides.\n   * @default 50\n   */\n  thresholdToSlide?: number;\n}\n\ntype Action =\n  | {\n      type: 'start-motion';\n      payload: { x: number; y: number };\n    }\n  | {\n      type: 'update-motion';\n      payload: { x: number; y: number };\n    }\n  | { type: 'end-motion' };\ntype State = {\n  initialX: number | undefined;\n  initialY: number | undefined;\n  currentX: number | undefined;\n  currentY: number | undefined;\n};\ntype ProviderProps = React.PropsWithChildren<{\n  accessibility?: AccessibilityProps;\n}>;\n\nconst defaultProps: Required<AccessibilityProps> = {\n  shouldDisplayButtons: true,\n  shouldSlideOnArrowKeypress: true,\n  orientation: AccessibilityOrientation.HORIZONTAL,\n  thresholdToSlide: 50\n};\n\nconst AccessibilityStateContext = React.createContext<\n  | {\n      state: State;\n      shouldDisplayButtons: boolean;\n      orientation: AccessibilityOrientation;\n      onTouchStartHandler: (event: React.TouchEvent<HTMLDivElement>) => void;\n      onTouchMoveHandler: (event: React.TouchEvent<HTMLDivElement>) => void;\n      onTouchEndHandler: () => void;\n    }\n  | undefined\n>(undefined);\n\nfunction accessibilityReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'start-motion': {\n      return {\n        initialX: action.payload.x,\n        initialY: action.payload.y,\n        currentX: undefined,\n        currentY: undefined\n      };\n    }\n    case 'update-motion': {\n      return {\n        initialX: state.initialX,\n        initialY: state.initialY,\n        currentX: action.payload.x,\n        currentY: action.payload.y\n      };\n    }\n    case 'end-motion': {\n      return {\n        initialX: undefined,\n        initialY: undefined,\n        currentX: undefined,\n        currentY: undefined\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction AccessibilityProvider({ children, accessibility }: ProviderProps) {\n  const params: Required<AccessibilityProps> = {\n    shouldDisplayButtons:\n      accessibility?.shouldDisplayButtons ?? defaultProps.shouldDisplayButtons,\n    shouldSlideOnArrowKeypress:\n      accessibility?.shouldSlideOnArrowKeypress ??\n      defaultProps.shouldSlideOnArrowKeypress,\n    orientation: accessibility?.orientation || defaultProps.orientation,\n    thresholdToSlide:\n      accessibility?.thresholdToSlide ?? defaultProps.thresholdToSlide\n  };\n\n  const [state, dispatch] = React.useReducer(accessibilityReducer, {\n    initialX: undefined,\n    initialY: undefined,\n    currentX: undefined,\n    currentY: undefined\n  } as State);\n\n  const { goToNextSlide, goToPreviousSlide } = useController();\n\n  /**\n   * Sets the initial coordinates of the touch event.\n   */\n  const onTouchStartHandler = (event: React.TouchEvent<HTMLDivElement>) => {\n    dispatch({\n      type: 'start-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n\n  /**\n   * Sets the current coordinates of the touch event to the state.\n   */\n  const onTouchMoveHandler = (event: React.TouchEvent<HTMLDivElement>) => {\n    dispatch({\n      type: 'update-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n\n  /**\n   * Determines in which direction **and** sense (vector) the user is swiping.\n   * Animations are then set accordingly depending on which direction the user is dragging and the slide is changed.\n   * Finally the touch state is set back to the initial state, where everything is undefined.\n   */\n  const onTouchEndHandler = () => {\n    const diffX = Number(state.initialX) - Number(state.currentX);\n    const diffY = Number(state.initialY) - Number(state.currentY);\n\n    const isSlidingHorizontally: boolean = Math.abs(diffX) > Math.abs(diffY);\n    const isSliderSetHorizontally: boolean =\n      params.orientation === AccessibilityOrientation.HORIZONTAL;\n    const isSliderSetVertically: boolean =\n      params.orientation === AccessibilityOrientation.VERTICAL;\n\n    if (\n      isSlidingHorizontally &&\n      isSliderSetHorizontally &&\n      Math.abs(diffX) >= params.thresholdToSlide\n    ) {\n      const isSwipingRight = diffX > 0;\n      if (isSwipingRight) goToNextSlide();\n      else goToPreviousSlide();\n    } else if (\n      !isSlidingHorizontally &&\n      isSliderSetVertically &&\n      Math.abs(diffY) >= params.thresholdToSlide\n    ) {\n      const isSwipingUp = diffY > 0;\n      if (isSwipingUp) goToNextSlide();\n      else goToPreviousSlide();\n    }\n\n    dispatch({ type: 'end-motion' });\n  };\n\n  const onArrowKeypressHandler = (e: KeyboardEvent): void => {\n    if (!params.shouldSlideOnArrowKeypress) return;\n\n    const code = e.key || e.code || e.keyCode;\n\n    const isHorizontal =\n      params.orientation === AccessibilityOrientation.HORIZONTAL;\n\n    switch (true) {\n      // Left keypress.\n      case isHorizontal && (code === 'ArrowLeft' || code === 37):\n        goToPreviousSlide();\n        break;\n      // Right keypress.\n      case isHorizontal && (code === 'ArrowRight' || code === 39):\n        goToNextSlide();\n        break;\n      // Up keypress.\n      case !isHorizontal && (code === 'ArrowUp' || code === 38):\n        goToPreviousSlide();\n        break;\n      // Down keypress.\n      case !isHorizontal && (code === 'ArrowDown' || code === 40):\n        goToNextSlide();\n        break;\n      default: // Do nothing.\n    }\n  };\n\n  /**\n   * After mounting, similar to `componentDidMount`, setup the window event listeners for keydowns. The event handlers will be changing the slides if enabled to do so.\n   */\n  React.useEffect(() => {\n    window.addEventListener('keydown', onArrowKeypressHandler);\n    /**\n     * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n     */\n    return () => {\n      window.removeEventListener('keydown', onArrowKeypressHandler);\n    };\n  }, [onArrowKeypressHandler]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    shouldDisplayButtons: params.shouldDisplayButtons,\n    orientation: params.orientation as AccessibilityOrientation,\n    onTouchStartHandler,\n    onTouchMoveHandler,\n    onTouchEndHandler\n  };\n\n  return (\n    <AccessibilityStateContext.Provider value={value}>\n      {children}\n    </AccessibilityStateContext.Provider>\n  );\n}\n\nfunction useAccessibility() {\n  const context = React.useContext(AccessibilityStateContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useAccessibility must be used within a AccessibilityProvider'\n    );\n  }\n\n  return context;\n}\n\nexport { AccessibilityProvider, useAccessibility };\n"]},"metadata":{},"sourceType":"script"}