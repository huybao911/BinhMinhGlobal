{"ast":null,"code":"import axios from \"axios\";\nimport { setManagerAuthToken } from \"utils/headers\";\nimport { setAlert } from \"./alert\";\nimport types from \"./types\";\nconst URI = \"https://datv-ctv.onrender.com/api/v1/manager\";\nconst USER_URI = \"https://datv-ctv.onrender.com/api/v1/user\";\n\n// LOAD MANAGER\nexport const loadManager = () => async dispatch => {\n  if (localStorage.Manager__token) setManagerAuthToken(localStorage.Manager__token);\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.get(`${URI}/auth-Manager`, config);\n    dispatch({\n      type: types.MANAGER_LOADED,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.MANAGER_AUTH_ERROR\n    });\n  }\n};\n\n// LOGIN MANAGER\nexport const loginManager = (body, setSubmitting) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.post(`${URI}/login`, body, config);\n    dispatch({\n      type: types.MANAGER_LOGIN_SUCCESS,\n      payload: data\n    });\n    dispatch(setAlert({\n      msg: \"Đăng nhập tài khoản Quản Lý thành công!\",\n      status: 200,\n      alertType: \"success\"\n    }));\n    dispatch(loadManager());\n  } catch (error) {\n    dispatch({\n      type: types.MANAGER_LOGIN_FAIL\n    });\n    dispatch(setAlert({\n      msg: \"Đăng nhập tài khoản Quản Lý thất bại!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  } finally {\n    setSubmitting(false);\n  }\n};\n\n// REGISTER MANAGER\nexport const registerManager = (body, setSubmitting) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.post(`${USER_URI}/register`, body, config);\n    dispatch({\n      type: types.MANAGER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch(setAlert({\n      msg: \"Đăng ký tài khoản Quản Lý thành công!\",\n      status: 200,\n      alertType: \"success\"\n    }));\n  } catch (error) {\n    dispatch({\n      type: types.MANAGER_REGISTER_FAIL\n    });\n    dispatch(setAlert({\n      msg: \"Đăng ký tài khoản Quản Lý thất bại!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  } finally {\n    setSubmitting(false);\n  }\n};\n\n// REGISTER MANAGER ADMIN\nexport const registerManagerAdmin = (body, setSubmitting) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.post(`${USER_URI}/register`, body, config);\n    dispatch({\n      type: types.MANAGER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch(setAlert({\n      msg: \"Đăng ký tài khoản Quản Lý thành công!\",\n      status: 200,\n      alertType: \"success\"\n    }));\n  } catch (error) {\n    dispatch({\n      type: types.MANAGER_REGISTER_FAIL\n    });\n    dispatch(setAlert({\n      msg: \"Đăng ký tài khoản Quản Lý thất bại!\",\n      status: 200,\n      alertType: \"error\"\n    }));\n  } finally {\n    setSubmitting(false);\n  }\n};\n\n// GET USERS\nexport const getUsers = () => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.get(`${URI}/users`, config);\n    dispatch({\n      type: types.GET_USERS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Xảy ra lỗi khi lấy dữ liệu người dùng!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n\n// GET USER\nexport const getUser = () => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.get(`${URI}/user`, config);\n    dispatch({\n      type: types.GET_USER,\n      payload: data\n    });\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Xảy ra lỗi khi lấy dữ liệu người dùng!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n\n// GET LIST USER APPLY\nexport const getListUserApply = () => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.get(`${URI}/jobUserApply`, config);\n    dispatch({\n      type: types.GET_LIST_USERAPPLY,\n      payload: data\n    });\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Xảy ra lỗi khi lấy dữ liệu event user apply!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n\n// GET LIST CTV\nexport const getListCTV = () => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.get(`${URI}/ctv`, config);\n    dispatch({\n      type: types.GET_LIST_CTV,\n      payload: data\n    });\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Xảy ra lỗi khi lấy dữ liệu cộng tác viên!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n\n// UPDATE COEFFICIENT\nexport const updateCoefficient = (body, eventId, userApplyId, setSubmitting) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.put(`${URI}/coefficient/${eventId}/${userApplyId}`, body, config);\n    dispatch({\n      type: types.UPDATE_COEFFICIENT,\n      payload: data\n    });\n    dispatch(getListCTV());\n    // dispatch<any>(\n    //   setAlert({\n    //     msg: \"Duyệt người dùng thành công!\",\n    //     status: 200,\n    //     alertType: \"success\",\n    //   })\n    // );\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Duyệt người dùng thất bại!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  } finally {\n    setSubmitting(false);\n  }\n};\n\n// APPROVE USER APPLY JOB\nexport const approveUserApplyJob = (eventId, userApplyId) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.put(`${URI}/approveUser/${eventId}/${userApplyId}`, config);\n    dispatch({\n      type: types.APPROVE_USER_APPLY_JOB,\n      payload: data\n    });\n    dispatch(getListUserApply());\n    // dispatch<any>(\n    //   setAlert({\n    //     msg: \"Duyệt người dùng thành công!\",\n    //     status: 200,\n    //     alertType: \"success\",\n    //   })\n    // );\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Duyệt người dùng thất bại!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n\n// UNAPPROVE USER APPLY JOB\nexport const unapproveUserApplyJob = (eventId, userApplyId) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.put(`${URI}/unapproveUser/${eventId}/${userApplyId}`, config);\n    dispatch({\n      type: types.UNAPPROVE_USER_APPLY_JOB,\n      payload: data\n    });\n    dispatch(getListUserApply());\n    // dispatch<any>(\n    //   setAlert({\n    //     msg: \"Không duyệt người dùng thành công!\",\n    //     status: 200,\n    //     alertType: \"success\",\n    //   })\n    // );\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Không duyệt người dùng thất bại!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n\n// ACCEPT CTV\nexport const acceptCTV = (eventId, userApplyId) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.put(`${URI}/acceptCTV/${eventId}/${userApplyId}`, config);\n    dispatch({\n      type: types.ACCEPT_CTV,\n      payload: data\n    });\n    dispatch(getListCTV());\n    // dispatch<any>(\n    //   setAlert({\n    //     msg: \"Duyệt người dùng thành công!\",\n    //     status: 200,\n    //     alertType: \"success\",\n    //   })\n    // );\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Duyệt người dùng thất bại!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n\n// UNACCEPT CTV\nexport const unacceptCTV = (eventId, userApplyId) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.put(`${URI}/unAcceptCTV/${eventId}/${userApplyId}`, config);\n    dispatch({\n      type: types.UNACCEPT_CTV,\n      payload: data\n    });\n    dispatch(getListCTV());\n    // dispatch<any>(\n    //   setAlert({\n    //     msg: \"Không duyệt người dùng thành công!\",\n    //     status: 200,\n    //     alertType: \"success\",\n    //   })\n    // );\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Không duyệt người dùng thất bại!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n\n// GET EVENTS\nexport const getEvents = () => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.get(`${URI}/event`, config);\n    dispatch({\n      type: types.GET_EVENTS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Xảy ra lỗi khi lấy dữ liệu events!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n\n// CREATE EVENT\n\nexport const createEvent = (formData, setSubmitting) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-type\": \"multipart/form-data\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.post(`${URI}/createEvent`, formData, config);\n    dispatch({\n      type: types.CREATE_EVENT_SUCCESS,\n      payload: data\n    });\n    // dispatch<any>(loadManager());\n    dispatch(setAlert({\n      msg: \"Thêm event thành công!\",\n      status: 200,\n      alertType: \"success\"\n    }));\n    dispatch(loadManager());\n  } catch (error) {\n    dispatch({\n      type: types.CREATE_EVENT_FAIL\n    });\n    dispatch(setAlert({\n      msg: \"Thêm event thất bại!\",\n      status: 200,\n      // msg: error.response.data,\n      // status: error.response.status,\n      alertType: \"error\"\n    }));\n  } finally {\n    setSubmitting(false);\n  }\n};\n\n// UPDATE EVENT\nexport const updateEvent = (formData, id, setSubmitting) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.put(`${URI}/event/${id}`, formData, config);\n    dispatch({\n      type: types.UPDATE_EVENT,\n      payload: data\n    });\n    dispatch(getEvents());\n    dispatch(setAlert({\n      msg: \"Cập nhật event thành công!\",\n      status: 200,\n      alertType: \"success\"\n    }));\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Xảy ra lỗi khi cập nhật event!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  } finally {\n    setSubmitting(false);\n  }\n};\n\n// DELETE EVENT\nexport const deleteEvent = id => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    await axios.delete(`${URI}/event/${id}`, config);\n    dispatch({\n      type: types.DELETE_EVENT,\n      payload: id\n    });\n    dispatch(loadManager());\n    dispatch(setAlert({\n      msg: \"Xóa event thành công!\",\n      status: 200,\n      alertType: \"success\"\n    }));\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Xảy ra lỗi khi xóa event!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n\n// GET JOBEVENTS\nexport const getJobEvents = () => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.get(`${URI}/jobEvents`, config);\n    dispatch({\n      type: types.GET_JOBEVENTS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Xảy ra lỗi khi lấy dữ liệu jobevents!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n// CREATE JOBEVENT\nexport const createJobEvent = (body, setSubmitting) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.post(`${URI}/createJobEvent`, body, config);\n    dispatch({\n      type: types.CREATE_JOBEVENT_SUCCESS,\n      payload: data\n    });\n    // dispatch<any>(loadManager());\n    dispatch(setAlert({\n      msg: \"Thêm jobevent thành công!\",\n      status: 200,\n      alertType: \"success\"\n    }));\n    dispatch(loadManager());\n  } catch (error) {\n    dispatch({\n      type: types.CREATE_JOBEVENT_FAIL\n    });\n    dispatch(setAlert({\n      msg: \"Thêm jobevent thất bại!\",\n      status: 200,\n      // msg: error.response.data,\n      // status: error.response.status,\n      alertType: \"error\"\n    }));\n  } finally {\n    setSubmitting(false);\n  }\n};\n\n// UPDATE JOBEVENT\nexport const updateJobEvent = (body, id, setSubmitting) => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const {\n      data\n    } = await axios.put(`${URI}/jobEvent/${id}`, body, config);\n    dispatch({\n      type: types.UPDATE_JOBEVENT,\n      payload: data\n    });\n    dispatch(getJobEvents());\n    dispatch(setAlert({\n      msg: \"Cập nhật jobevent thành công!\",\n      status: 200,\n      alertType: \"success\"\n    }));\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Xảy ra lỗi khi cập nhật jobevent!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  } finally {\n    setSubmitting(false);\n  }\n};\n\n// DELETE JOBEVENT\nexport const deleteJobEvent = id => async dispatch => {\n  const config = {\n    header: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    await axios.delete(`${URI}/jobEvent/${id}`, config);\n    dispatch({\n      type: types.DELETE_JOBEVENT,\n      payload: id\n    });\n    dispatch(loadManager());\n    dispatch(setAlert({\n      msg: \"Xóa jobevent thành công!\",\n      status: 200,\n      alertType: \"success\"\n    }));\n  } catch (error) {\n    dispatch(setAlert({\n      msg: \"Xảy ra lỗi khi xóa jobevent!\",\n      status: error.response.status,\n      alertType: \"error\"\n    }));\n  }\n};\n// LOGOUT MANAGER\nexport const logOutManager = () => dispatch => {\n  dispatch({\n    type: types.MANAGER_LOGOUT\n  });\n  dispatch(setAlert({\n    msg: \"Đăng xuất thành công!\",\n    status: 200,\n    alertType: \"success\"\n  }));\n};","map":{"version":3,"names":["axios","setManagerAuthToken","setAlert","types","URI","USER_URI","loadManager","dispatch","localStorage","Manager__token","config","header","data","get","type","MANAGER_LOADED","payload","error","MANAGER_AUTH_ERROR","loginManager","body","setSubmitting","post","MANAGER_LOGIN_SUCCESS","msg","status","alertType","MANAGER_LOGIN_FAIL","response","registerManager","MANAGER_REGISTER_SUCCESS","MANAGER_REGISTER_FAIL","registerManagerAdmin","getUsers","GET_USERS","getUser","GET_USER","getListUserApply","GET_LIST_USERAPPLY","getListCTV","GET_LIST_CTV","updateCoefficient","eventId","userApplyId","put","UPDATE_COEFFICIENT","approveUserApplyJob","APPROVE_USER_APPLY_JOB","unapproveUserApplyJob","UNAPPROVE_USER_APPLY_JOB","acceptCTV","ACCEPT_CTV","unacceptCTV","UNACCEPT_CTV","getEvents","GET_EVENTS","createEvent","formData","CREATE_EVENT_SUCCESS","CREATE_EVENT_FAIL","updateEvent","id","UPDATE_EVENT","deleteEvent","delete","DELETE_EVENT","getJobEvents","GET_JOBEVENTS","createJobEvent","CREATE_JOBEVENT_SUCCESS","CREATE_JOBEVENT_FAIL","updateJobEvent","UPDATE_JOBEVENT","deleteJobEvent","DELETE_JOBEVENT","logOutManager","MANAGER_LOGOUT"],"sources":["C:/Users/ADMIN/Desktop/DATN_CTV/frontend/src/redux/actions/Manager.ts"],"sourcesContent":["import axios from \"axios\";\nimport { Dispatch } from \"redux\";\nimport { setManagerAuthToken } from \"utils/headers\";\nimport { setAlert } from \"./alert\";\nimport { ManagerActions, ManagerAdminActions } from \"redux/types/Manager\";\nimport { AlertActions } from \"redux/types/alert\";\nimport types from \"./types\";\n\nconst URI = \"https://datv-ctv.onrender.com/api/v1/manager\";\nconst USER_URI = \"https://datv-ctv.onrender.com/api/v1/user\";\n\n// LOAD MANAGER\nexport const loadManager = () => async (dispatch: Dispatch<ManagerActions>) => {\n  if (localStorage.Manager__token)\n    setManagerAuthToken(localStorage.Manager__token);\n  const config: any = {\n    header: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`${URI}/auth-Manager`, config);\n\n    dispatch({ type: types.MANAGER_LOADED, payload: data });\n  } catch (error) {\n    dispatch({ type: types.MANAGER_AUTH_ERROR });\n  }\n};\n\n// LOGIN MANAGER\nexport const loginManager =\n  (body: any, setSubmitting: any) =>\n    async (dispatch: Dispatch<ManagerActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      try {\n        const { data } = await axios.post(`${URI}/login`, body, config);\n        dispatch({\n          type: types.MANAGER_LOGIN_SUCCESS,\n          payload: data,\n        });\n        dispatch<any>(\n          setAlert({\n            msg: \"Đăng nhập tài khoản Quản Lý thành công!\",\n            status: 200,\n            alertType: \"success\",\n          })\n        );\n        dispatch<any>(loadManager());\n      } catch (error: any) {\n        dispatch({ type: types.MANAGER_LOGIN_FAIL });\n        dispatch<any>(\n          setAlert({\n            msg: \"Đăng nhập tài khoản Quản Lý thất bại!\",\n            status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      } finally {\n        setSubmitting(false);\n      }\n    };\n\n// REGISTER MANAGER\nexport const registerManager =\n  (body: any, setSubmitting: any) =>\n    async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      try {\n        const { data } = await axios.post(`${USER_URI}/register`, body, config);\n        dispatch({\n          type: types.MANAGER_REGISTER_SUCCESS,\n          payload: data,\n        });\n        dispatch<any>(\n          setAlert({\n            msg: \"Đăng ký tài khoản Quản Lý thành công!\",\n            status: 200,\n            alertType: \"success\",\n          })\n        );\n      } catch (error: any) {\n        dispatch({ type: types.MANAGER_REGISTER_FAIL });\n        dispatch<any>(\n          setAlert({\n            msg: \"Đăng ký tài khoản Quản Lý thất bại!\",\n            status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      } finally {\n        setSubmitting(false);\n      }\n    };\n\n// REGISTER MANAGER ADMIN\nexport const registerManagerAdmin =\n  (body: any, setSubmitting: any) =>\n    async (dispatch: Dispatch<ManagerAdminActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      try {\n        const { data } = await axios.post(`${USER_URI}/register`, body, config);\n        dispatch({\n          type: types.MANAGER_REGISTER_SUCCESS,\n          payload: data,\n        });\n        dispatch<any>(\n          setAlert({\n            msg: \"Đăng ký tài khoản Quản Lý thành công!\",\n            status: 200,\n            alertType: \"success\",\n          })\n        );\n      } catch (error: any) {\n        dispatch({ type: types.MANAGER_REGISTER_FAIL });\n        dispatch<any>(\n          setAlert({\n            msg: \"Đăng ký tài khoản Quản Lý thất bại!\",\n            status: 200,\n            alertType: \"error\",\n          })\n        );\n      } finally {\n        setSubmitting(false);\n      }\n    };\n\n// GET USERS\nexport const getUsers =\n  () => async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n    const config: any = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      const { data } = await axios.get(`${URI}/users`, config);\n      dispatch({ type: types.GET_USERS, payload: data });\n    } catch (error: any) {\n      dispatch<any>(\n        setAlert({\n          msg: \"Xảy ra lỗi khi lấy dữ liệu người dùng!\",\n          status: error.response.status,\n          alertType: \"error\",\n        })\n      );\n    }\n  };\n\n// GET USER\nexport const getUser =\n  () => async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n    const config: any = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      const { data } = await axios.get(`${URI}/user`, config);\n      dispatch({ type: types.GET_USER, payload: data });\n    } catch (error: any) {\n      dispatch<any>(\n        setAlert({\n          msg: \"Xảy ra lỗi khi lấy dữ liệu người dùng!\",\n          status: error.response.status,\n          alertType: \"error\",\n        })\n      );\n    }\n  };\n\n// GET LIST USER APPLY\nexport const getListUserApply =\n  () => async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n    const config: any = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      const { data } = await axios.get(`${URI}/jobUserApply`, config);\n      dispatch({ type: types.GET_LIST_USERAPPLY, payload: data });\n    } catch (error: any) {\n      dispatch<any>(\n        setAlert({\n          msg: \"Xảy ra lỗi khi lấy dữ liệu event user apply!\",\n          status: error.response.status,\n          alertType: \"error\",\n        })\n      );\n    }\n  };\n\n// GET LIST CTV\nexport const getListCTV =\n  () => async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n    const config: any = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      const { data } = await axios.get(`${URI}/ctv`, config);\n      dispatch({ type: types.GET_LIST_CTV, payload: data });\n    } catch (error: any) {\n      dispatch<any>(\n        setAlert({\n          msg: \"Xảy ra lỗi khi lấy dữ liệu cộng tác viên!\",\n          status: error.response.status,\n          alertType: \"error\",\n        })\n      );\n    }\n  };\n\n// UPDATE COEFFICIENT\nexport const updateCoefficient =\n  (body: any, eventId: number, userApplyId: number, setSubmitting: any) =>\n    async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      try {\n        const { data } = await axios.put(`${URI}/coefficient/${eventId}/${userApplyId}`, body, config);\n        dispatch({\n          type: types.UPDATE_COEFFICIENT,\n          payload: data,\n        });\n        dispatch<any>(getListCTV());\n        // dispatch<any>(\n        //   setAlert({\n        //     msg: \"Duyệt người dùng thành công!\",\n        //     status: 200,\n        //     alertType: \"success\",\n        //   })\n        // );\n      } catch (error: any) {\n        dispatch<any>(\n          setAlert({\n            msg: \"Duyệt người dùng thất bại!\",\n            status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      } finally {\n        setSubmitting(false);\n      }\n    };\n\n// APPROVE USER APPLY JOB\nexport const approveUserApplyJob =\n  (eventId: number, userApplyId: number) =>\n    async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      try {\n        const { data } = await axios.put(`${URI}/approveUser/${eventId}/${userApplyId}`, config);\n        dispatch({\n          type: types.APPROVE_USER_APPLY_JOB,\n          payload: data,\n        });\n        dispatch<any>(getListUserApply());\n        // dispatch<any>(\n        //   setAlert({\n        //     msg: \"Duyệt người dùng thành công!\",\n        //     status: 200,\n        //     alertType: \"success\",\n        //   })\n        // );\n      } catch (error: any) {\n        dispatch<any>(\n          setAlert({\n            msg: \"Duyệt người dùng thất bại!\",\n            status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      }\n    };\n\n// UNAPPROVE USER APPLY JOB\nexport const unapproveUserApplyJob =\n  (eventId: number, userApplyId: number) =>\n    async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      try {\n        const { data } = await axios.put(`${URI}/unapproveUser/${eventId}/${userApplyId}`, config);\n        dispatch({\n          type: types.UNAPPROVE_USER_APPLY_JOB,\n          payload: data,\n        });\n        dispatch<any>(getListUserApply());\n        // dispatch<any>(\n        //   setAlert({\n        //     msg: \"Không duyệt người dùng thành công!\",\n        //     status: 200,\n        //     alertType: \"success\",\n        //   })\n        // );\n      } catch (error: any) {\n        dispatch<any>(\n          setAlert({\n            msg: \"Không duyệt người dùng thất bại!\",\n            status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      }\n    };\n\n// ACCEPT CTV\nexport const acceptCTV =\n  (eventId: number, userApplyId: number) =>\n    async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      try {\n        const { data } = await axios.put(`${URI}/acceptCTV/${eventId}/${userApplyId}`, config);\n        dispatch({\n          type: types.ACCEPT_CTV,\n          payload: data,\n        });\n        dispatch<any>(getListCTV());\n        // dispatch<any>(\n        //   setAlert({\n        //     msg: \"Duyệt người dùng thành công!\",\n        //     status: 200,\n        //     alertType: \"success\",\n        //   })\n        // );\n      } catch (error: any) {\n        dispatch<any>(\n          setAlert({\n            msg: \"Duyệt người dùng thất bại!\",\n            status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      }\n    };\n\n// UNACCEPT CTV\nexport const unacceptCTV =\n  (eventId: number, userApplyId: number) =>\n    async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      try {\n        const { data } = await axios.put(`${URI}/unAcceptCTV/${eventId}/${userApplyId}`, config);\n        dispatch({\n          type: types.UNACCEPT_CTV,\n          payload: data,\n        });\n        dispatch<any>(getListCTV());\n        // dispatch<any>(\n        //   setAlert({\n        //     msg: \"Không duyệt người dùng thành công!\",\n        //     status: 200,\n        //     alertType: \"success\",\n        //   })\n        // );\n      } catch (error: any) {\n        dispatch<any>(\n          setAlert({\n            msg: \"Không duyệt người dùng thất bại!\",\n            status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      }\n    };\n\n// GET EVENTS\nexport const getEvents =\n  () => async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n    const config: any = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      const { data } = await axios.get(`${URI}/event`, config);\n      dispatch({ type: types.GET_EVENTS, payload: data });\n    } catch (error: any) {\n      dispatch<any>(\n        setAlert({\n          msg: \"Xảy ra lỗi khi lấy dữ liệu events!\",\n          status: error.response.status,\n          alertType: \"error\",\n        })\n      );\n    }\n  };\n\n// CREATE EVENT\ntype formdata = FormData;\nexport const createEvent =\n  (formData: formdata, setSubmitting: any) =>\n    async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-type\": \"multipart/form-data\",\n        },\n      };\n\n      try {\n        const { data } = await axios.post(`${URI}/createEvent`, formData, config);\n        dispatch({\n          type: types.CREATE_EVENT_SUCCESS,\n          payload: data,\n        });\n        // dispatch<any>(loadManager());\n        dispatch<any>(\n          setAlert({\n            msg: \"Thêm event thành công!\",\n            status: 200,\n            alertType: \"success\",\n          })\n        );\n        dispatch<any>(loadManager());\n      } catch (error: any) {\n        dispatch({ type: types.CREATE_EVENT_FAIL });\n        dispatch<any>(\n          setAlert({\n            msg: \"Thêm event thất bại!\",\n            status: 200,\n            // msg: error.response.data,\n            // status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      } finally {\n        setSubmitting(false);\n      }\n    };\n\n// UPDATE EVENT\nexport const updateEvent =\n  (formData: formdata, id: number, setSubmitting: any) =>\n    async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      };\n\n      try {\n        const { data } = await axios.put(`${URI}/event/${id}`, formData, config);\n        dispatch({\n          type: types.UPDATE_EVENT,\n          payload: data,\n        });\n        dispatch<any>(getEvents());\n        dispatch<any>(\n          setAlert({\n            msg: \"Cập nhật event thành công!\",\n            status: 200,\n            alertType: \"success\",\n          })\n        );\n      } catch (error: any) {\n        dispatch<any>(\n          setAlert({\n            msg: \"Xảy ra lỗi khi cập nhật event!\",\n            status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      } finally {\n        setSubmitting(false);\n      }\n    };\n\n// DELETE EVENT\nexport const deleteEvent =\n  (id: number) => async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n    const config: any = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      await axios.delete(`${URI}/event/${id}`, config);\n      dispatch({ type: types.DELETE_EVENT, payload: id });\n      dispatch<any>(loadManager());\n      dispatch<any>(\n        setAlert({\n          msg: \"Xóa event thành công!\",\n          status: 200,\n          alertType: \"success\",\n        })\n      );\n    } catch (error: any) {\n      dispatch<any>(\n        setAlert({\n          msg: \"Xảy ra lỗi khi xóa event!\",\n          status: error.response.status,\n          alertType: \"error\",\n        })\n      );\n    }\n  };\n\n// GET JOBEVENTS\nexport const getJobEvents =\n  () => async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n    const config: any = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      const { data } = await axios.get(`${URI}/jobEvents`, config);\n      dispatch({ type: types.GET_JOBEVENTS, payload: data });\n    } catch (error: any) {\n      dispatch<any>(\n        setAlert({\n          msg: \"Xảy ra lỗi khi lấy dữ liệu jobevents!\",\n          status: error.response.status,\n          alertType: \"error\",\n        })\n      );\n    }\n  };\n// CREATE JOBEVENT\nexport const createJobEvent =\n  (body: any, setSubmitting: any) =>\n    async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      try {\n        const { data } = await axios.post(`${URI}/createJobEvent`, body, config);\n        dispatch({\n          type: types.CREATE_JOBEVENT_SUCCESS,\n          payload: data,\n        });\n        // dispatch<any>(loadManager());\n        dispatch<any>(\n          setAlert({\n            msg: \"Thêm jobevent thành công!\",\n            status: 200,\n            alertType: \"success\",\n          })\n        );\n        dispatch<any>(loadManager());\n      } catch (error: any) {\n        dispatch({ type: types.CREATE_JOBEVENT_FAIL });\n        dispatch<any>(\n          setAlert({\n            msg: \"Thêm jobevent thất bại!\",\n            status: 200,\n            // msg: error.response.data,\n            // status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      } finally {\n        setSubmitting(false);\n      }\n    };\n\n// UPDATE JOBEVENT\nexport const updateJobEvent =\n  (body: any, id: number, setSubmitting: any) =>\n    async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n      const config: any = {\n        header: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      try {\n        const { data } = await axios.put(`${URI}/jobEvent/${id}`, body, config);\n        dispatch({\n          type: types.UPDATE_JOBEVENT,\n          payload: data,\n        });\n        dispatch<any>(getJobEvents());\n        dispatch<any>(\n          setAlert({\n            msg: \"Cập nhật jobevent thành công!\",\n            status: 200,\n            alertType: \"success\",\n          })\n        );\n      } catch (error: any) {\n        dispatch<any>(\n          setAlert({\n            msg: \"Xảy ra lỗi khi cập nhật jobevent!\",\n            status: error.response.status,\n            alertType: \"error\",\n          })\n        );\n      } finally {\n        setSubmitting(false);\n      }\n    };\n\n// DELETE JOBEVENT\nexport const deleteJobEvent =\n  (id: number) => async (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n    const config: any = {\n      header: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      await axios.delete(`${URI}/jobEvent/${id}`, config);\n      dispatch({ type: types.DELETE_JOBEVENT, payload: id });\n      dispatch<any>(loadManager());\n      dispatch<any>(\n        setAlert({\n          msg: \"Xóa jobevent thành công!\",\n          status: 200,\n          alertType: \"success\",\n        })\n      );\n    } catch (error: any) {\n      dispatch<any>(\n        setAlert({\n          msg: \"Xảy ra lỗi khi xóa jobevent!\",\n          status: error.response.status,\n          alertType: \"error\",\n        })\n      );\n    }\n  };\n// LOGOUT MANAGER\nexport const logOutManager =\n  () => (dispatch: Dispatch<ManagerActions | AlertActions>) => {\n    dispatch({ type: types.MANAGER_LOGOUT });\n    dispatch<any>(\n      setAlert({\n        msg: \"Đăng xuất thành công!\",\n        status: 200,\n        alertType: \"success\",\n      })\n    );\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}