{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar Controller = require('../../modules/Controller.js');\nvar Manager = require('../../modules/Manager.js');\nvar composeCssClasses = require('../../utils/composeCssClasses.js');\nvar index_module = require('./index.module.css.js');\nfunction SideNav(_ref) {\n  let {\n    color,\n    activeColor,\n    left,\n    right,\n    isPositionedRight = true,\n    position = {\n      bottom: undefined,\n      top: '50%',\n      left: !isPositionedRight ? left || '1rem' : undefined,\n      right: isPositionedRight ? right || '1rem' : undefined,\n      transform: 'translateY(-50%)'\n    }\n  } = _ref;\n  const {\n    state: {\n      slides,\n      totalSlides\n    }\n  } = Manager.useManager();\n  const {\n    state: {\n      activeSlide\n    },\n    changeSlide\n  } = Controller.useController();\n  function renderButtons() {\n    if (!totalSlides) return [];\n    const onClickHandler = slideNumber => {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n    return Array.from(slides.values()).map(_ref2 => {\n      let {\n        number\n      } = _ref2;\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events\n        jsxRuntime.jsxs(\"li\", Object.assign({\n          className: composeCssClasses.composeCssClasses('hero-slider-side-nav-button', index_module[\"default\"].Button, {\n            className: index_module[\"default\"].Active,\n            useIf: activeSlide === number\n          }),\n          onClick: () => onClickHandler(number),\n          style: {\n            justifyContent: isPositionedRight ? 'flex-end' : 'flex-start'\n          }\n        }, {\n          children: [jsxRuntime.jsx(\"span\", {\n            className: composeCssClasses.composeCssClasses('hero-slider-side-nav-button-line', index_module[\"default\"].Line)\n          }), jsxRuntime.jsx(\"span\", Object.assign({\n            className: composeCssClasses.composeCssClasses('hero-slider-side-nav-button-number', index_module[\"default\"].Number)\n          }, {\n            children: number.toLocaleString()\n          }))]\n        }), number)\n      );\n    });\n  }\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--nav-color': color,\n    '--nav-active-color': activeColor\n  };\n  return jsxRuntime.jsx(\"ul\", Object.assign({\n    className: composeCssClasses.composeCssClasses('hero-slider-side-nav-wrapper', index_module[\"default\"].Wrapper),\n    style: Object.assign(Object.assign({}, position), CSSVariables)\n  }, {\n    children: renderButtons()\n  }));\n}\nSideNav.displayName = 'hero-slider/nav';\nexports.SideNav = SideNav;","map":{"version":3,"sources":["../../../src/components/SideNav/index.tsx"],"names":["useManager","useController","_jsxs","composeCssClasses","SideNavModuleCss","_jsx"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { useController } from '../../modules/Controller';\nimport { useManager } from '../../modules/Manager';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\nimport { NavPosition, NavProps } from '../Nav';\nimport SideNavModuleCss from './index.module.css';\n\n/**\n * `SideNav` component props.\n */\nexport interface SideNavProps extends NavProps {\n  /**\n   * Defines the inline CSS property `right` of the component.\n   */\n  right?: React.CSSProperties['right'];\n  /**\n   * Defines the inline CSS property `left` of the component.\n   */\n  left?: React.CSSProperties['left'];\n  /**\n   * Defines the position. If you set it to the left, set this to false to disable any existing `right` CSS properties and avoid any conflicts.\n   * @default true\n   */\n  isPositionedRight?: boolean;\n  /**\n   * Object of CSS properties `top`, `left`, `bottom`, and `right` used to absolutely position elements.\n   * Aside from the former, you can also set the CSS `transform` property to help you center the element.\n   * @default\n   * {\n   *    bottom: undefined,\n   *    top: '50%',\n   *    left: !isPositionedRight ? left || '1rem' : undefined,\n   *    right: isPositionedRight ? right || '1rem' : undefined,\n   *    transform: 'translateY(-50%)'\n   * }\n   */\n  position?: NavPosition;\n}\n\nexport function SideNav({\n  color,\n  activeColor,\n  left,\n  right,\n  isPositionedRight = true,\n  position = {\n    bottom: undefined,\n    top: '50%',\n    left: !isPositionedRight ? left || '1rem' : undefined,\n    right: isPositionedRight ? right || '1rem' : undefined,\n    transform: 'translateY(-50%)'\n  }\n}: SideNavProps) {\n  const {\n    state: { slides, totalSlides }\n  } = useManager();\n\n  const {\n    state: { activeSlide },\n    changeSlide\n  } = useController();\n\n  function renderButtons() {\n    if (!totalSlides) return [];\n\n    const onClickHandler = (slideNumber: number) => {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n\n    return Array.from(slides.values()).map(({ number }) => {\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events\n        <li\n          key={number}\n          className={composeCssClasses(\n            'hero-slider-side-nav-button',\n            SideNavModuleCss.Button,\n            {\n              className: SideNavModuleCss.Active,\n              useIf: activeSlide === number\n            }\n          )}\n          onClick={() => onClickHandler(number)}\n          style={{\n            justifyContent: isPositionedRight ? 'flex-end' : 'flex-start'\n          }}\n        >\n          <span\n            className={composeCssClasses(\n              'hero-slider-side-nav-button-line',\n              SideNavModuleCss.Line\n            )}\n          />\n          <span\n            className={composeCssClasses(\n              'hero-slider-side-nav-button-number',\n              SideNavModuleCss.Number\n            )}\n          >\n            {number.toLocaleString()}\n          </span>\n        </li>\n      );\n    });\n  }\n\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--nav-color': color,\n    '--nav-active-color': activeColor\n  };\n\n  return (\n    <ul\n      className={composeCssClasses(\n        'hero-slider-side-nav-wrapper',\n        SideNavModuleCss.Wrapper\n      )}\n      style={{\n        ...position,\n        ...CSSVariables\n      }}\n    >\n      {renderButtons()}\n    </ul>\n  );\n}\n\n(SideNav as React.FunctionComponent).displayName = 'hero-slider/nav';\n"]},"metadata":{},"sourceType":"script"}