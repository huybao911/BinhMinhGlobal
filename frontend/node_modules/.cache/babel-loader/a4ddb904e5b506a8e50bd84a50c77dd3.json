{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar Controller = require('../../modules/Controller.js');\nvar Layout = require('../../modules/Layout.js');\nvar Manager = require('../../modules/Manager.js');\nvar composeCssClasses = require('../../utils/composeCssClasses.js');\nvar index = require('../Nav/index.js');\nvar index_module = require('./index.module.css.js');\nfunction MenuNav(props) {\n  const {\n    color,\n    activeColor,\n    position = {\n      bottom: '0',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    justifyContent = 'center',\n    mobileThreshold: componentMobileThreshold,\n    isNullAfterThreshold,\n    extraButton,\n    isExtraButtonRight = true\n  } = props;\n  const {\n    state: {\n      width\n    },\n    mobileThreshold\n  } = Layout.useLayout();\n  const {\n    state: {\n      slides,\n      totalSlides\n    }\n  } = Manager.useManager();\n  const {\n    state: {\n      activeSlide\n    },\n    changeSlide\n  } = Controller.useController();\n  if (Number(width) <= (componentMobileThreshold !== null && componentMobileThreshold !== void 0 ? componentMobileThreshold : mobileThreshold)) {\n    if (isNullAfterThreshold) return null;\n    return jsxRuntime.jsx(index.Nav, Object.assign({}, props));\n  }\n  function renderButtons() {\n    if (!totalSlides) return [];\n    const onClickHandler = slideNumber => {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n    return Array.from(slides.values()).map((_ref, index) => {\n      let {\n        label,\n        number\n      } = _ref;\n      const description = label;\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n        jsxRuntime.jsx(\"li\", Object.assign({\n          className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-button', index_module[\"default\"].Button, {\n            className: index_module[\"default\"].Active,\n            useIf: activeSlide === number\n          }),\n          onClick: () => onClickHandler(number)\n        }, {\n          children: jsxRuntime.jsxs(\"div\", Object.assign({\n            className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-button-description', index_module[\"default\"].Description)\n          }, {\n            children: [jsxRuntime.jsxs(\"div\", Object.assign({\n              className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-button-number', index_module[\"default\"].Number)\n            }, {\n              children: [number, jsxRuntime.jsx(\"span\", {\n                className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-button-square', index_module[\"default\"].Square)\n              })]\n            })), jsxRuntime.jsx(\"div\", Object.assign({\n              className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-button-text', index_module[\"default\"].Text)\n            }, {\n              children: description\n            }))]\n          }))\n        }), index)\n      );\n    });\n  }\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--nav-color': color,\n    '--nav-active-color': activeColor\n  };\n  return jsxRuntime.jsxs(\"div\", Object.assign({\n    className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-wrapper', index_module[\"default\"].Wrapper),\n    style: Object.assign(Object.assign(Object.assign({}, position), CSSVariables), {\n      justifyContent\n    })\n  }, {\n    children: [extraButton && jsxRuntime.jsx(\"div\", Object.assign({\n      className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-extra', index_module[\"default\"].Extra),\n      style: {\n        order: isExtraButtonRight ? 1 : 0\n      }\n    }, {\n      children: jsxRuntime.jsx(\"span\", Object.assign({\n        className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-extra-button', index_module[\"default\"].ExtraButton),\n        style: {\n          borderLeft: isExtraButtonRight ? '1px solid var(--nav-color, rgba(215, 225, 235, 0.6))' : undefined,\n          borderRight: !isExtraButtonRight ? '1px solid var(--nav-color, rgba(215, 225, 235, 0.6))' : undefined\n        }\n      }, {\n        children: extraButton\n      }))\n    })), jsxRuntime.jsxs(\"ul\", Object.assign({\n      className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-container', index_module[\"default\"].Container)\n    }, {\n      children: [renderButtons(), jsxRuntime.jsx(\"span\", {\n        className: composeCssClasses.composeCssClasses('hero-slider-menu-nav-bar', index_module[\"default\"].Bar),\n        style: {\n          width: `${100 / totalSlides}%`,\n          transform: `translate3d(${activeSlide - 1}00%, 0, 0)`\n        }\n      })]\n    }))]\n  }));\n}\nMenuNav.displayName = 'hero-slider/menu-nav';\nexports.MenuNav = MenuNav;","map":{"version":3,"sources":["../../../src/components/MenuNav/index.tsx"],"names":["useLayout","useManager","useController","_jsx","composeCssClasses","MenuNavModuleCss","_jsxs"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { useController } from '../../modules/Controller';\nimport { useLayout } from '../../modules/Layout';\nimport { useManager } from '../../modules/Manager';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\nimport { Nav, NavProps } from '../Nav';\nimport MenuNavModuleCss from './index.module.css';\n\n/**\n * `MenuNav` component props.\n */\nexport interface MenuNavProps extends NavProps {\n  /**\n   * Determines how the browser distributes space between and around nav items along the component.\n   */\n  justifyContent?: React.CSSProperties['justifyContent'];\n  /**\n   * Given the nature of this component, it doesn't work well with devices of relatively small width.\n   * The mobile threshold is the point in which this component turns into a basic `Nav` component or `null`.\n   */\n  mobileThreshold?: number;\n  /**\n   * Determines if the nav should render `null` or a basic `Nav` component after the threshold is reached.\n   * @default false\n   */\n  isNullAfterThreshold?: boolean;\n  /**\n   * An extra button rendered among the nav items in case the developer may want any extra functionality in the component.\n   */\n  extraButton?: React.ReactNode;\n  /**\n   * Renders the button to the right side of the nav if true, otherwise it will appear at the left side.\n   * @default true\n   */\n  isExtraButtonRight?: boolean;\n}\n\nexport function MenuNav(props: MenuNavProps) {\n  const {\n    color,\n    activeColor,\n    position = {\n      bottom: '0',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    justifyContent = 'center',\n    mobileThreshold: componentMobileThreshold,\n    isNullAfterThreshold,\n    extraButton,\n    isExtraButtonRight = true\n  } = props;\n\n  const {\n    state: { width },\n    mobileThreshold\n  } = useLayout();\n\n  const {\n    state: { slides, totalSlides }\n  } = useManager();\n\n  const {\n    state: { activeSlide },\n    changeSlide\n  } = useController();\n\n  if (Number(width) <= (componentMobileThreshold ?? mobileThreshold)) {\n    if (isNullAfterThreshold) return null;\n    return <Nav {...props} />;\n  }\n\n  function renderButtons() {\n    if (!totalSlides) return [];\n\n    const onClickHandler = (slideNumber: number) => {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n\n    return Array.from(slides.values()).map(({ label, number }, index) => {\n      const description = label;\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n        <li\n          key={index}\n          className={composeCssClasses(\n            'hero-slider-menu-nav-button',\n            MenuNavModuleCss.Button,\n            {\n              className: MenuNavModuleCss.Active,\n              useIf: activeSlide === number\n            }\n          )}\n          onClick={() => onClickHandler(number)}\n        >\n          <div\n            className={composeCssClasses(\n              'hero-slider-menu-nav-button-description',\n              MenuNavModuleCss.Description\n            )}\n          >\n            <div\n              className={composeCssClasses(\n                'hero-slider-menu-nav-button-number',\n                MenuNavModuleCss.Number\n              )}\n            >\n              {number}\n              <span\n                className={composeCssClasses(\n                  'hero-slider-menu-nav-button-square',\n                  MenuNavModuleCss.Square\n                )}\n              />\n            </div>\n            <div\n              className={composeCssClasses(\n                'hero-slider-menu-nav-button-text',\n                MenuNavModuleCss.Text\n              )}\n            >\n              {description}\n            </div>\n          </div>\n        </li>\n      );\n    });\n  }\n\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--nav-color': color,\n    '--nav-active-color': activeColor\n  };\n\n  return (\n    <div\n      className={composeCssClasses(\n        'hero-slider-menu-nav-wrapper',\n        MenuNavModuleCss.Wrapper\n      )}\n      style={{\n        ...position,\n        ...CSSVariables,\n        justifyContent\n      }}\n    >\n      {extraButton && (\n        <div\n          className={composeCssClasses(\n            'hero-slider-menu-nav-extra',\n            MenuNavModuleCss.Extra\n          )}\n          style={{\n            order: isExtraButtonRight ? 1 : 0\n          }}\n        >\n          <span\n            className={composeCssClasses(\n              'hero-slider-menu-nav-extra-button',\n              MenuNavModuleCss.ExtraButton\n            )}\n            style={{\n              borderLeft: isExtraButtonRight\n                ? '1px solid var(--nav-color, rgba(215, 225, 235, 0.6))'\n                : undefined,\n              borderRight: !isExtraButtonRight\n                ? '1px solid var(--nav-color, rgba(215, 225, 235, 0.6))'\n                : undefined\n            }}\n          >\n            {extraButton}\n          </span>\n        </div>\n      )}\n      <ul\n        className={composeCssClasses(\n          'hero-slider-menu-nav-container',\n          MenuNavModuleCss.Container\n        )}\n      >\n        {renderButtons()}\n        <span\n          className={composeCssClasses(\n            'hero-slider-menu-nav-bar',\n            MenuNavModuleCss.Bar\n          )}\n          style={{\n            width: `${100 / totalSlides}%`,\n            transform: `translate3d(${activeSlide - 1}00%, 0, 0)`\n          }}\n        />\n      </ul>\n    </div>\n  );\n}\n\n(MenuNav as React.FunctionComponent).displayName = 'hero-slider/menu-nav';\n"]},"metadata":{},"sourceType":"script"}