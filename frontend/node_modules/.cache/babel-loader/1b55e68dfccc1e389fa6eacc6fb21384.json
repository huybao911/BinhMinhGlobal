{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar Controller = require('../../modules/Controller.js');\nvar Layout = require('../../modules/Layout.js');\nvar Manager = require('../../modules/Manager.js');\nvar composeCssClasses = require('../../utils/composeCssClasses.js');\nvar index = require('../Nav/index.js');\nvar index_module = require('./index.module.css.js');\nfunction ButtonsNav(props) {\n  const {\n    color,\n    activeColor,\n    backgroundColor,\n    position = {\n      bottom: '0',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    justifyContent,\n    alignItems,\n    mobileThreshold: componentMobileThreshold,\n    isNullAfterThreshold = false,\n    extraButton,\n    isExtraButtonRight\n  } = props;\n  const {\n    state: {\n      width\n    },\n    mobileThreshold\n  } = Layout.useLayout();\n  const {\n    state: {\n      slides,\n      totalSlides\n    }\n  } = Manager.useManager();\n  const {\n    state: {\n      activeSlide\n    },\n    changeSlide\n  } = Controller.useController();\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--nav-color': color,\n    '--nav-background-color': backgroundColor,\n    '--nav-active-color': activeColor\n  };\n  if (Number(width) <= (componentMobileThreshold !== null && componentMobileThreshold !== void 0 ? componentMobileThreshold : mobileThreshold)) {\n    if (isNullAfterThreshold) return null;\n    return jsxRuntime.jsx(index.Nav, Object.assign({}, props));\n  }\n  function renderButtons() {\n    if (!totalSlides) return [];\n    const onClickHandler = slideNumber => {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n    return Array.from(slides.values()).map(_ref => {\n      let {\n        number,\n        label\n      } = _ref;\n      const description = label;\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n        jsxRuntime.jsx(\"li\", Object.assign({\n          className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-button', index_module[\"default\"].Button, {\n            className: index_module[\"default\"].Active,\n            useIf: activeSlide === number\n          }),\n          onClick: () => onClickHandler(number)\n        }, {\n          children: jsxRuntime.jsx(\"div\", Object.assign({\n            className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-button-description', index_module[\"default\"].Description)\n          }, {\n            children: jsxRuntime.jsx(\"div\", Object.assign({\n              className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-button-text', index_module[\"default\"].Text)\n            }, {\n              children: description\n            }))\n          }))\n        }), number)\n      );\n    });\n  }\n  return jsxRuntime.jsx(\"div\", Object.assign({\n    className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-wrapper', index_module[\"default\"].Wrapper),\n    style: Object.assign(Object.assign({}, position), CSSVariables)\n  }, {\n    children: jsxRuntime.jsxs(\"ul\", Object.assign({\n      className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-container', index_module[\"default\"].Container),\n      style: {\n        justifyContent: justifyContent || 'center',\n        /**\n         * The **vertical alignment** of the buttons can be set manually.\n         * If it's undefined and if there is a position top passed as prop,\n         * then `alignItems` will be `flex-start`. Otherwise,\n         * it is set as `flex-end`.\n         */\n        alignItems: alignItems || (position.top !== undefined ? 'flex-start' : 'flex-end')\n      }\n    }, {\n      children: [renderButtons(), extraButton && jsxRuntime.jsx(\"div\", Object.assign({\n        className: composeCssClasses.composeCssClasses('hero-slider-buttons-nav-extra-button', index_module[\"default\"].ExtraButton),\n        style: {\n          order: isExtraButtonRight ? 1 : 0\n        }\n      }, {\n        children: extraButton\n      }))]\n    }))\n  }));\n}\nButtonsNav.displayName = 'hero-slider/buttons-nav';\nexports.ButtonsNav = ButtonsNav;","map":{"version":3,"sources":["../../../src/components/ButtonsNav/index.tsx"],"names":["useLayout","useManager","useController","_jsx","composeCssClasses","ButtonsNavModuleCss"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { useController } from '../../modules/Controller';\nimport { useLayout } from '../../modules/Layout';\nimport { useManager } from '../../modules/Manager';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\nimport { MenuNavProps } from '../MenuNav';\nimport { Nav } from '../Nav';\nimport ButtonsNavModuleCss from './index.module.css';\n\n/**\n * `ButtonsNav` component props.\n */\nexport interface ButtonsNavProps extends MenuNavProps {\n  /**\n   * CSS background color property for the nav buttons.\n   */\n  backgroundColor?: React.CSSProperties['backgroundColor'];\n  /**\n   * Aligns the nav items to the center, top, or bottom of its container working exactly as how the CSS flex-box `align-items` property works.\n   */\n  alignItems?: React.CSSProperties['alignItems'];\n}\n\nexport function ButtonsNav(props: ButtonsNavProps) {\n  const {\n    color,\n    activeColor,\n    backgroundColor,\n    position = {\n      bottom: '0',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    justifyContent,\n    alignItems,\n    mobileThreshold: componentMobileThreshold,\n    isNullAfterThreshold = false,\n    extraButton,\n    isExtraButtonRight\n  } = props;\n\n  const {\n    state: { width },\n    mobileThreshold\n  } = useLayout();\n\n  const {\n    state: { slides, totalSlides }\n  } = useManager();\n\n  const {\n    state: { activeSlide },\n    changeSlide\n  } = useController();\n\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--nav-color': color,\n    '--nav-background-color': backgroundColor,\n    '--nav-active-color': activeColor\n  };\n\n  if (Number(width) <= (componentMobileThreshold ?? mobileThreshold)) {\n    if (isNullAfterThreshold) return null;\n    return <Nav {...props} />;\n  }\n\n  function renderButtons() {\n    if (!totalSlides) return [];\n\n    const onClickHandler = (slideNumber: number) => {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n\n    return Array.from(slides.values()).map(({ number, label }) => {\n      const description = label;\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions\n        <li\n          key={number}\n          className={composeCssClasses(\n            'hero-slider-buttons-nav-button',\n            ButtonsNavModuleCss.Button,\n            {\n              className: ButtonsNavModuleCss.Active,\n              useIf: activeSlide === number\n            }\n          )}\n          onClick={() => onClickHandler(number)}\n        >\n          <div\n            className={composeCssClasses(\n              'hero-slider-buttons-nav-button-description',\n              ButtonsNavModuleCss.Description\n            )}\n          >\n            <div\n              className={composeCssClasses(\n                'hero-slider-buttons-nav-button-text',\n                ButtonsNavModuleCss.Text\n              )}\n            >\n              {description}\n            </div>\n          </div>\n        </li>\n      );\n    });\n  }\n\n  return (\n    <div\n      className={composeCssClasses(\n        'hero-slider-buttons-nav-wrapper',\n        ButtonsNavModuleCss.Wrapper\n      )}\n      style={{\n        ...position,\n        ...CSSVariables\n      }}\n    >\n      <ul\n        className={composeCssClasses(\n          'hero-slider-buttons-nav-container',\n          ButtonsNavModuleCss.Container\n        )}\n        style={{\n          justifyContent: justifyContent || 'center',\n          /**\n           * The **vertical alignment** of the buttons can be set manually.\n           * If it's undefined and if there is a position top passed as prop,\n           * then `alignItems` will be `flex-start`. Otherwise,\n           * it is set as `flex-end`.\n           */\n          alignItems:\n            alignItems ||\n            (position.top !== undefined ? 'flex-start' : 'flex-end')\n        }}\n      >\n        {renderButtons()}\n        {extraButton && (\n          <div\n            className={composeCssClasses(\n              'hero-slider-buttons-nav-extra-button',\n              ButtonsNavModuleCss.ExtraButton\n            )}\n            style={{\n              order: isExtraButtonRight ? 1 : 0\n            }}\n          >\n            {extraButton}\n          </div>\n        )}\n      </ul>\n    </div>\n  );\n}\n\n(ButtonsNav as React.FunctionComponent).displayName = 'hero-slider/buttons-nav';\n"]},"metadata":{},"sourceType":"script"}