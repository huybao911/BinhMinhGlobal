{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar React = require('react');\nvar Autoplay = require('../../modules/Autoplay.js');\nvar IntervalTimer = require('../../modules/IntervalTimer.js');\nvar composeCssClasses = require('../../utils/composeCssClasses.js');\nvar index_module = require('./index.module.css.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nvar ButtonType;\n(function (ButtonType) {\n  ButtonType[\"PLAY\"] = \"play\";\n  ButtonType[\"PAUSE\"] = \"pause\";\n})(ButtonType || (ButtonType = {}));\nclass AutoplaySvg {\n  static getPath(buttonType) {\n    if (buttonType === ButtonType.PAUSE) return AutoplaySvg.pausePath;else return AutoplaySvg.playPath;\n  }\n}\nAutoplaySvg.playPath = 'M 12,26 18.5,22 18.5,14 12,10 z M 18.5,22 25,18 25,18 18.5,14 z';\nAutoplaySvg.pausePath = 'M 12,26 16,26 16,10 12,10 z M 21,26 25,26 25,10 21,10 z';\nfunction AutoplayButton(props) {\n  const {\n    className,\n    style,\n    position = {\n      bottom: '0',\n      left: '0'\n    }\n  } = props;\n  const {\n    state: {\n      isPausedByUser\n    },\n    autoplayState,\n    resume,\n    pause\n  } = Autoplay.useAutoplay();\n  const [buttonType, setButtonType] = React__default[\"default\"].useState(autoplayState !== IntervalTimer.IntervalState.IDLE ? ButtonType.PAUSE : ButtonType.PLAY);\n  const onClickHandler = event => {\n    event.stopPropagation();\n    if (isPausedByUser) resume();else pause();\n  };\n  React__default[\"default\"].useEffect(() => {\n    if (isPausedByUser && autoplayState === IntervalTimer.IntervalState.IDLE) setButtonType(ButtonType.PLAY);else if (isPausedByUser && autoplayState === IntervalTimer.IntervalState.PAUSED) setButtonType(ButtonType.PLAY);else setButtonType(ButtonType.PAUSE);\n  }, [isPausedByUser, autoplayState]);\n  return jsxRuntime.jsx(\"button\", Object.assign({\n    \"data-testid\": \"hero-slider-autoplay-button\",\n    className: composeCssClasses.composeCssClasses('hero-slider-autoplay-button', index_module[\"default\"].Button, className),\n    onClick: onClickHandler,\n    style: Object.assign(Object.assign({}, position), style)\n  }, {\n    children: jsxRuntime.jsx(\"svg\", Object.assign({\n      fill: \"currentColor\",\n      height: \"100%\",\n      width: \"100%\",\n      viewBox: \"0 0 36 36\"\n    }, {\n      children: jsxRuntime.jsx(\"path\", {\n        d: AutoplaySvg.getPath(buttonType)\n      })\n    }))\n  }));\n}\nAutoplayButton.displayName = 'hero-slider/autoplay-button';\nexports.AutoplayButton = AutoplayButton;","map":{"version":3,"sources":["../../../src/components/AutoplayButton/index.tsx"],"names":["useAutoplay","React","IntervalState","_jsx","composeCssClasses","AutoplayButtonModuleCss"],"mappings":";;;;;;;;;;;;;;;;;AAQA,IAAK,UAGJ;AAHD,CAAA,UAAK,UAAU,EAAA;EACb,UAAA,CAAA,MAAA,CAAA,GAAA,MAAa;EACb,UAAA,CAAA,OAAA,CAAA,GAAA,OAAe;AACjB,CAAC,EAHI,UAAU,KAAV,UAAU,GAGd,CAAA,CAAA,CAAA,CAAA;AA0BD,MAAM,WAAW,CAAA;EAOR,OAAO,OAAO,CAAC,UAAsB,EAAA;IAC1C,IAAI,UAAU,KAAK,UAAU,CAAC,KAAK,EAAE,OAAO,WAAW,CAAC,SAAS,CAAC,KAC7D,OAAO,WAAW,CAAC,QAAQ;EACjC;;AATuB,WAAQ,CAAA,QAAA,GAC9B,iEAAiE;AAE3C,WAAS,CAAA,SAAA,GAC/B,yDAAyD;AAQvD,SAAU,cAAc,CAAC,KAA0B,EAAA;EACvD,MAAM;IACJ,SAAS;IACT,KAAK;IACL,QAAQ,GAAG;MACT,MAAM,EAAE,GAAG;MACX,IAAI,EAAE;IACP;EAAA,CACF,GAAG,KAAK;EAET,MAAM;IACJ,KAAK,EAAE;MAAE;IAAc,CAAE;IACzB,aAAa;IACb,MAAM;IACN;EAAK,CACN,GAAGA,QAAAA,CAAAA,WAAW,CAAA,CAAE;EAEjB,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAGC,cAAAA,CAAAA,SAAAA,CAAK,CAAC,QAAQ,CAChD,aAAa,KAAKC,aAAAA,CAAAA,aAAa,CAAC,IAAI,GAAG,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAC1E;EAED,MAAM,cAAc,GAClB,KAAsD,IACpD;IACF,KAAK,CAAC,eAAe,CAAA,CAAE;IACvB,IAAI,cAAc,EAAE,MAAM,CAAA,CAAE,CAAC,KACxB,KAAK,CAAA,CAAE;EACd,CAAC;EAED,cAAA,CAAA,SAAA,CAAK,CAAC,SAAS,CAAC,MAAK;IACnB,IAAI,cAAc,IAAI,aAAa,KAAKA,aAAAA,CAAAA,aAAa,CAAC,IAAI,EACxD,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAC5B,IAAI,cAAc,IAAI,aAAa,KAAKA,aAAAA,CAAAA,aAAa,CAAC,MAAM,EAC/D,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,KAC5B,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC;EACtC,CAAC,EAAE,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;EAEnC,OACEC,UAAAA,CAAAA,GACc,CAAA,QAAA,EAAA,MAAA,CAAA,MAAA,CAAA;IAAA,aAAA,EAAA,6BAA6B;IACzC,SAAS,EAAEC,iBAAAA,CAAAA,iBAAiB,CAC1B,6BAA6B,EAC7BC,YAAAA,CAAAA,SAAAA,CAAuB,CAAC,MAAM,EAC9B,SAAS,CACV;IACD,OAAO,EAAE,cAAc;IACvB,KAAK,EACA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,QAAQ,CACR,EAAA,KAAK;EAGV,CAAA,EAAA;IAAA,QAAA,EAAA,UAAA,CAAA,GAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;MAAK,IAAI,EAAC,cAAc;MAAC,MAAM,EAAC,MAAM;MAAC,KAAK,EAAC,MAAM;MAAC,OAAO,EAAC;IAAW,CACrE,EAAA;MAAA,QAAA,EAAA,UAAA,CAAA,GAAA,CAAA,MAAA,EAAA;QAAM,CAAC,EAAE,WAAW,CAAC,OAAO,CAAC,UAAU;MAAC,CAAI;IAAA,CAAA,CAAA;EACxC,CACC,CAAA,CAAA;AAEb;AAEC,cAA0C,CAAC,WAAW,GACrD,6BAA6B","sourcesContent":["import React from 'react';\n\nimport { useAutoplay } from '../../modules/Autoplay';\nimport { IntervalState } from '../../modules/IntervalTimer';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\nimport { NavPosition } from '../Nav';\nimport AutoplayButtonModuleCss from './index.module.css';\n\nenum ButtonType {\n  PLAY = 'play',\n  PAUSE = 'pause'\n}\n\n/**\n * `AutoplayButton` component props.\n */\nexport interface AutoplayButtonProps {\n  /**\n   * CSS class name.\n   */\n  className?: React.HTMLAttributes<HTMLElement>['className'];\n  /**\n   * Object of CSS properties `top`, `left`, `bottom`, and `right` used to absolutely position elements.\n   * Aside from the former, you can also set the CSS `transform` property to help you center the element.\n   * @default\n   * {\n   *    bottom: '0',\n   *    left: '0'\n   * }\n   */\n  position?: NavPosition;\n  /**\n   * Inline CSS styling.\n   */\n  style?: React.CSSProperties;\n}\n\nclass AutoplaySvg {\n  private static readonly playPath =\n    'M 12,26 18.5,22 18.5,14 12,10 z M 18.5,22 25,18 25,18 18.5,14 z';\n\n  private static readonly pausePath =\n    'M 12,26 16,26 16,10 12,10 z M 21,26 25,26 25,10 21,10 z';\n\n  public static getPath(buttonType: ButtonType): string {\n    if (buttonType === ButtonType.PAUSE) return AutoplaySvg.pausePath;\n    else return AutoplaySvg.playPath;\n  }\n}\n\nexport function AutoplayButton(props: AutoplayButtonProps) {\n  const {\n    className,\n    style,\n    position = {\n      bottom: '0',\n      left: '0'\n    }\n  } = props;\n\n  const {\n    state: { isPausedByUser },\n    autoplayState,\n    resume,\n    pause\n  } = useAutoplay();\n\n  const [buttonType, setButtonType] = React.useState<ButtonType>(\n    autoplayState !== IntervalState.IDLE ? ButtonType.PAUSE : ButtonType.PLAY\n  );\n\n  const onClickHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.stopPropagation();\n    if (isPausedByUser) resume();\n    else pause();\n  };\n\n  React.useEffect(() => {\n    if (isPausedByUser && autoplayState === IntervalState.IDLE)\n      setButtonType(ButtonType.PLAY);\n    else if (isPausedByUser && autoplayState === IntervalState.PAUSED)\n      setButtonType(ButtonType.PLAY);\n    else setButtonType(ButtonType.PAUSE);\n  }, [isPausedByUser, autoplayState]);\n\n  return (\n    <button\n      data-testid=\"hero-slider-autoplay-button\"\n      className={composeCssClasses(\n        'hero-slider-autoplay-button',\n        AutoplayButtonModuleCss.Button,\n        className\n      )}\n      onClick={onClickHandler}\n      style={{\n        ...position,\n        ...style\n      }}\n    >\n      <svg fill=\"currentColor\" height=\"100%\" width=\"100%\" viewBox=\"0 0 36 36\">\n        <path d={AutoplaySvg.getPath(buttonType)} />\n      </svg>\n    </button>\n  );\n}\n\n(AutoplayButton as React.FunctionComponent).displayName =\n  'hero-slider/autoplay-button';\n"]},"metadata":{},"sourceType":"script"}