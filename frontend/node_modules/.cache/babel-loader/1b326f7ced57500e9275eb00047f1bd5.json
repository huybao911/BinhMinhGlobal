{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar React = require('react');\nvar HeroSlider_module = require('../HeroSlider.module.css.js');\nvar Accessibility = require('./Accessibility.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nvar SlidingAnimation;\n(function (SlidingAnimation) {\n  SlidingAnimation[\"TOP_TO_BOTTOM\"] = \"top_to_bottom\";\n  SlidingAnimation[\"BOTTOM_TO_TOP\"] = \"bottom_to_top\";\n  SlidingAnimation[\"LEFT_TO_RIGHT\"] = \"left_to_right\";\n  SlidingAnimation[\"RIGHT_TO_LEFT\"] = \"right_to_left\";\n  SlidingAnimation[\"FADE\"] = \"fade\";\n})(SlidingAnimation || (SlidingAnimation = {}));\nconst SlidingAnimationCssClassMap = {\n  [SlidingAnimation.FADE]: HeroSlider_module[\"default\"].Sliding_Fade_In,\n  [SlidingAnimation.TOP_TO_BOTTOM]: HeroSlider_module[\"default\"].Sliding_Top_To_Bottom,\n  [SlidingAnimation.BOTTOM_TO_TOP]: HeroSlider_module[\"default\"].Sliding_Bottom_To_Top,\n  [SlidingAnimation.LEFT_TO_RIGHT]: HeroSlider_module[\"default\"].Sliding_Left_To_Right,\n  [SlidingAnimation.RIGHT_TO_LEFT]: HeroSlider_module[\"default\"].Sliding_Right_To_Left\n};\nconst defaultProps = {\n  slidingAnimation: 'wipe',\n  sliderFadeInDuration: 100,\n  navbarFadeInDuration: 1000,\n  navbarFadeInDelay: 500,\n  shouldManageAnimationSequence: true\n};\nconst AnimationsStateContext = React__default[\"default\"].createContext(undefined);\nfunction AnimationsProvider(_ref) {\n  let {\n    children,\n    animations\n  } = _ref;\n  var _a, _b, _c, _d;\n  const {\n    orientation\n  } = Accessibility.useAccessibility();\n  const params = {\n    slidingAnimation: (animations === null || animations === void 0 ? void 0 : animations.slidingAnimation) || defaultProps.slidingAnimation,\n    sliderFadeInDuration: (_a = animations === null || animations === void 0 ? void 0 : animations.sliderFadeInDuration) !== null && _a !== void 0 ? _a : defaultProps.sliderFadeInDuration,\n    navbarFadeInDuration: (_b = animations === null || animations === void 0 ? void 0 : animations.navbarFadeInDuration) !== null && _b !== void 0 ? _b : defaultProps.navbarFadeInDuration,\n    navbarFadeInDelay: (_c = animations === null || animations === void 0 ? void 0 : animations.navbarFadeInDelay) !== null && _c !== void 0 ? _c : defaultProps.navbarFadeInDelay,\n    shouldManageAnimationSequence: (_d = animations === null || animations === void 0 ? void 0 : animations.shouldManageAnimationSequence) !== null && _d !== void 0 ? _d : defaultProps.shouldManageAnimationSequence\n  };\n  const getSlidingAnimationCssClass = (activeSlide, prevActiveSlide, slidingDirection) => {\n    const getSlidingAnimation = () => {\n      switch (params.slidingAnimation) {\n        case 'fade':\n          return SlidingAnimation.FADE;\n        case 'wipe':\n          {\n            let direction;\n            if (slidingDirection) direction = slidingDirection;else {\n              const isSlidingForward = activeSlide > prevActiveSlide;\n              direction = isSlidingForward ? 'forward' : 'backward';\n            }\n            if (direction === 'forward') return orientation === Accessibility.AccessibilityOrientation.HORIZONTAL ? SlidingAnimation.RIGHT_TO_LEFT : SlidingAnimation.BOTTOM_TO_TOP;else return orientation === Accessibility.AccessibilityOrientation.HORIZONTAL ? SlidingAnimation.LEFT_TO_RIGHT : SlidingAnimation.TOP_TO_BOTTOM;\n          }\n        default:\n          {\n            throw new Error(`Unhandled sliding animation: [${params.slidingAnimation}]`);\n          }\n      }\n    };\n    return SlidingAnimationCssClassMap[getSlidingAnimation()];\n  };\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    sliderFadeInDuration: params.sliderFadeInDuration,\n    navbarFadeInDuration: params.sliderFadeInDuration,\n    navbarFadeInDelay: params.sliderFadeInDuration,\n    getSlidingAnimationCssClass\n  };\n  return jsxRuntime.jsx(AnimationsStateContext.Provider, Object.assign({\n    value: value\n  }, {\n    children: children\n  }));\n}\nfunction useAnimations() {\n  const context = React__default[\"default\"].useContext(AnimationsStateContext);\n  if (context === undefined) {\n    throw new Error('useAnimations must be used within a AnimationsProvider');\n  }\n  return context;\n}\nexports.AnimationsProvider = AnimationsProvider;\nexports.useAnimations = useAnimations;","map":{"version":3,"sources":["../../src/modules/Animations.tsx"],"names":["HeroSliderModuleCss","React","useAccessibility","AccessibilityOrientation","_jsx"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport HeroSliderModuleCss from '../HeroSlider.module.css';\nimport { AccessibilityOrientation, useAccessibility } from './Accessibility';\n\nenum SlidingAnimation {\n  TOP_TO_BOTTOM = 'top_to_bottom',\n  BOTTOM_TO_TOP = 'bottom_to_top',\n  LEFT_TO_RIGHT = 'left_to_right',\n  RIGHT_TO_LEFT = 'right_to_left',\n  FADE = 'fade'\n}\n\nexport interface AnimationsProps {\n  /**\n   * The sliding animations during transitions.\n   * @default 'wipe'\n   */\n  slidingAnimation?: 'fade' | 'wipe';\n  /**\n   * Fade in duration of the slider during mount, in milliseconds.\n   * @default 100\n   */\n  sliderFadeInDuration?: number;\n  /**\n   * Navbars fade in duration, in milliseconds.\n   * @default 1000\n   */\n  navbarFadeInDuration?: number;\n  /**\n   * Navbars fade in delay, in milliseconds.\n   * @default 500\n   */\n  navbarFadeInDelay?: number;\n  /**\n   * When `true`, the `hero-slider` will know which animation should be set next.\n   * For example, if the user is selecting the next slide, the animation would be different to the one if the user had selected the previous slide.\n   * The animations will essentially be the same, but moving to different directions (e.g. left or right, or right to left).\n   * @default true\n   */\n  shouldManageAnimationSequence?: boolean;\n}\n\ntype ProviderProps = React.PropsWithChildren<{ animations?: AnimationsProps }>;\n\ninterface GetSlidingAnimationCssClass {\n  (\n    activeSlide: number,\n    prevActiveSlide: number,\n    slidingDirection?: 'forward' | 'backward'\n  ): string;\n}\n\nconst SlidingAnimationCssClassMap: Record<SlidingAnimation, string> = {\n  [SlidingAnimation.FADE]: HeroSliderModuleCss.Sliding_Fade_In,\n  [SlidingAnimation.TOP_TO_BOTTOM]: HeroSliderModuleCss.Sliding_Top_To_Bottom,\n  [SlidingAnimation.BOTTOM_TO_TOP]: HeroSliderModuleCss.Sliding_Bottom_To_Top,\n  [SlidingAnimation.LEFT_TO_RIGHT]: HeroSliderModuleCss.Sliding_Left_To_Right,\n  [SlidingAnimation.RIGHT_TO_LEFT]: HeroSliderModuleCss.Sliding_Right_To_Left\n};\n\nconst defaultProps: Required<AnimationsProps> = {\n  slidingAnimation: 'wipe',\n  sliderFadeInDuration: 100,\n  navbarFadeInDuration: 1000,\n  navbarFadeInDelay: 500,\n  shouldManageAnimationSequence: true\n};\n\nconst AnimationsStateContext = React.createContext<\n  | {\n      sliderFadeInDuration: number;\n      navbarFadeInDuration: number;\n      navbarFadeInDelay: number;\n      getSlidingAnimationCssClass: GetSlidingAnimationCssClass;\n    }\n  | undefined\n>(undefined);\n\nfunction AnimationsProvider({ children, animations }: ProviderProps) {\n  const { orientation } = useAccessibility();\n\n  const params: Required<AnimationsProps> = {\n    slidingAnimation:\n      animations?.slidingAnimation || defaultProps.slidingAnimation,\n    sliderFadeInDuration:\n      animations?.sliderFadeInDuration ?? defaultProps.sliderFadeInDuration,\n    navbarFadeInDuration:\n      animations?.navbarFadeInDuration ?? defaultProps.navbarFadeInDuration,\n    navbarFadeInDelay:\n      animations?.navbarFadeInDelay ?? defaultProps.navbarFadeInDelay,\n    shouldManageAnimationSequence:\n      animations?.shouldManageAnimationSequence ??\n      defaultProps.shouldManageAnimationSequence\n  };\n\n  const getSlidingAnimationCssClass: GetSlidingAnimationCssClass = (\n    activeSlide,\n    prevActiveSlide,\n    slidingDirection\n  ): string => {\n    const getSlidingAnimation = (): SlidingAnimation => {\n      switch (params.slidingAnimation) {\n        case 'fade':\n          return SlidingAnimation.FADE;\n        case 'wipe': {\n          let direction: 'forward' | 'backward';\n\n          if (slidingDirection) direction = slidingDirection;\n          else {\n            const isSlidingForward = activeSlide > prevActiveSlide;\n            direction = isSlidingForward ? 'forward' : 'backward';\n          }\n\n          if (direction === 'forward')\n            return orientation === AccessibilityOrientation.HORIZONTAL\n              ? SlidingAnimation.RIGHT_TO_LEFT\n              : SlidingAnimation.BOTTOM_TO_TOP;\n          else\n            return orientation === AccessibilityOrientation.HORIZONTAL\n              ? SlidingAnimation.LEFT_TO_RIGHT\n              : SlidingAnimation.TOP_TO_BOTTOM;\n        }\n        default: {\n          throw new Error(\n            `Unhandled sliding animation: [${params.slidingAnimation}]`\n          );\n        }\n      }\n    };\n\n    return SlidingAnimationCssClassMap[getSlidingAnimation()];\n  };\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    sliderFadeInDuration: params.sliderFadeInDuration,\n    navbarFadeInDuration: params.sliderFadeInDuration,\n    navbarFadeInDelay: params.sliderFadeInDuration,\n    getSlidingAnimationCssClass\n  };\n\n  return (\n    <AnimationsStateContext.Provider value={value}>\n      {children}\n    </AnimationsStateContext.Provider>\n  );\n}\n\nfunction useAnimations() {\n  const context = React.useContext(AnimationsStateContext);\n\n  if (context === undefined) {\n    throw new Error('useAnimations must be used within a AnimationsProvider');\n  }\n\n  return context;\n}\n\nexport { AnimationsProvider, useAnimations };\n"]},"metadata":{},"sourceType":"script"}