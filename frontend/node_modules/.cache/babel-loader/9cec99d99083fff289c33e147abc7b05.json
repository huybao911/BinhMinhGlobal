{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar React = require('react');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nconst mobileThreshold = 1024;\nconst LayoutStateContext = React__default[\"default\"].createContext(undefined);\nfunction layoutReducer(state, action) {\n  var _a, _b;\n  switch (action.type) {\n    case 'update-slider-dimensions':\n      {\n        return {\n          slider: state.slider,\n          width: (_a = state.slider.current) === null || _a === void 0 ? void 0 : _a.clientWidth,\n          height: (_b = state.slider.current) === null || _b === void 0 ? void 0 : _b.clientHeight\n        };\n      }\n    default:\n      {\n        throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n      }\n  }\n}\nfunction LayoutProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = React__default[\"default\"].useReducer(layoutReducer, {\n    slider: React__default[\"default\"].useRef(null),\n    width: undefined,\n    height: undefined\n  });\n  /**\n   * After mounting, similar to `componentDidMount`, set up the window event listeners and update dimensions.\n   */\n  React__default[\"default\"].useEffect(() => {\n    function updateSliderDimensions() {\n      if (state.slider.current) dispatch({\n        type: 'update-slider-dimensions'\n      });\n    }\n    updateSliderDimensions();\n    window.addEventListener('resize', updateSliderDimensions);\n    /**\n     * Clearing event listener to avoid memory leaks.\n     */\n    return () => {\n      window.removeEventListener('resize', updateSliderDimensions);\n    };\n  }, [state.slider.current]);\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    mobileThreshold\n  };\n  return jsxRuntime.jsx(LayoutStateContext.Provider, Object.assign({\n    value: value\n  }, {\n    children: children\n  }));\n}\nfunction useLayout() {\n  const context = React__default[\"default\"].useContext(LayoutStateContext);\n  if (context === undefined) throw new Error('useLayout must be used within a LayoutProvider');\n  return context;\n}\nexports.LayoutProvider = LayoutProvider;\nexports.useLayout = useLayout;","map":{"version":3,"sources":["../../src/modules/Layout.tsx"],"names":["React","_jsx"],"mappings":";;;;;;;;;;;;;AAGA,MAAM,eAAe,GAAG,IAAI;AAW5B,MAAM,kBAAkB,GAAGA,cAAAA,CAAAA,SAAAA,CAAK,CAAC,aAAa,CAE5C,SAAS,CAAC;AAEZ,SAAS,aAAa,CAAC,KAAY,EAAE,MAAc,EAAA;;EACjD,QAAQ,MAAM,CAAC,IAAI;IACjB,KAAK,0BAA0B;MAAE;QAC/B,OAAO;UACL,MAAM,EAAE,KAAK,CAAC,MAAM;UACpB,KAAK,EAAE,CAAA,EAAA,GAAA,KAAK,CAAC,MAAM,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,WAAsC;UACnE,MAAM,EAAE,CAAA,EAAA,GAAA,KAAK,CAAC,MAAM,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE;SAC/B;MACF;IACD;MAAS;QACP,MAAM,IAAI,KAAK,CAAuB,sBAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC;MAC1E;EACF;AACH;AAEA,SAAS,cAAc,CAAA,IAAA,EAAsC;EAAA,IAArC;IAAE;EAAQ,CAA2B,GAAA,IAAA;EAC3D,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAGA,cAAAA,CAAAA,SAAAA,CAAK,CAAC,UAAU,CAAC,aAAa,EAAE;IACxD,MAAM,EAAEA,cAAAA,CAAAA,SAAAA,CAAK,CAAC,MAAM,CAAc,IAAI,CAAC;IACvC,KAAK,EAAE,SAAS;IAChB,MAAM,EAAE;EACA,CAAA,CAAC;EAEX;;AAEG;EACH,cAAA,CAAA,SAAA,CAAK,CAAC,SAAS,CAAC,MAAK;IACnB,SAAS,sBAAsB,CAAA,EAAA;MAC7B,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,QAAQ,CAAC;QAAE,IAAI,EAAE;MAA0B,CAAE,CAAC;IACzE;IAED,sBAAsB,CAAA,CAAE;IAExB,MAAM,CAAC,gBAAgB,CACrB,QAAQ,EACR,sBAA4D,CAC7D;IACD;;AAEG;IACH,OAAO,MAAK;MACV,MAAM,CAAC,mBAAmB,CACxB,QAAQ,EACR,sBAA4D,CAC7D;IACH,CAAC;GACF,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;;;EAI1B,MAAM,KAAK,GAAG;IAAE,KAAK;IAAE;EAAe,CAAE;EAExC,OACEC,UAAAA,CAAAA,GAAAA,CAAC,kBAAkB,CAAC,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA;IAAC,KAAK,EAAE;EAAK,CAAA,EAAA;IAAA,QAAA,EACtC;EAAQ,CAAA,CAAA,CACmB;AAElC;AAEA,SAAS,SAAS,CAAA,EAAA;EAChB,MAAM,OAAO,GAAGD,cAAAA,CAAAA,SAAAA,CAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC;EAEpD,IAAI,OAAO,KAAK,SAAS,EACvB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC;EAEnE,OAAO,OAAO;AAChB","sourcesContent":["import type CSS from 'csstype';\nimport React from 'react';\n\nconst mobileThreshold = 1024;\n\ntype Action = {\n  type: 'update-slider-dimensions';\n};\ntype State = {\n  slider: React.RefObject<HTMLDivElement>;\n  width?: CSS.Properties['width'];\n  height?: CSS.Properties['height'];\n};\n\nconst LayoutStateContext = React.createContext<\n  { state: State; mobileThreshold: number } | undefined\n>(undefined);\n\nfunction layoutReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'update-slider-dimensions': {\n      return {\n        slider: state.slider,\n        width: state.slider.current?.clientWidth as CSS.Properties['width'],\n        height: state.slider.current?.clientHeight as CSS.Properties['height']\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction LayoutProvider({ children }: React.PropsWithChildren) {\n  const [state, dispatch] = React.useReducer(layoutReducer, {\n    slider: React.useRef<HTMLElement>(null),\n    width: undefined,\n    height: undefined\n  } as State);\n\n  /**\n   * After mounting, similar to `componentDidMount`, set up the window event listeners and update dimensions.\n   */\n  React.useEffect(() => {\n    function updateSliderDimensions() {\n      if (state.slider.current) dispatch({ type: 'update-slider-dimensions' });\n    }\n\n    updateSliderDimensions();\n\n    window.addEventListener(\n      'resize',\n      updateSliderDimensions as EventListenerOrEventListenerObject\n    );\n    /**\n     * Clearing event listener to avoid memory leaks.\n     */\n    return () => {\n      window.removeEventListener(\n        'resize',\n        updateSliderDimensions as EventListenerOrEventListenerObject\n      );\n    };\n  }, [state.slider.current]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = { state, mobileThreshold };\n\n  return (\n    <LayoutStateContext.Provider value={value}>\n      {children}\n    </LayoutStateContext.Provider>\n  );\n}\n\nfunction useLayout() {\n  const context = React.useContext(LayoutStateContext);\n\n  if (context === undefined)\n    throw new Error('useLayout must be used within a LayoutProvider');\n\n  return context;\n}\n\nexport { LayoutProvider, useLayout };\n"]},"metadata":{},"sourceType":"script"}