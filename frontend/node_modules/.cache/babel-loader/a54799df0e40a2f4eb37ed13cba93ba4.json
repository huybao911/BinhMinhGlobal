{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar React = require('react');\nvar ConsoleLogger = require('./ConsoleLogger.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nconst defaultProps = {\n  sliderColor: 'inherit',\n  sliderStyle: {},\n  navbarStyle: {\n    color: undefined,\n    activeColor: undefined\n  }\n};\nconst SettingsStateContext = React__default[\"default\"].createContext(undefined);\nfunction SettingsProvider(_ref) {\n  let {\n    children,\n    settings\n  } = _ref;\n  const params = {\n    sliderColor: (settings === null || settings === void 0 ? void 0 : settings.sliderColor) || defaultProps.sliderColor,\n    sliderStyle: (settings === null || settings === void 0 ? void 0 : settings.sliderStyle) || defaultProps.sliderStyle,\n    navbarStyle: (settings === null || settings === void 0 ? void 0 : settings.navbarStyle) || defaultProps.navbarStyle,\n    debug: settings === null || settings === void 0 ? void 0 : settings.debug\n  };\n  /**\n   * Set up ConsoleLogger whenever the `params.debug` change.\n   */\n  React__default[\"default\"].useEffect(() => {\n    ConsoleLogger[\"default\"].new(params.debug);\n  }, [params.debug]);\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = params;\n  return jsxRuntime.jsx(SettingsStateContext.Provider, Object.assign({\n    value: value\n  }, {\n    children: children\n  }));\n}\nfunction useSettings() {\n  const context = React__default[\"default\"].useContext(SettingsStateContext);\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n}\nexports.SettingsProvider = SettingsProvider;\nexports.useSettings = useSettings;","map":{"version":3,"sources":["../../src/modules/Settings.tsx"],"names":["React","_jsx"],"mappings":";;;;;;;;;;;;;;AA2CA,MAAM,YAAY,GAA8C;EAC9D,WAAW,EAAE,SAAS;EACtB,WAAW,EAAE,CAAA,CAAE;EACf,WAAW,EAAE;IACX,KAAK,EAAE,SAAS;IAChB,WAAW,EAAE;EACd;CACF;AAID,MAAM,oBAAoB,GAAGA,cAAAA,CAAAA,SAAAA,CAAK,CAAC,aAAa,CAE9C,SAAS,CAAC;AAEZ,SAAS,gBAAgB,CAAA,IAAA,EAAsC;EAAA,IAArC;IAAE,QAAQ;IAAE;EAAQ,CAAiB,GAAA,IAAA;EAC7D,MAAM,MAAM,GAA8C;IACxD,WAAW,EAAE,CAAA,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,WAAW,KAAI,YAAY,CAAC,WAAW;IAC9D,WAAW,EAAE,CAAA,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,WAAW,KAAI,YAAY,CAAC,WAAW;IAC9D,WAAW,EAAE,CAAA,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,WAAW,KAAI,YAAY,CAAC,WAAW;IAC9D,KAAK,EAAE,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAR,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAE;GAClB;EAED;;AAEG;EACH,cAAA,CAAA,SAAA,CAAK,CAAC,SAAS,CAAC,MAAK;IACnB,aAAA,CAAA,SAAA,CAAa,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC;EACjC,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;;;EAIlB,MAAM,KAAK,GAAG,MAAM;EAEpB,OACEC,UAAAA,CAAAA,GAAAA,CAAC,oBAAoB,CAAC,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA;IAAC,KAAK,EAAE;EAAK,CAAA,EAAA;IAAA,QAAA,EACxC;EAAQ,CAAA,CAAA,CACqB;AAEpC;AAEA,SAAS,WAAW,CAAA,EAAA;EAClB,MAAM,OAAO,GAAGD,cAAAA,CAAAA,SAAAA,CAAK,CAAC,UAAU,CAAC,oBAAoB,CAAC;EAEtD,IAAI,OAAO,KAAK,SAAS,EAAE;IACzB,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC;EACtE;EAED,OAAO,OAAO;AAChB","sourcesContent":["import type CSS from 'csstype';\nimport React from 'react';\n\nimport { PartiallyRequired } from '../utils/PartiallyRequired';\nimport ConsoleLogger, { LoggerLevels } from './ConsoleLogger';\n\nexport interface SettingsProps {\n  /**\n   * Sets up the `--slider-color` CSS variable.\n   * @default 'inherit'\n   */\n  sliderColor?: CSS.Properties['color'];\n  /**\n   * Inline CSS styling for the wrapper div element of the component.\n   * @default {}\n   */\n  sliderStyle?: Omit<CSS.Properties, 'width' | 'height'>;\n  /**\n   * Aesthetics settings. You can configure the base color and the active color of all nav components within the `HeroSlider`. They can be set individually as well.\n   * @default\n   * {\n   *    color: undefined,\n   *    activeColor: undefined\n   * }\n   */\n  navbarStyle?: {\n    color?: CSS.Properties['color'];\n    activeColor?: CSS.Properties['color'];\n  };\n  /**\n   * Debugger logs level. Only useful if you need insights.\n   * @default\n   * {\n   *    verbose: false,\n   *    info: false,\n   *    debug: false,\n   *    warnings: true,\n   *    errors: true\n   * }\n   */\n  debug?: LoggerLevels | undefined;\n}\n\nconst defaultProps: PartiallyRequired<SettingsProps, 'debug'> = {\n  sliderColor: 'inherit',\n  sliderStyle: {},\n  navbarStyle: {\n    color: undefined,\n    activeColor: undefined\n  }\n};\n\ntype ProviderProps = React.PropsWithChildren<{ settings?: SettingsProps }>;\n\nconst SettingsStateContext = React.createContext<\n  PartiallyRequired<SettingsProps, 'debug'> | undefined\n>(undefined);\n\nfunction SettingsProvider({ children, settings }: ProviderProps) {\n  const params: PartiallyRequired<SettingsProps, 'debug'> = {\n    sliderColor: settings?.sliderColor || defaultProps.sliderColor,\n    sliderStyle: settings?.sliderStyle || defaultProps.sliderStyle,\n    navbarStyle: settings?.navbarStyle || defaultProps.navbarStyle,\n    debug: settings?.debug\n  };\n\n  /**\n   * Set up ConsoleLogger whenever the `params.debug` change.\n   */\n  React.useEffect(() => {\n    ConsoleLogger.new(params.debug);\n  }, [params.debug]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = params;\n\n  return (\n    <SettingsStateContext.Provider value={value}>\n      {children}\n    </SettingsStateContext.Provider>\n  );\n}\n\nfunction useSettings() {\n  const context = React.useContext(SettingsStateContext);\n\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n\n  return context;\n}\n\nexport { SettingsProvider, useSettings };\n"]},"metadata":{},"sourceType":"script"}