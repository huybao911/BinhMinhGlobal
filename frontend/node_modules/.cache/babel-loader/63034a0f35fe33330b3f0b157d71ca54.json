{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar React = require('react');\nvar Animations = require('../../modules/Animations.js');\nvar ConsoleLogger = require('../../modules/ConsoleLogger.js');\nvar Controller = require('../../modules/Controller.js');\nvar Manager = require('../../modules/Manager.js');\nvar composeCssClasses = require('../../utils/composeCssClasses.js');\nvar index = require('./Background/index.js');\nvar index_module = require('./index.module.css.js');\nvar index$1 = require('./Mask/index.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nconst logger = ConsoleLogger[\"default\"].new();\nfunction Slide(props) {\n  const {\n    className,\n    shouldRenderMask = false,\n    style,\n    background,\n    onBackgroundLoad,\n    children,\n    label\n  } = props;\n  const {\n    getSlide,\n    registerSlide,\n    removeSlide\n  } = Manager.useManager();\n  const {\n    state: {\n      activeSlide,\n      isSliding,\n      prevActiveSlide,\n      slidingDirection\n    }\n  } = Controller.useController();\n  const {\n    getSlidingAnimationCssClass\n  } = Animations.useAnimations();\n  const slideRef = React__default[\"default\"].useRef(null);\n  const slide = getSlide(slideRef);\n  logger.info('[Slide] rerender', 'slide.number: ', slide === null || slide === void 0 ? void 0 : slide.number);\n  const [classNames, setClassNames] = React__default[\"default\"].useState(composeCssClasses.composeCssClasses('hero-slider-slide', index_module[\"default\"].Slide, className));\n  const isActive = activeSlide === (slide === null || slide === void 0 ? void 0 : slide.number);\n  React__default[\"default\"].useEffect(() => {\n    if (slide) {\n      setClassNames(composeCssClasses.composeCssClasses('hero-slider-slide', index_module[\"default\"].Slide, {\n        className: index_module[\"default\"].Active,\n        useIf: isActive\n      }, {\n        className: index_module[\"default\"].Sliding,\n        useIf: isActive && !isSliding\n      }, {\n        className: getSlidingAnimationCssClass(slide.number, prevActiveSlide, slidingDirection),\n        useIf: isActive && isSliding\n      }));\n    }\n  }, [isActive, isSliding]);\n  React__default[\"default\"].useEffect(() => {\n    if (slideRef) registerSlide(slideRef, label);\n    return () => {\n      if (slideRef) removeSlide(slideRef);\n    };\n  }, []);\n  if (!slide) return null;\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--background-animation-duration': (background === null || background === void 0 ? void 0 : background.backgroundAnimationDuration) ? `${background.backgroundAnimationDuration}ms` : null,\n    '--background-animation-delay': (background === null || background === void 0 ? void 0 : background.backgroundAnimationDelay) ? `${background.backgroundAnimationDelay}ms` : null\n  };\n  const isHidden = isSliding ? slide.number !== activeSlide && slide.number !== prevActiveSlide : slide.number !== activeSlide;\n  return jsxRuntime.jsxs(\"div\", Object.assign({\n    \"data-testid\": `hero-slider-slide-${slide.number}`,\n    ref: slideRef,\n    hidden: isHidden,\n    className: classNames,\n    style: Object.assign(Object.assign({}, style), CSSVariables)\n  }, {\n    children: [jsxRuntime.jsx(index[\"default\"], Object.assign({}, background, {\n      onLoad: onBackgroundLoad\n    })), jsxRuntime.jsxs(\"div\", Object.assign({\n      className: composeCssClasses.composeCssClasses('hero-slider-slide-wrapper', index_module[\"default\"].Wrapper)\n    }, {\n      children: [shouldRenderMask ? jsxRuntime.jsx(index$1[\"default\"], {\n        background: background,\n        isActive: isActive\n      }) : null, jsxRuntime.jsx(\"div\", Object.assign({\n        className: composeCssClasses.composeCssClasses('hero-slider-slide-container', index_module[\"default\"].Container, {\n          className: index_module[\"default\"].Active,\n          useIf: isActive && !isSliding\n        })\n      }, {\n        children: children\n      }))]\n    }))]\n  }));\n}\nSlide.displayName = 'hero-slider/slide';\nexports.Slide = Slide;","map":{"version":3,"sources":["../../../src/components/Slide/index.tsx"],"names":["ConsoleLogger","useManager","useController","useAnimations","React","composeCssClasses","SlideModuleCss","_jsxs","_jsx","Background"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { useAnimations } from '../../modules/Animations';\nimport ConsoleLogger from '../../modules/ConsoleLogger';\nimport { useController } from '../../modules/Controller';\nimport { useManager } from '../../modules/Manager';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\nimport Background, { BackgroundProps } from './Background';\nimport SlideModuleCss from './index.module.css';\nimport Mask from './Mask';\n\nconst logger = ConsoleLogger.new();\n\n/**\n * `Slide` component props.\n */\nexport interface SlideProps {\n  /**\n   * Slider className.\n   */\n  className?: React.HTMLProps<HTMLDivElement>['className'];\n  /**\n   * Each slide has a \"Mask\" that serves as an adornment.\n   * They mimic the background, then offsets it a bit. It has an animation during slide transitions.\n   * @default false\n   */\n  shouldRenderMask?: boolean;\n  /**\n   * Defines the background of the `Slide`.\n   * You may pass CSS properties just like you would style the background of a regular HTML element.\n   * The main difference is that the `backgroundImage` property will work just like an image `src` property instead of the typical background image URL.\n   */\n  background?: Partial<BackgroundProps>;\n  /**\n   * If the developer is using a `MenuNav` or `ButtonsNav` component, a label for each slide may be passed.\n   * These labels will be shown in the nav components.\n   */\n  label?: string;\n  /**\n   * Inline CSS styling.\n   */\n  style?: React.CSSProperties;\n  /**\n   * Callback that executes when the background image loads.\n   */\n  onBackgroundLoad?: BackgroundProps['onLoad'];\n}\n\nexport function Slide(props: React.PropsWithChildren<SlideProps>) {\n  const {\n    className,\n    shouldRenderMask = false,\n    style,\n    background,\n    onBackgroundLoad,\n    children,\n    label\n  } = props;\n\n  const { getSlide, registerSlide, removeSlide } = useManager();\n\n  const {\n    state: { activeSlide, isSliding, prevActiveSlide, slidingDirection }\n  } = useController();\n\n  const { getSlidingAnimationCssClass } = useAnimations();\n\n  const slideRef = React.useRef<HTMLDivElement>(null);\n\n  const slide = getSlide(slideRef);\n\n  logger.info('[Slide] rerender', 'slide.number: ', slide?.number);\n\n  const [classNames, setClassNames] = React.useState(\n    composeCssClasses('hero-slider-slide', SlideModuleCss.Slide, className)\n  );\n\n  const isActive = activeSlide === slide?.number;\n\n  React.useEffect(() => {\n    if (slide) {\n      setClassNames(\n        composeCssClasses(\n          'hero-slider-slide',\n          SlideModuleCss.Slide,\n          { className: SlideModuleCss.Active, useIf: isActive },\n          { className: SlideModuleCss.Sliding, useIf: isActive && !isSliding },\n          {\n            className: getSlidingAnimationCssClass(\n              slide.number,\n              prevActiveSlide,\n              slidingDirection\n            ),\n            useIf: isActive && isSliding\n          }\n        )\n      );\n    }\n  }, [isActive, isSliding]);\n\n  React.useEffect(() => {\n    if (slideRef) registerSlide(slideRef, label);\n    return () => {\n      if (slideRef) removeSlide(slideRef);\n    };\n  }, []);\n\n  if (!slide) return null;\n\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--background-animation-duration': background?.backgroundAnimationDuration\n      ? `${background.backgroundAnimationDuration}ms`\n      : null,\n    '--background-animation-delay': background?.backgroundAnimationDelay\n      ? `${background.backgroundAnimationDelay}ms`\n      : null\n  };\n\n  const isHidden = isSliding\n    ? slide.number !== activeSlide && slide.number !== prevActiveSlide\n    : slide.number !== activeSlide;\n\n  return (\n    <div\n      data-testid={`hero-slider-slide-${slide.number}`}\n      ref={slideRef}\n      hidden={isHidden}\n      className={classNames}\n      style={{\n        ...style,\n        ...CSSVariables\n      }}\n    >\n      <Background {...background} onLoad={onBackgroundLoad} />\n\n      <div\n        className={composeCssClasses(\n          'hero-slider-slide-wrapper',\n          SlideModuleCss.Wrapper\n        )}\n      >\n        {/* Mask */}\n        {shouldRenderMask ? (\n          <Mask background={background} isActive={isActive} />\n        ) : null}\n\n        {/* Container */}\n        <div\n          className={composeCssClasses(\n            'hero-slider-slide-container',\n            SlideModuleCss.Container,\n            {\n              className: SlideModuleCss.Active,\n              useIf: isActive && !isSliding\n            }\n          )}\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n(Slide as React.FunctionComponent).displayName = 'hero-slider/slide';\n"]},"metadata":{},"sourceType":"script"}