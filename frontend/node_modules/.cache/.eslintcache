[{"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\index.tsx":"1","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\store.ts":"2","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\App.tsx":"3","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\AppLoader.tsx":"4","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\index.ts":"5","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\sManager.ts":"6","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\admin.ts":"7","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\Manager.ts":"8","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\user.ts":"9","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\alert.ts":"10","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\utils\\headers.ts":"11","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\user.ts":"12","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\sManager.ts":"13","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\Manager.ts":"14","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\admin.ts":"15","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\navigation\\sidebar.tsx":"16","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\alert\\Alert.tsx":"17","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\Routes.tsx":"18","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\homepage\\HeaderHome.tsx":"19","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\alert.ts":"20","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\types.ts":"21","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\alert\\AlertItem.tsx":"22","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\navigation\\navSelection.tsx":"23","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\SManagerRoute.tsx":"24","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\ManagerRoute.tsx":"25","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\AdminRoute.tsx":"26","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\PrivateRoute.tsx":"27","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\GuestRoute.tsx":"28","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\navigation\\style.tsx":"29","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\constant\\routesProps.ts":"30","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\navigation\\dataConfig.tsx":"31","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\not-found\\NotFound.tsx":"32","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\Profile.tsx":"33","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\StorageEvent.tsx":"34","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\contents\\DetailContent2.tsx":"35","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\ApplyJob.tsx":"36","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\FeedDetailStorage.tsx":"37","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\ManageJob.tsx":"38","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\contents\\DetailContent1.tsx":"39","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\NewJobEvent.tsx":"40","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\ListCTVCalendar.tsx":"41","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\ListCTVEvent.tsx":"42","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\ListCTVExcel.tsx":"43","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\ListUserApplyEvent.tsx":"44","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\SManager\\NewComment.tsx":"45","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\Events.tsx":"46","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\SManager\\ApproveEvents.tsx":"47","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\SManager\\SManager.tsx":"48","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\JobEvents.tsx":"49","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\AddDepartment.tsx":"50","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\Events.tsx":"51","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\Users.tsx":"52","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\NewEvent.tsx":"53","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\Department.tsx":"54","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\JobFromEvent.tsx":"55","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\Login.tsx":"56","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\LoginUser.tsx":"57","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\Register.tsx":"58","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\RegisterUser.tsx":"59","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\guest\\DetailGuest1.tsx":"60","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\guest\\DetailGuest2.tsx":"61","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\guest\\Guest.tsx":"62","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\CreateEvent.tsx":"63","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\UserForm.tsx":"64","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\SManager\\UpdateComment.tsx":"65","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\contents\\FeedContent.tsx":"66","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\contents\\FeedDetailContent.tsx":"67","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\FeedManageJob.tsx":"68","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\UpdateJobEvent.tsx":"69","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\UpdateDepartment.tsx":"70","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\guest\\FeedGuest.tsx":"71","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\guest\\FeedDetailGuest.tsx":"72","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\FormDepartment_Admin.tsx":"73","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\UpdateEvent.tsx":"74","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\UpdateCoefficient.tsx":"75","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\FormFieldRole.tsx":"76","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\FormField.tsx":"77","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\FormEvent-Manager.tsx":"78","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\FormFieldDepartment.tsx":"79","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\CreateJobEvent.tsx":"80","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\FeedApplyJob.tsx":"81","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\FeedStorageEvent.tsx":"82","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\UpdateProfile.tsx":"83","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\contents\\Content.tsx":"84","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\SManager\\EventAccept.tsx":"85","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\FormDepartment_User.tsx":"86","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\index.tsx":"87","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\store.ts":"88","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\App.tsx":"89","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\layouts\\AppLoader.tsx":"90","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\actions\\admin.ts":"91","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\utils\\headers.ts":"92","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\layouts\\navigation\\sidebar.tsx":"93","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\components\\routing\\Routes.tsx":"94","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\reducers\\index.ts":"95","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\actions\\types.ts":"96","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\layouts\\navigation\\navSelection.tsx":"97","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\constant\\routesProps.ts":"98","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\components\\routing\\GuestRoute.tsx":"99","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\components\\routing\\AdminRoute.tsx":"100","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\reducers\\admin.ts":"101","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\layouts\\navigation\\dataConfig.tsx":"102","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\layouts\\navigation\\style.tsx":"103","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\auth\\Login.tsx":"104","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\Product.tsx":"105","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\Guest.tsx":"106","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\TypeProduct.tsx":"107","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\NewProduct.tsx":"108","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\User.tsx":"109","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\NewTypeProduct.tsx":"110","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\UserForm.tsx":"111","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\CreateTypeProduct.tsx":"112","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\CreateProduct.tsx":"113","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\UpdateTypeProduct.tsx":"114","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\auth\\FormFieldRole.tsx":"115","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\auth\\FormTypeProduct.tsx":"116","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\auth\\FormField.tsx":"117","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\UpdateProduct.tsx":"118","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\data.tsx":"119","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\LoaiSanPham1.tsx":"120","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\LoaiSanPham2.tsx":"121","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\ImageData.tsx":"122","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\ImageSlider.tsx":"123","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\DetailSanPham.tsx":"124","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\City.tsx":"125","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\AddCity.tsx":"126","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\UpdateCity.tsx":"127","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\Order.tsx":"128","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\Cart.tsx":"129","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\auth\\FormCity.tsx":"130","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\reducers\\user.ts":"131","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\components\\routing\\PrivateRoute.tsx":"132","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\actions\\user.ts":"133","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\OrderCart.tsx":"134","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\LoaiSanPham.tsx":"135"},{"size":455,"mtime":1684431098000,"results":"136","hashOfConfig":"137"},{"size":420,"mtime":1684431098000,"results":"138","hashOfConfig":"137"},{"size":2169,"mtime":1684431098000,"results":"139","hashOfConfig":"137"},{"size":618,"mtime":1684431098000,"results":"140","hashOfConfig":"137"},{"size":373,"mtime":1684431098000,"results":"141","hashOfConfig":"137"},{"size":3147,"mtime":1684598928846,"results":"142","hashOfConfig":"137"},{"size":3362,"mtime":1684431098000,"results":"143","hashOfConfig":"137"},{"size":4616,"mtime":1684431098000,"results":"144","hashOfConfig":"137"},{"size":3316,"mtime":1684431098000,"results":"145","hashOfConfig":"137"},{"size":511,"mtime":1684431098000,"results":"146","hashOfConfig":"137"},{"size":971,"mtime":1684431098000,"results":"147","hashOfConfig":"137"},{"size":10750,"mtime":1685634392295,"results":"148","hashOfConfig":"137"},{"size":9773,"mtime":1685634388819,"results":"149","hashOfConfig":"137"},{"size":18628,"mtime":1685634381712,"results":"150","hashOfConfig":"137"},{"size":11261,"mtime":1685634374760,"results":"151","hashOfConfig":"137"},{"size":7450,"mtime":1684431098000,"results":"152","hashOfConfig":"137"},{"size":880,"mtime":1684431098000,"results":"153","hashOfConfig":"137"},{"size":1359,"mtime":1684431098000,"results":"154","hashOfConfig":"137"},{"size":5579,"mtime":1684431098000,"results":"155","hashOfConfig":"137"},{"size":772,"mtime":1684431098000,"results":"156","hashOfConfig":"137"},{"size":2892,"mtime":1684431098000,"results":"157","hashOfConfig":"137"},{"size":571,"mtime":1684431098000,"results":"158","hashOfConfig":"137"},{"size":4826,"mtime":1684431098000,"results":"159","hashOfConfig":"137"},{"size":1457,"mtime":1684431098000,"results":"160","hashOfConfig":"137"},{"size":1455,"mtime":1684431098000,"results":"161","hashOfConfig":"137"},{"size":1276,"mtime":1684431098000,"results":"162","hashOfConfig":"137"},{"size":1445,"mtime":1684431098000,"results":"163","hashOfConfig":"137"},{"size":1623,"mtime":1684431098000,"results":"164","hashOfConfig":"137"},{"size":1904,"mtime":1684431098000,"results":"165","hashOfConfig":"137"},{"size":6643,"mtime":1684599966847,"results":"166","hashOfConfig":"137"},{"size":2003,"mtime":1684756812877,"results":"167","hashOfConfig":"137"},{"size":188,"mtime":1684431098000,"results":"168","hashOfConfig":"137"},{"size":1041,"mtime":1684431098000,"results":"169","hashOfConfig":"137"},{"size":3350,"mtime":1684431098000,"results":"170","hashOfConfig":"137"},{"size":16010,"mtime":1684431098000,"results":"171","hashOfConfig":"137"},{"size":1313,"mtime":1684431098000,"results":"172","hashOfConfig":"137"},{"size":15261,"mtime":1684431098000,"results":"173","hashOfConfig":"137"},{"size":1301,"mtime":1684431098000,"results":"174","hashOfConfig":"137"},{"size":15970,"mtime":1684431098000,"results":"175","hashOfConfig":"137"},{"size":1161,"mtime":1684431098000,"results":"176","hashOfConfig":"137"},{"size":11547,"mtime":1684431098000,"results":"177","hashOfConfig":"137"},{"size":18115,"mtime":1684431098000,"results":"178","hashOfConfig":"137"},{"size":19565,"mtime":1684431098000,"results":"179","hashOfConfig":"137"},{"size":20409,"mtime":1684556252472,"results":"180","hashOfConfig":"137"},{"size":1100,"mtime":1684431098000,"results":"181","hashOfConfig":"137"},{"size":22408,"mtime":1684599321187,"results":"182","hashOfConfig":"137"},{"size":15290,"mtime":1684505236649,"results":"183","hashOfConfig":"137"},{"size":10805,"mtime":1684431098000,"results":"184","hashOfConfig":"137"},{"size":11119,"mtime":1684431098000,"results":"185","hashOfConfig":"137"},{"size":6220,"mtime":1684431098000,"results":"186","hashOfConfig":"137"},{"size":12059,"mtime":1684431098000,"results":"187","hashOfConfig":"137"},{"size":14208,"mtime":1684757305431,"results":"188","hashOfConfig":"137"},{"size":1102,"mtime":1684431098000,"results":"189","hashOfConfig":"137"},{"size":13747,"mtime":1684431098000,"results":"190","hashOfConfig":"137"},{"size":19067,"mtime":1684504509248,"results":"191","hashOfConfig":"137"},{"size":8540,"mtime":1684431098000,"results":"192","hashOfConfig":"137"},{"size":15969,"mtime":1685198510466,"results":"193","hashOfConfig":"137"},{"size":11653,"mtime":1684431098000,"results":"194","hashOfConfig":"137"},{"size":12865,"mtime":1685635695980,"results":"195","hashOfConfig":"137"},{"size":14450,"mtime":1684431098000,"results":"196","hashOfConfig":"137"},{"size":14459,"mtime":1684431098000,"results":"197","hashOfConfig":"137"},{"size":11065,"mtime":1684431098000,"results":"198","hashOfConfig":"137"},{"size":12032,"mtime":1684431098000,"results":"199","hashOfConfig":"137"},{"size":3106,"mtime":1684431098000,"results":"200","hashOfConfig":"137"},{"size":3239,"mtime":1684431098000,"results":"201","hashOfConfig":"137"},{"size":8412,"mtime":1684431098000,"results":"202","hashOfConfig":"137"},{"size":16041,"mtime":1684505573677,"results":"203","hashOfConfig":"137"},{"size":7257,"mtime":1684656830845,"results":"204","hashOfConfig":"137"},{"size":11579,"mtime":1684503609413,"results":"205","hashOfConfig":"137"},{"size":2441,"mtime":1684431098000,"results":"206","hashOfConfig":"137"},{"size":7403,"mtime":1684431098000,"results":"207","hashOfConfig":"137"},{"size":8344,"mtime":1684505364128,"results":"208","hashOfConfig":"137"},{"size":3229,"mtime":1685635738895,"results":"209","hashOfConfig":"137"},{"size":11611,"mtime":1684431098000,"results":"210","hashOfConfig":"137"},{"size":3847,"mtime":1684431098000,"results":"211","hashOfConfig":"137"},{"size":2578,"mtime":1684431098000,"results":"212","hashOfConfig":"137"},{"size":2693,"mtime":1684431098000,"results":"213","hashOfConfig":"137"},{"size":3136,"mtime":1684431098000,"results":"214","hashOfConfig":"137"},{"size":1886,"mtime":1684431098000,"results":"215","hashOfConfig":"137"},{"size":13084,"mtime":1684503584173,"results":"216","hashOfConfig":"137"},{"size":9549,"mtime":1684512137476,"results":"217","hashOfConfig":"137"},{"size":10370,"mtime":1684431098000,"results":"218","hashOfConfig":"137"},{"size":23618,"mtime":1684431098000,"results":"219","hashOfConfig":"137"},{"size":15901,"mtime":1684431744153,"results":"220","hashOfConfig":"137"},{"size":10828,"mtime":1684600256968,"results":"221","hashOfConfig":"137"},{"size":3302,"mtime":1685638440233,"results":"222","hashOfConfig":"137"},{"size":479,"mtime":1687693771020,"results":"223","hashOfConfig":"224"},{"size":437,"mtime":1687354218424,"results":"225","hashOfConfig":"224"},{"size":1673,"mtime":1688746189033,"results":"226","hashOfConfig":"224"},{"size":647,"mtime":1687353240655,"results":"227","hashOfConfig":"224"},{"size":13311,"mtime":1688743596017,"results":"228","hashOfConfig":"224"},{"size":538,"mtime":1687691167157,"results":"229","hashOfConfig":"224"},{"size":4907,"mtime":1688654223794,"results":"230","hashOfConfig":"224"},{"size":1002,"mtime":1688648492118,"results":"231","hashOfConfig":"224"},{"size":255,"mtime":1688648107849,"results":"232","hashOfConfig":"224"},{"size":1356,"mtime":1688653364891,"results":"233","hashOfConfig":"224"},{"size":3030,"mtime":1688654173158,"results":"234","hashOfConfig":"224"},{"size":3234,"mtime":1688744507885,"results":"235","hashOfConfig":"224"},{"size":1078,"mtime":1688648539791,"results":"236","hashOfConfig":"224"},{"size":906,"mtime":1688649819781,"results":"237","hashOfConfig":"224"},{"size":5999,"mtime":1688653498845,"results":"238","hashOfConfig":"224"},{"size":985,"mtime":1688651168020,"results":"239","hashOfConfig":"224"},{"size":2012,"mtime":1687351940053,"results":"240","hashOfConfig":"224"},{"size":6469,"mtime":1688746110623,"results":"241","hashOfConfig":"224"},{"size":19018,"mtime":1687792630213,"results":"242","hashOfConfig":"224"},{"size":41892,"mtime":1688746627314,"results":"243","hashOfConfig":"224"},{"size":17706,"mtime":1687284110787,"results":"244","hashOfConfig":"224"},{"size":1174,"mtime":1687283638754,"results":"245","hashOfConfig":"224"},{"size":13106,"mtime":1688746150977,"results":"246","hashOfConfig":"224"},{"size":1217,"mtime":1687284473562,"results":"247","hashOfConfig":"224"},{"size":2902,"mtime":1687357822391,"results":"248","hashOfConfig":"224"},{"size":5112,"mtime":1687284419694,"results":"249","hashOfConfig":"224"},{"size":9940,"mtime":1687792225126,"results":"250","hashOfConfig":"224"},{"size":3449,"mtime":1687284232888,"results":"251","hashOfConfig":"224"},{"size":2685,"mtime":1687280740106,"results":"252","hashOfConfig":"224"},{"size":3303,"mtime":1687282267905,"results":"253","hashOfConfig":"224"},{"size":2121,"mtime":1687282234670,"results":"254","hashOfConfig":"224"},{"size":7993,"mtime":1687792554019,"results":"255","hashOfConfig":"224"},{"size":223,"mtime":1687434259338,"results":"256","hashOfConfig":"224"},{"size":20691,"mtime":1688746688446,"results":"257","hashOfConfig":"224"},{"size":20460,"mtime":1688746694492,"results":"258","hashOfConfig":"224"},{"size":172,"mtime":1687709515083,"results":"259","hashOfConfig":"224"},{"size":2045,"mtime":1687709502337,"results":"260","hashOfConfig":"224"},{"size":21403,"mtime":1688746666080,"results":"261","hashOfConfig":"224"},{"size":17357,"mtime":1688117152792,"results":"262","hashOfConfig":"224"},{"size":6464,"mtime":1688117153962,"results":"263","hashOfConfig":"224"},{"size":3302,"mtime":1688117155263,"results":"264","hashOfConfig":"224"},{"size":21749,"mtime":1688746704542,"results":"265","hashOfConfig":"224"},{"size":33637,"mtime":1688746657771,"results":"266","hashOfConfig":"224"},{"size":3229,"mtime":1688649243804,"results":"267","hashOfConfig":"224"},{"size":2303,"mtime":1688648071456,"results":"268","hashOfConfig":"224"},{"size":1086,"mtime":1688648494117,"results":"269","hashOfConfig":"224"},{"size":3352,"mtime":1688743599884,"results":"270","hashOfConfig":"224"},{"size":18921,"mtime":1688656658066,"results":"271","hashOfConfig":"224"},{"size":18539,"mtime":1688746679549,"results":"272","hashOfConfig":"224"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},"5d0xln",{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"275"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"275"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"275"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"275"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"275"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"275"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"275"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"275"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"275"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"275"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"275"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"275"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"275"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"275"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"275"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"275"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"275"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"275"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"275"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"275"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"275"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"275"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"275"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"275"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"275"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"275"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"275"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"275"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"275"},{"filePath":"451","messages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"453","messages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"275"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"275"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"275"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"275"},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"275"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},"3m3tfs",{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"481"},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"481"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"481"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"481"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"481"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"481"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"552"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"481"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568","usedDeprecatedRules":"481"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"577","usedDeprecatedRules":"481"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"481"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"481"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\index.tsx",[],["589","590"],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\store.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\App.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\AppLoader.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\index.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\sManager.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\admin.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\Manager.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\user.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\reducers\\alert.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\utils\\headers.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\user.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\sManager.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\Manager.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\admin.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\navigation\\sidebar.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\alert\\Alert.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\Routes.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\homepage\\HeaderHome.tsx",["591","592","593","594","595","596","597","598","599"],"import React from \"react\";\nimport { styled } from \"@material-ui/core/styles\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"redux/reducers\";\nimport { logOutUser } from \"redux/actions/user\";\nimport { StyledMenuItem } from '../../layouts/navigation/style'\nimport { BoxSpan } from '../../layouts/navigation/style'\nimport { Person, Notifications } from '@mui/icons-material';\n\nimport { AppBar, Box, Toolbar, Typography, Stack, Popover, MenuItem, Avatar, IconButton, Divider } from \"@mui/material\"\nimport { NavLink } from \"react-router-dom\";\nconst StyledRoot = styled(AppBar)(() => ({\n  boxShadow: 'none',\n  width: '100%',\n  backgroundColor: 'white',\n  fontWeight: 'bold',\n}));\n\nconst Homepage: React.FC = (): JSX.Element => {\n\n  const dispatch = useDispatch();\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n  const openUser = Boolean(anchorElUser);\n  const handleClickUser = (event: any) => {\n    setAnchorElUser(event.currentTarget);\n  };\n  const handleCloseUser = () => {\n    setAnchorElUser(null);\n  };\n\n  const user = useSelector((state: RootState) => state.user);\n\n  const userHeader = user.isAuthenticated && window.location.pathname.includes('/storageEvent') || user.isAuthenticated && window.location.pathname.includes('/applyJob') || user.isAuthenticated && window.location.pathname.includes('/profile') || user.isAuthenticated && window.location.pathname.includes('/manageJob') ? (\n    <StyledRoot style={{ boxShadow: \"none\", overflowX: \"hidden\" }}>\n      <Toolbar>\n        <NavLink style={{ textDecoration: 'none' }} to={'/user'}>\n          <img src=\"/hutech-logo.ico\" style={{ height: \"56px\", width: \"50px\" }}></img>\n        </NavLink>\n        <Typography align='left' style={{ flexGrow: 1 }}></Typography>\n        <div className=\"verticalLine\">\n        </div>\n        <Box>\n          <IconButton href='' style={{ color: \"white\" }}>\n            <Notifications />\n          </IconButton>\n        </Box>\n        <Stack\n          direction=\"row\"\n          alignItems=\"center\"\n          spacing={{\n            xs: 0.5,\n            sm: 1,\n          }}\n          sx={{ margin: 3, color: 'black' }}\n        >\n          <Box style={{\n            display: 'flex', alignItems: 'center', textAlign: 'center'\n          }}>\n            <IconButton onClick={(event) => handleClickUser(event)}\n              sx={{\n                p: 0,\n\n              }}>\n              <Person style={{ color: \"black\" }} />\n            </IconButton>\n\n            <Popover\n              open={openUser}\n              anchorEl={anchorElUser}\n              onClose={handleCloseUser}\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n              sx={{ marginLeft: 1 }}\n              PaperProps={{\n                style: {\n                  borderRadius: 20,\n                  boxShadow: 'rgba(145, 158, 171, 0.24) 0px 0px 2px 0px, rgba(145, 158, 171, 0.24) -20px 20px 40px -4px',\n                },\n                sx: {\n                  p: 1,\n                  width: 220,\n                  overflowX: 'unset',\n                  overflowY: 'unset',\n                  '& .MuiMenuItem-root': {\n                    px: 1,\n                    py: 1,\n                    typography: 'body2',\n                    borderRadius: 1,\n                    justifyContent: 'left'\n                  },\n                  '& .MuiAvatar-root': {\n                    width: 32,\n                    height: 32,\n                    ml: -0.5,\n                    mt: 1,\n                    mr: 1,\n                  },\n                },\n              }}\n            >\n\n              <BoxSpan />\n              <Stack sx={{ p: 0.5 }} >\n                <StyledMenuItem component={NavLink} to={'/profile'} >\n                  <Box display={\"flex\"}>\n                    <Box>\n                      <Avatar src={user.user.avatar}/>\n                    </Box>\n                    <Box flexDirection={'column'}>\n                      <Typography style={{ fontWeight: 500, fontSize: '14px' }}>{user.user.username}</Typography>\n                      <Typography style={{ color: \"#637381\", fontSize: '13.5px' }} >{user.user.email}</Typography>\n                    </Box>\n                  </Box>\n                </StyledMenuItem>\n\n                <Divider sx={{ borderStyle: 'dashed' }} />\n\n                <StyledMenuItem component={NavLink} to={'/storageEvent'}>\n                  <Typography style={{ fontSize: '14px' }}>Sự Kiện Đã Lưu</Typography>\n                </StyledMenuItem>\n\n                <StyledMenuItem component={NavLink} to={'/applyJob'}>\n                  <Typography style={{ fontSize: '14px', float: 'left' }}>Công việc Đã Ứng Tuyển</Typography>\n                </StyledMenuItem>\n\n                <StyledMenuItem component={NavLink} to={'/manageJob'}>\n                  <Typography style={{ fontSize: '14px', float: 'left' }}>Quản Lý Công việc</Typography>\n                </StyledMenuItem>\n\n                <Divider sx={{ borderStyle: 'dashed' }} />\n\n                <MenuItem className=\"navbar-logout\" onClick={(e) => dispatch(logOutUser())}>\n                  <Typography style={{ fontSize: '14px' }}> Đăng Xuất</Typography>\n                </MenuItem>\n              </Stack>\n\n            </Popover>\n          </Box>\n        </Stack>\n      </Toolbar>\n    </StyledRoot>\n  ) : null\n\n  React.useEffect(() => {\n    document.title = \"TRANG CHỦ \";\n  }, []);\n  return (\n    <>\n      {userHeader}\n    </>\n  );\n};\n\nexport default Homepage;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\alert.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\redux\\actions\\types.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\alert\\AlertItem.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\navigation\\navSelection.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\SManagerRoute.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\ManagerRoute.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\AdminRoute.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\PrivateRoute.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\components\\routing\\GuestRoute.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\navigation\\style.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\constant\\routesProps.ts",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\layouts\\navigation\\dataConfig.tsx",["600","601"],"import AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport LeaderboardIcon from '@mui/icons-material/Leaderboard'\nimport EventIcon from '@mui/icons-material/Event';\nimport SchoolIcon from '@mui/icons-material/School';\nimport WorkOutlineIcon from '@mui/icons-material/WorkOutline';\nimport EventAvailableIcon from '@mui/icons-material/EventAvailable';\nimport ListAltIcon from '@mui/icons-material/ListAlt';\nimport RecentActorsIcon from '@mui/icons-material/RecentActors';\n\nexport const dataAdmin = [\n    {\n        icon: <LeaderboardIcon style={{width: '18px'}} />,\n        name: 'Bảng Điều Khiển',\n        path: '/*'\n    },\n\n    {\n        icon: <AccountCircleIcon style={{width: '18px'}} />,\n        name: 'Người Dùng',\n        path: '/users'\n    },\n    {\n        icon: <EventIcon style={{width: '18px'}} />,\n        name: 'Sự Kiện',\n        path: '/eventAdmin'\n    },\n    {\n        icon: <WorkOutlineIcon style={{width: '18px'}}/>,\n        name: 'Công Việc Sự Kiện',\n        path: '/jobEventAdmin'\n    },\n    {\n        icon: <SchoolIcon style={{width: '18px'}}/>,\n        name: 'Khoa',\n        path: '/department'\n    },\n];\n\nexport const dataSManager = [\n    {\n        icon: <LeaderboardIcon style={{width: '18px'}} />,\n        name: 'Bảng Điều Khiển',\n        path: '/*'\n    },\n\n    {\n        icon: <AccountCircleIcon style={{width: '18px'}}/>,\n        name: 'User',\n        path: '/smanager'\n    },\n    {\n        icon: <EventAvailableIcon style={{width: '18px'}}/>,\n        name: 'Duyệt Sự Kiện',\n        path: '/approveEvent'\n    },\n    {\n        icon: <EventIcon style={{width: '18px'}}/>,\n        name: 'Sự Kiện Đã Duyệt',\n        path: '/eventAccept'\n    },\n];\n\nexport const dataManager = [\n    {\n        icon: <LeaderboardIcon style={{width: '18px'}}/>,\n        name: 'Bảng Điều Khiển',\n        path: '/*'\n    },\n    {\n        icon: <EventIcon style={{width: '18px'}}/>,\n        name: 'Sự Kiện',\n        path: '/event'\n    },\n];","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\not-found\\NotFound.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\Profile.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\StorageEvent.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\contents\\DetailContent2.tsx",["602","603","604","605","606","607","608","609","610","611"],"import * as React from \"react\";\nimport { styled, alpha, makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEvents, getDepartments } from \"redux/actions/user\";\nimport { RootState } from \"redux/reducers\";\nimport { logOutUser } from \"redux/actions/user\";\nimport { Box, OutlinedInput, InputAdornment, TextField, Toolbar, AppBar, Typography, Avatar, ListItemIcon, Divider, MenuItem as MenuItemDepartment, IconButton, Stack, Popover, MenuItem } from '@mui/material';\n\nimport { StyledMenuItem } from '../../layouts/navigation/style'\nimport { BoxSpan } from '../../layouts/navigation/style'\n\nimport { IEvent } from \"redux/types/event\";\nimport { IDepartment } from \"redux/types/department\";\n\nimport FeedContent from \"pages/contents/FeedContent\";\nimport FeedDetailContent from \"pages/contents/FeedDetailContent\";\n\nimport { purple } from '@mui/material/colors';\n\nimport SearchIcon from '@mui/icons-material/Search';\nimport {  Person, Notifications } from '@mui/icons-material';\n\nimport { Link, NavLink, useParams } from \"react-router-dom\";\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n    width: 240,\n    '& fieldset': {\n        borderWidth: `1px !important`,\n        // borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n        borderColor: '#rgba(0, 0, 0, 0.87)'\n    },\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    textfield: {\n        '& .MuiSelect-select': {\n            color: 'black', fontSize: '12px'\n        },\n        '& .MuiSvgIcon-root': {\n            fontSize: '20px', paddingRight: '2px'\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderRadius: '20px'\n            },\n            '&.Mui-focused fieldset': {\n                border: \"1px solid black\",\n            }\n        },\n        '& label.Mui-focused': {\n            color: 'black',\n        },\n        '& fieldset': {\n            borderRadius: '30px'\n        },\n\n    },\n    hoverDetail: {\n        '&: hover': {\n            color: 'green',\n        },\n    },\n}))\n\nconst StyledRoot = styled(AppBar)(() => ({\n    boxShadow: 'none',\n    width: '100%',\n    backgroundColor: 'white',\n    fontWeight: 'bold',\n}));\ninterface RouteParams {\n    id: string\n}\nconst DetailContent: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const params = useParams<RouteParams>();\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n    const openUser = Boolean(anchorElUser);\n    const handleClickUser = (event: any) => {\n        setAnchorElUser(event.currentTarget);\n    };\n    const handleCloseUser = () => {\n        setAnchorElUser(null);\n    };\n    const classes = useStyles();\n    const [filterName, setFilterName] = React.useState('');\n\n    const [filterNameDepartment, setFilterNameDepartment] = React.useState('');\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const [eventDetails, setEventDetails] = React.useState<IEvent[]>([]);\n    const [departments, setDepartments] = React.useState<IDepartment[]>([]);\n    const user = useSelector((state: RootState) => state.user);\n\n    React.useEffect(() => {\n        dispatch(getEvents());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        dispatch(getDepartments());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() =>\n            user?.events?.filter((event: any) =>\n                event.nameEvent\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setEventDetails(() =>\n            user?.events?.filter((event: any) =>\n                event._id == params.id\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setDepartments(() => user?.departments?.filter((department: any) => department.nameDepartment));\n    }, [user]);\n\n    const myInputProps_TenKhoa = {\n        startAdornment: <Box sx={{ fontSize: '12px', position: \"start\" }}\n        > Khoa</Box>,\n        style: {\n            height: '48px',\n        }\n    }\n\n    const handleFilterByName = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase()) || event.location.toLowerCase().startsWith(keyword.toLowerCase()) || event.job.some((job: any) => job.nameJob.toLowerCase().startsWith(keyword.toLowerCase()));\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.nameEvent || event.location || event.job.some((job: any) => job.nameJob)));\n        }\n\n        setFilterName(keyword);\n    };\n\n    const handleFilterByNameDepartment = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) || event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) && event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.departmentEvent.nameDepartment));\n        }\n\n        setFilterNameDepartment(keyword);\n    };\n\n    React.useEffect(() => {\n        document.title = \"Trang Chủ | CTV\";\n    }, []);\n\n    return (\n        <Box>\n            <Box>\n                <StyledRoot style={{ boxShadow: \"none\", overflowX: \"hidden\" }}>\n                    <Toolbar>\n                        <Link style={{ textDecoration: 'none' }} to={'/user'}>\n                            <img src=\"/hutech-logo.ico\" style={{ height: \"56px\", width: \"50px\" }}></img>\n                        </Link>\n                        <Box textAlign={\"center\"} sx={{ flexGrow: 1 }}>\n                            <StyledSearch\n                                style={{ borderRadius: '20px', fontSize: '13px', height: \"48px\", marginRight: '16px' }}\n                                value={filterName}\n                                onChange={handleFilterByName}\n                                placeholder=\"Tìm kiếm công việc...\"\n                                startAdornment={\n                                    <InputAdornment position=\"start\" style={{ paddingLeft: 1.3 }}>\n                                        <SearchIcon style={{ width: '16px' }} sx={{ color: 'rgba(0, 0, 0, 0.87)' }} />\n                                    </InputAdornment>\n                                }\n                            />\n                            <TextField\n                                id=\"filled-select-currency\"\n                                select\n                                value={filterNameDepartment}\n                                onChange={handleFilterByNameDepartment}\n                                variant=\"outlined\"\n                                InputProps={myInputProps_TenKhoa}\n                                style={{ width: 240 }}\n                                className={classes.textfield}\n                            >\n                                {departments.map((department) => (\n                                    <MenuItemDepartment key={department._id}\n                                        value={department.nameDepartment}\n                                        style={{ fontSize: \"12px\" }}\n                                    >\n                                        {department.nameDepartment}\n                                    </MenuItemDepartment>\n                                ))}\n                            </TextField>\n                        </Box>\n                        {/* <Box>\n                            <Notifications style={{ color: 'black' }} />\n                        </Box> */}\n                        <Stack\n                            direction=\"row\"\n                            alignItems=\"center\"\n                            spacing={{\n                                xs: 0.5,\n                                sm: 1,\n                            }}\n                            sx={{ margin: 3, color: 'black' }}\n                        >\n                            <Box sx={{\n                                display: 'flex', alignItems: 'center', textAlign: 'center'\n                            }}>\n                                <IconButton onClick={(event) => handleClickUser(event)}\n                                    sx={{\n                                        p: 0,\n\n                                    }}>\n                                    <Person style={{ color: \"black\" }} />\n                                </IconButton>\n\n                                <Popover\n                                    open={openUser}\n                                    anchorEl={anchorElUser}\n                                    onClose={handleCloseUser}\n                                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                                    transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                                    sx={{ marginLeft: 1 }}\n                                    PaperProps={{\n                                        style: {\n                                            borderRadius: 20,\n                                            boxShadow: 'rgba(145, 158, 171, 0.24) 0px 0px 2px 0px, rgba(145, 158, 171, 0.24) -20px 20px 40px -4px',\n                                        },\n                                        sx: {\n                                            p: 1,\n                                            width: 220,\n                                            overflowX: 'unset',\n                                            overflowY: 'unset',\n                                            '& .MuiMenuItem-root': {\n                                                px: 1,\n                                                py: 1,\n                                                typography: 'body2',\n                                                borderRadius: 1,\n                                                justifyContent: 'left'\n                                            },\n                                            '& .MuiAvatar-root': {\n                                                width: 32,\n                                                height: 32,\n                                                ml: -0.5,\n                                                mt: 1,\n                                                mr: 1,\n                                            },\n                                        },\n                                    }}\n                                >\n\n                                    <BoxSpan />\n                                    <Stack sx={{ p: 0.5 }} >\n                                        <StyledMenuItem component={NavLink} to={'/profile'} >\n                                            <Box display={\"flex\"}>\n                                                <Box>\n                                                    <Avatar src={user.user.avatar}/>\n                                                </Box>\n                                                <Box flexDirection={'column'}>\n                                                    <Typography style={{ fontWeight: 500, fontSize: '14px' }}>{user.user.username}</Typography>\n                                                    <Typography style={{ color: \"#637381\", fontSize: '13.5px' }} >{user.user.email}</Typography>\n                                                </Box>\n                                            </Box>\n                                        </StyledMenuItem>\n\n                                        <Divider sx={{ borderStyle: 'dashed' }} />\n\n                                        <StyledMenuItem component={NavLink} to={'/storageEvent'}>\n                                            <Typography style={{ fontSize: '14px' }}>Sự Kiện Đã Lưu</Typography>\n                                        </StyledMenuItem>\n\n                                        <StyledMenuItem component={NavLink} to={'/applyJob'}>\n                                            <Typography style={{ fontSize: '14px', float: 'left' }}>Công Việc Đã Ứng Tuyển</Typography>\n                                        </StyledMenuItem>\n                                        \n                                        <StyledMenuItem component={NavLink} to={'/manageJob'}>\n                                            <Typography style={{ fontSize: '14px', float: 'left' }}>Quản Lý Công việc</Typography>\n                                        </StyledMenuItem>\n\n                                        <Divider sx={{ borderStyle: 'dashed' }} />\n\n                                        <MenuItem className=\"navbar-logout\" onClick={(e) => dispatch(logOutUser())}>\n                                            <Typography style={{ fontSize: '14px' }}> Đăng Xuất</Typography>\n                                        </MenuItem>\n                                    </Stack>\n\n                                </Popover>\n                            </Box>\n                        </Stack>\n                    </Toolbar>\n                </StyledRoot>\n            </Box>\n            <Box style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center'\n            }}>\n                <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n                    {events && events.length > 0 ? (\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }}>\n                            <Box style={{ paddingLeft: '20px', top: 100, zIndex: 10, }}>\n                                {events.map((event: any) =>\n                                    <Box>\n                                        <Link style={{ textDecoration: \"none\" }} to={`/event1/${event._id}`}>\n                                            <FeedContent event={event} key={event._id} />\n                                        </Link>\n                                    </Box>\n                                )}\n                            </Box>\n                            <Box style={{ display: 'flex', paddingLeft: '20px', }}>\n                                {eventDetails.map((event: any) =>\n                                    <Box style={{\n                                        width: 500,\n                                        height: 500,\n                                        borderRadius: '12px',\n                                        position: 'sticky',\n                                        zIndex: 10,\n                                        top: \"100px\",\n                                    }}\n                                    >\n                                        <FeedDetailContent event={event} key={event._id} />\n                                    </Box>\n                                )}\n                            </Box>\n                        </Box>\n                    ) : (\n                        <Box style={{ margin: \"70px 0px\" }}>\n                            <Box>\n                                <img style={{ width: \"400px\", height: \"410px\", display: \"flex\", margin: \"auto\" }} src=\"/not-found.png\" />\n                            </Box>\n                            <Box>\n                                <Typography style={{ fontSize: \"45px\", fontWeight: \"bold\" }}>\n                                    Không Tồn Tại Sự Kiện\n                                </Typography>\n                            </Box>\n                        </Box>\n                    )}\n\n                </Box >\n            </Box>\n        </Box >\n    );\n};\n\nexport default DetailContent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\ApplyJob.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\FeedDetailStorage.tsx",["612","613","614","615","616","617","618","619","620","621"],"import * as React from \"react\";\nimport { styled, alpha, makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEvents, getDepartments } from \"redux/actions/user\";\nimport { RootState } from \"redux/reducers\";\nimport { logOutUser } from \"redux/actions/user\";\nimport { Box, OutlinedInput, InputAdornment, TextField, Toolbar, AppBar, Typography, Avatar, ListItemIcon, Divider, MenuItem as MenuItemDepartment, IconButton, Stack, Popover, MenuItem } from '@mui/material';\n\nimport { StyledMenuItem } from '../../layouts/navigation/style'\nimport { BoxSpan } from '../../layouts/navigation/style'\n\nimport { IEvent } from \"redux/types/event\";\nimport { IDepartment } from \"redux/types/department\";\n\nimport FeedContent from \"pages/contents/FeedContent\";\nimport FeedDetailContent from \"pages/contents/FeedDetailContent\";\n\nimport { purple } from '@mui/material/colors';\n\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Person, Notifications } from '@mui/icons-material';\n\nimport { Link, NavLink, useParams } from \"react-router-dom\";\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n    width: 240,\n    '& fieldset': {\n        borderWidth: `1px !important`,\n        // borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n        borderColor: '#rgba(0, 0, 0, 0.87)'\n    },\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    textfield: {\n        '& .MuiSelect-select': {\n            color: 'black', fontSize: '12px'\n        },\n        '& .MuiSvgIcon-root': {\n            fontSize: '20px', paddingRight: '2px'\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderRadius: '20px'\n            },\n            '&.Mui-focused fieldset': {\n                border: \"1px solid black\",\n            }\n        },\n        '& label.Mui-focused': {\n            color: 'black',\n        },\n        '& fieldset': {\n            borderRadius: '30px'\n        },\n\n    },\n    hoverDetail: {\n        '&: hover': {\n            color: 'green',\n        },\n    },\n}))\n\nconst StyledRoot = styled(AppBar)(() => ({\n    boxShadow: 'none',\n    width: '100%',\n    backgroundColor: 'white',\n    fontWeight: 'bold',\n}));\ninterface RouteParams {\n    id: string\n}\nconst DetailContent: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const params = useParams<RouteParams>();\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n    const openUser = Boolean(anchorElUser);\n    const handleClickUser = (event: any) => {\n        setAnchorElUser(event.currentTarget);\n    };\n    const handleCloseUser = () => {\n        setAnchorElUser(null);\n    };\n    const classes = useStyles();\n    const [filterName, setFilterName] = React.useState('');\n\n    const [filterNameDepartment, setFilterNameDepartment] = React.useState('');\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const [departments, setDepartments] = React.useState<IDepartment[]>([]);\n    const user = useSelector((state: RootState) => state.user);\n\n    React.useEffect(() => {\n        dispatch(getEvents());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        dispatch(getDepartments());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() =>\n            user?.events?.filter((event: any) =>\n            event._id == params.id\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setDepartments(() => user?.departments?.filter((department: any) => department.nameDepartment));\n    }, [user]);\n\n    const myInputProps_TenKhoa = {\n        startAdornment: <Box sx={{ fontSize: '12px', position: \"start\" }}\n        > Khoa</Box>,\n        style: {\n            height: '48px',\n        }\n    }\n\n    const handleFilterByName = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase()) || event.location.toLowerCase().startsWith(keyword.toLowerCase()) || event.job.some((job: any) => job.nameJob.toLowerCase().startsWith(keyword.toLowerCase()));\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.nameEvent || event.location || event.job.some((job: any) => job.nameJob)));\n        }\n\n        setFilterName(keyword);\n    };\n\n    const handleFilterByNameDepartment = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) || event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) && event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.departmentEvent.nameDepartment));\n        }\n\n        setFilterNameDepartment(keyword);\n    };\n\n    React.useEffect(() => {\n        document.title = \"Trang Chủ | CTV\";\n    }, []);\n\n    return (\n        <Box>\n            <Box>\n                <StyledRoot style={{ boxShadow: \"none\", overflowX: \"hidden\" }}>\n                    <Toolbar>\n                        <Link style={{ textDecoration: 'none' }} to={'/user'}>\n                            <img src=\"/hutech-logo.ico\" style={{ height: \"56px\", width: \"50px\" }}></img>\n                        </Link>\n                        <Box textAlign={\"center\"} sx={{ flexGrow: 1 }}>\n                            <StyledSearch\n                                style={{ borderRadius: '20px', fontSize: '13px', height: \"48px\", marginRight: '16px' }}\n                                value={filterName}\n                                onChange={handleFilterByName}\n                                placeholder=\"Tìm kiếm công việc...\"\n                                startAdornment={\n                                    <InputAdornment position=\"start\" style={{ paddingLeft: 1.3 }}>\n                                        <SearchIcon style={{ width: '16px' }} sx={{ color: 'rgba(0, 0, 0, 0.87)' }} />\n                                    </InputAdornment>\n                                }\n                            />\n                            <TextField\n                                id=\"filled-select-currency\"\n                                select\n                                value={filterNameDepartment}\n                                onChange={handleFilterByNameDepartment}\n                                variant=\"outlined\"\n                                InputProps={myInputProps_TenKhoa}\n                                style={{ width: 240 }}\n                                className={classes.textfield}\n                            >\n                                {departments.map((department) => (\n                                    <MenuItemDepartment key={department._id}\n                                        value={department.nameDepartment}\n                                        style={{ fontSize: \"12px\" }}\n                                    >\n                                        {department.nameDepartment}\n                                    </MenuItemDepartment>\n                                ))}\n                            </TextField>\n                        </Box>\n                        {/* <Box>\n                            <Notifications style={{ color: 'black' }} />\n                        </Box> */}\n                        <Stack\n                            direction=\"row\"\n                            alignItems=\"center\"\n                            spacing={{\n                                xs: 0.5,\n                                sm: 1,\n                            }}\n                            sx={{ margin: 3, color: 'black' }}\n                        >\n                            <Box sx={{\n                                display: 'flex', alignItems: 'center', textAlign: 'center'\n                            }}>\n                                <IconButton onClick={(event) => handleClickUser(event)}\n                                    sx={{\n                                        p: 0,\n\n                                    }}>\n                                    <Person style={{ color: \"black\" }} />\n                                </IconButton>\n\n                                <Popover\n                                    open={openUser}\n                                    anchorEl={anchorElUser}\n                                    onClose={handleCloseUser}\n                                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                                    transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                                    sx={{ marginLeft: 1 }}\n                                    PaperProps={{\n                                        style: {\n                                            borderRadius: 20,\n                                            boxShadow: 'rgba(145, 158, 171, 0.24) 0px 0px 2px 0px, rgba(145, 158, 171, 0.24) -20px 20px 40px -4px',\n                                        },\n                                        sx: {\n                                            p: 1,\n                                            width: 220,\n                                            overflowX: 'unset',\n                                            overflowY: 'unset',\n                                            '& .MuiMenuItem-root': {\n                                                px: 1,\n                                                py: 1,\n                                                typography: 'body2',\n                                                borderRadius: 1,\n                                                justifyContent: 'left'\n                                            },\n                                            '& .MuiAvatar-root': {\n                                                width: 32,\n                                                height: 32,\n                                                ml: -0.5,\n                                                mt: 1,\n                                                mr: 1,\n                                            },\n                                        },\n                                    }}\n                                >\n\n                                    <BoxSpan />\n                                    <Stack sx={{ p: 0.5 }} >\n                                        <StyledMenuItem component={NavLink} to={'/profile'} >\n                                            <Box display={\"flex\"}>\n                                                <Box>\n                                                    <Avatar src={user.user.avatar} />\n                                                </Box>\n                                                <Box flexDirection={'column'}>\n                                                    <Typography style={{ fontWeight: 500, fontSize: '14px' }}>{user.user.username}</Typography>\n                                                    <Typography style={{ color: \"#637381\", fontSize: '13.5px' }} >{user.user.email}</Typography>\n                                                </Box>\n                                            </Box>\n                                        </StyledMenuItem>\n\n                                        <Divider sx={{ borderStyle: 'dashed' }} />\n\n                                        <StyledMenuItem component={NavLink} to={'/storageEvent'}>\n                                            <Typography style={{ fontSize: '14px' }}>Sự Kiện Đã Lưu</Typography>\n                                        </StyledMenuItem>\n\n                                        <StyledMenuItem component={NavLink} to={'/applyJob'}>\n                                            <Typography style={{ fontSize: '14px', float: 'left' }}>Sự Kiện Đã Ứng Tuyển</Typography>\n                                        </StyledMenuItem>\n\n                                        <Divider sx={{ borderStyle: 'dashed' }} />\n\n                                        <MenuItem className=\"navbar-logout\" onClick={(e) => dispatch(logOutUser())}>\n                                            <Typography style={{ fontSize: '14px' }}> Đăng Xuất</Typography>\n                                        </MenuItem>\n                                    </Stack>\n\n                                </Popover>\n                            </Box>\n                        </Stack>\n                    </Toolbar>\n                </StyledRoot>\n            </Box>\n            <Box style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center'\n            }}>\n                <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n                    {events && events.length > 0 ? (\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }}>\n                            <Box style={{ paddingLeft: '20px', top: 100, zIndex: 10, }}>\n                                {events.map((event: any) =>\n                                    <Box>\n                                        <FeedContent event={event} key={event._id} />\n                                    </Box>\n                                )}\n                            </Box>\n                            <Box style={{ display: 'flex', paddingLeft: '20px', }}>\n                                {events.map((event: any) =>\n                                    <Box style={{\n                                        width: 500,\n                                        height: 500,\n                                        borderRadius: '12px',\n                                        position: 'sticky',\n                                        zIndex: 10,\n                                        top: \"100px\",\n                                    }}\n                                    >\n                                        <FeedDetailContent event={event} key={event._id} />\n                                    </Box>\n                                )}\n                            </Box>\n                        </Box>\n                    ) : (\n                        <Box style={{ margin: \"70px 0px\" }}>\n                            <Box>\n                                <img style={{ width: \"400px\", height: \"410px\", display: \"flex\", margin: \"auto\" }} src=\"/not-found.png\" />\n                            </Box>\n                            <Box>\n                                <Typography style={{ fontSize: \"45px\", fontWeight: \"bold\" }}>\n                                    Không Tồn Tại Sự Kiện\n                                </Typography>\n                            </Box>\n                        </Box>\n                    )}\n\n                </Box >\n            </Box>\n        </Box >\n    );\n};\n\nexport default DetailContent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\ManageJob.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\contents\\DetailContent1.tsx",["622","623","624","625","626","627","628","629","630","631"],"import * as React from \"react\";\nimport { styled, alpha, makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEvents, getDepartments } from \"redux/actions/user\";\nimport { RootState } from \"redux/reducers\";\nimport { logOutUser } from \"redux/actions/user\";\nimport { Box, OutlinedInput, InputAdornment, TextField, Toolbar, AppBar, Typography, Avatar, ListItemIcon, Divider, MenuItem as MenuItemDepartment, IconButton, Stack, Popover, MenuItem } from '@mui/material';\n\nimport { StyledMenuItem } from '../../layouts/navigation/style'\nimport { BoxSpan } from '../../layouts/navigation/style'\n\nimport { IEvent } from \"redux/types/event\";\nimport { IDepartment } from \"redux/types/department\";\n\nimport FeedContent from \"pages/contents/FeedContent\";\nimport FeedDetailContent from \"pages/contents/FeedDetailContent\";\n\nimport { purple } from '@mui/material/colors';\n\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Person, Notifications } from '@mui/icons-material';\n\nimport { Link, NavLink, useParams } from \"react-router-dom\";\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n    width: 240,\n    '& fieldset': {\n        borderWidth: `1px !important`,\n        // borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n        borderColor: '#rgba(0, 0, 0, 0.87)'\n    },\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    textfield: {\n        '& .MuiSelect-select': {\n            color: 'black', fontSize: '12px'\n        },\n        '& .MuiSvgIcon-root': {\n            fontSize: '20px', paddingRight: '2px'\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderRadius: '20px'\n            },\n            '&.Mui-focused fieldset': {\n                border: \"1px solid black\",\n            }\n        },\n        '& label.Mui-focused': {\n            color: 'black',\n        },\n        '& fieldset': {\n            borderRadius: '30px'\n        },\n\n    },\n    hoverDetail: {\n        '&: hover': {\n            color: 'green',\n        },\n    },\n}))\n\nconst StyledRoot = styled(AppBar)(() => ({\n    boxShadow: 'none',\n    width: '100%',\n    backgroundColor: 'white',\n    fontWeight: 'bold',\n}));\ninterface RouteParams {\n    id: string\n}\nconst DetailContent: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const params = useParams<RouteParams>();\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n    const openUser = Boolean(anchorElUser);\n    const handleClickUser = (event: any) => {\n        setAnchorElUser(event.currentTarget);\n    };\n    const handleCloseUser = () => {\n        setAnchorElUser(null);\n    };\n    const classes = useStyles();\n    const [filterName, setFilterName] = React.useState('');\n\n    const [filterNameDepartment, setFilterNameDepartment] = React.useState('');\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const [eventDetails, setEventDetails] = React.useState<IEvent[]>([]);\n    const [departments, setDepartments] = React.useState<IDepartment[]>([]);\n    const user = useSelector((state: RootState) => state.user);\n\n    React.useEffect(() => {\n        dispatch(getEvents());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        dispatch(getDepartments());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() =>\n            user?.events?.filter((event: any) =>\n                event.nameEvent\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setEventDetails(() =>\n            user?.events?.filter((event: any) =>\n                event._id == params.id\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setDepartments(() => user?.departments?.filter((department: any) => department.nameDepartment));\n    }, [user]);\n\n    const myInputProps_TenKhoa = {\n        startAdornment: <Box sx={{ fontSize: '12px', position: \"start\" }}\n        > Khoa</Box>,\n        style: {\n            height: '48px',\n        }\n    }\n\n    const handleFilterByName = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase()) || event.location.toLowerCase().startsWith(keyword.toLowerCase()) || event.job.some((job: any) => job.nameJob.toLowerCase().startsWith(keyword.toLowerCase()));\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.nameEvent || event.location || event.job.some((job: any) => job.nameJob)));\n        }\n\n        setFilterName(keyword);\n    };\n\n    const handleFilterByNameDepartment = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) || event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) && event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.departmentEvent.nameDepartment));\n        }\n\n        setFilterNameDepartment(keyword);\n    };\n\n    React.useEffect(() => {\n        document.title = \"Trang Chủ | CTV\";\n    }, []);\n\n    return (\n        <Box>\n            <Box>\n                <StyledRoot style={{ boxShadow: \"none\", overflowX: \"hidden\" }}>\n                    <Toolbar>\n                        <Link style={{ textDecoration: 'none' }} to={'/user'}>\n                            <img src=\"/hutech-logo.ico\" style={{ height: \"56px\", width: \"50px\" }}></img>\n                        </Link>\n                        <Box textAlign={\"center\"} sx={{ flexGrow: 1 }}>\n                            <StyledSearch\n                                style={{ borderRadius: '20px', fontSize: '13px', height: \"48px\", marginRight: '16px' }}\n                                value={filterName}\n                                onChange={handleFilterByName}\n                                placeholder=\"Tìm kiếm công việc...\"\n                                startAdornment={\n                                    <InputAdornment position=\"start\" style={{ paddingLeft: 1.3 }}>\n                                        <SearchIcon style={{ width: '16px' }} sx={{ color: 'rgba(0, 0, 0, 0.87)' }} />\n                                    </InputAdornment>\n                                }\n                            />\n                            <TextField\n                                id=\"filled-select-currency\"\n                                select\n                                value={filterNameDepartment}\n                                onChange={handleFilterByNameDepartment}\n                                variant=\"outlined\"\n                                InputProps={myInputProps_TenKhoa}\n                                style={{ width: 240 }}\n                                className={classes.textfield}\n                            >\n                                {departments.map((department) => (\n                                    <MenuItemDepartment key={department._id}\n                                        value={department.nameDepartment}\n                                        style={{ fontSize: \"12px\" }}\n                                    >\n                                        {department.nameDepartment}\n                                    </MenuItemDepartment>\n                                ))}\n                            </TextField>\n                        </Box>\n                        {/* <Box>\n                            <Notifications style={{ color: 'black' }} />\n                        </Box> */}\n                        <Stack\n                            direction=\"row\"\n                            alignItems=\"center\"\n                            spacing={{\n                                xs: 0.5,\n                                sm: 1,\n                            }}\n                            sx={{ margin: 3, color: 'black' }}\n                        >\n                            <Box sx={{\n                                display: 'flex', alignItems: 'center', textAlign: 'center'\n                            }}>\n                                <IconButton onClick={(event) => handleClickUser(event)}\n                                    sx={{\n                                        p: 0,\n\n                                    }}>\n                                    <Person style={{ color: \"black\" }} />\n                                </IconButton>\n\n                                <Popover\n                                    open={openUser}\n                                    anchorEl={anchorElUser}\n                                    onClose={handleCloseUser}\n                                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                                    transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                                    sx={{ marginLeft: 1 }}\n                                    PaperProps={{\n                                        style: {\n                                            borderRadius: 20,\n                                            boxShadow: 'rgba(145, 158, 171, 0.24) 0px 0px 2px 0px, rgba(145, 158, 171, 0.24) -20px 20px 40px -4px',\n                                        },\n                                        sx: {\n                                            p: 1,\n                                            width: 220,\n                                            overflowX: 'unset',\n                                            overflowY: 'unset',\n                                            '& .MuiMenuItem-root': {\n                                                px: 1,\n                                                py: 1,\n                                                typography: 'body2',\n                                                borderRadius: 1,\n                                                justifyContent: 'left'\n                                            },\n                                            '& .MuiAvatar-root': {\n                                                width: 32,\n                                                height: 32,\n                                                ml: -0.5,\n                                                mt: 1,\n                                                mr: 1,\n                                            },\n                                        },\n                                    }}\n                                >\n\n                                    <BoxSpan />\n                                    <Stack sx={{ p: 0.5 }} >\n                                        <StyledMenuItem component={NavLink} to={'/profile'} >\n                                            <Box display={\"flex\"}>\n                                                <Box>\n                                                    <Avatar src={user.user.avatar} />\n                                                </Box>\n                                                <Box flexDirection={'column'}>\n                                                    <Typography style={{ fontWeight: 500, fontSize: '14px' }}>{user.user.username}</Typography>\n                                                    <Typography style={{ color: \"#637381\", fontSize: '13.5px' }} >{user.user.email}</Typography>\n                                                </Box>\n                                            </Box>\n                                        </StyledMenuItem>\n\n                                        <Divider sx={{ borderStyle: 'dashed' }} />\n\n                                        <StyledMenuItem component={NavLink} to={'/storageEvent'}>\n                                            <Typography style={{ fontSize: '14px' }}>Sự Kiện Đã Lưu</Typography>\n                                        </StyledMenuItem>\n\n                                        <StyledMenuItem component={NavLink} to={'/applyJob'}>\n                                            <Typography style={{ fontSize: '14px', float: 'left' }}>Công Việc Đã Ứng Tuyển</Typography>\n                                        </StyledMenuItem>\n\n                                        <StyledMenuItem component={NavLink} to={'/manageJob'}>\n                                            <Typography style={{ fontSize: '14px', float: 'left' }}>Quản Lý Công việc</Typography>\n                                        </StyledMenuItem>\n\n                                        <Divider sx={{ borderStyle: 'dashed' }} />\n\n                                        <MenuItem className=\"navbar-logout\" onClick={(e) => dispatch(logOutUser())}>\n                                            <Typography style={{ fontSize: '14px' }}> Đăng Xuất</Typography>\n                                        </MenuItem>\n                                    </Stack>\n\n                                </Popover>\n                            </Box>\n                        </Stack>\n                    </Toolbar>\n                </StyledRoot>\n            </Box>\n            <Box style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center'\n            }}>\n                <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n                    {events && events.length > 0 ? (\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }}>\n                            <Box style={{ paddingLeft: '20px', top: 100, zIndex: 10, }}>\n                                {events.map((event: any) =>\n                                    <Box>\n                                        <Link style={{ textDecoration: \"none\" }} to={`/event2/${event._id}`}>\n                                            <FeedContent event={event} key={event._id} />\n                                        </Link>\n                                    </Box>\n                                )}\n                            </Box>\n                            <Box style={{ display: 'flex', paddingLeft: '20px', }}>\n                                {eventDetails.map((event: any) =>\n                                    <Box style={{\n                                        width: 500,\n                                        height: 500,\n                                        borderRadius: '12px',\n                                        position: 'sticky',\n                                        zIndex: 10,\n                                        top: \"100px\",\n                                    }}\n                                    >\n                                        <FeedDetailContent event={event} key={event._id} />\n                                    </Box>\n                                )}\n                            </Box>\n                        </Box>\n                    ) : (\n                        <Box style={{ margin: \"70px 0px\" }}>\n                            <Box>\n                                <img style={{ width: \"400px\", height: \"410px\", display: \"flex\", margin: \"auto\" }} src=\"/not-found.png\" />\n                            </Box>\n                            <Box>\n                                <Typography style={{ fontSize: \"45px\", fontWeight: \"bold\" }}>\n                                    Không Tồn Tại Sự Kiện\n                                </Typography>\n                            </Box>\n                        </Box>\n                    )}\n\n                </Box >\n            </Box>\n        </Box >\n    );\n};\n\nexport default DetailContent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\NewJobEvent.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\ListCTVCalendar.tsx",["632","633","634","635","636","637","638","639","640","641","642","643"],"import * as React from \"react\";\nimport { styled, alpha } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getListCTV, acceptCTV, unacceptCTV } from \"redux/actions/Manager\";\nimport { RootState } from \"redux/reducers\";\nimport { IEvent } from \"redux/types/event\";\nimport { Toolbar, OutlinedInput, InputAdornment, Card, Container, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography, Popover, Button } from \"@mui/material\";\n// @mui\nimport SearchIcon from '@mui/icons-material/Search';\nimport { DownloadTableExcel } from 'react-export-table-to-excel';\nimport { Box } from \"@mui/system\";\n\nimport { useParams } from 'react-router-dom';\n\nconst StyledRoot = styled(Toolbar)(({ theme }) => ({\n    height: 96,\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0, 1, 0, 3),\n}));\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n    width: 240,\n    transition: theme.transitions.create(['box-shadow', 'width'], {\n        easing: theme.transitions.easing.easeInOut,\n        duration: theme.transitions.duration.shorter,\n    }),\n    '&.Mui-focused': {\n        width: 320,\n    },\n    '& fieldset': {\n        borderWidth: `1px !important`,\n        borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n    },\n}));\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n    order: Order,\n    orderBy: Key,\n): (\n    a: { [key in Key]: number | string },\n    b: { [key in Key]: number | string },\n) => number {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) {\n            return order;\n        }\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\ninterface RouteParams {\n    id: string\n}\n\nconst ListCTVCalendar: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const params = useParams<RouteParams>();\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const [anchorEl, setAnchorEl] = React.useState([null]);\n    const manager = useSelector((state: RootState) => state.manager);\n\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [filterName, setFilterName] = React.useState('');\n\n    const handleFilterByName = (event: any) => {\n        setPage(0);\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = manager?.events?.filter((event: any) => {\n                return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => manager?.events?.filter((event: any) => event.nameEvent));\n            // If the text field is empty, show all users\n        }\n\n        setFilterName(keyword);\n    };\n\n    const checkUserApply = manager?.events?.filter((event: any) => event._id == params.id);\n\n    React.useEffect(() => {\n        dispatch(getListCTV());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() => checkUserApply);\n    }, [manager]);\n\n    React.useEffect(() => {\n        document.title = \"LIST CVT\";\n    }, []);\n\n    const tableRef = React.useRef(null);\n\n    const nameEvent = events.map((event: any) => event.nameEvent)\n\n    return (\n\n        <>\n            <Container>\n                <Card style={{ padding: \"20px\", marginTop: \"40px\", paddingBottom: \"40px\", borderRadius: \"22px\" }}>\n                    <StyledRoot\n                        style={{ display: \"flex\", flexDirection: \"row\" }}\n                        sx={{\n                            color: 'primary.main',\n                            bgcolor: 'primary.lighter',\n                        }}\n                    >\n                        <Box>\n                            <Typography gutterBottom style={{ color: \"black\", fontSize: \"22px\" }}>\n                                Danh Sách Cộng Tác Viên Theo Lịch Làm\n                            </Typography>\n                        </Box>\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n                            <Box style={{ marginRight: \"14px\" }}>\n                                <StyledSearch\n                                    style={{ borderRadius: '30px', fontSize: '13px', height: \"48px\" }}\n                                    value={filterName}\n                                    onChange={handleFilterByName}\n                                    placeholder=\"Tìm kiếm...\"\n                                    startAdornment={\n                                        <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                                            <SearchIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                                        </InputAdornment>\n                                    }\n                                />\n                            </Box>\n                            <DownloadTableExcel\n                                filename={\"Danh sách lịch làm ctv sự kiện \" +nameEvent.toString()}\n                                sheet={\"Danh sách ctv sự kiện \" + nameEvent.toString()}\n                                currentTableRef={tableRef.current}\n\n                            >\n                                <Button>\n                                    <img src=\"/icons8-excel-48.png\" style={{ width: \"30px\" }}></img>\n                                </Button>\n                            </DownloadTableExcel>\n                        </Box>\n                    </StyledRoot>\n                    <TableContainer>\n                        {/* Table user */}\n                        <Table ref={tableRef}>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Tên sự kiện\n                                    </TableCell>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Tên công việc\n                                    </TableCell>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Tên cộng tác viên\n                                    </TableCell>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Ca làm\n                                    </TableCell>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Ngày làm trong tuần\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            {events && events.length > 0 ? (\n                                <TableBody>\n                                    {events.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((event: any, index) =>\n                                        <TableRow id=\"row\" key={event._id}>\n                                            <TableCell key={event._id} align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                                                <Box >\n                                                    {event?.nameEvent ?? null}\n                                                </Box>\n                                            </TableCell>\n                                            <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                                                {event.usersApplyJob.filter((jobApply: any) => jobApply.notiApplyJob.includes(\"Bạn đã ứng tuyển thành công\") && jobApply.acceptStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                                                    <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                                                        {job.jobEvent.nameJob}\n                                                    </Box>\n                                                )}\n                                            </TableCell>\n                                            <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                                                {event.usersApplyJob.filter((jobApply: any) => jobApply.notiApplyJob.includes(\"Bạn đã ứng tuyển thành công\") && jobApply.acceptStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                                                    <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                                                        {job.userApply.fullName}\n                                                    </Box>\n                                                )}\n                                            </TableCell>\n                                        </TableRow>\n                                    )}\n                                </TableBody>\n                            ) : (\n                                <TableBody>\n                                    <TableRow>\n                                        <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\n                                            <Typography variant=\"h6\" paragraph>\n                                                Không tồn tại user\n                                            </Typography>\n\n                                            <Typography variant=\"body2\">\n                                                Không tìm thấy kết quả &nbsp;\n                                                <strong>&quot;{filterName}&quot;</strong>.\n                                            </Typography>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                </Card>\n            </Container >\n        </>\n    );\n};\n\nexport default ListCTVCalendar;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\ListCTVEvent.tsx",["644","645"],"import * as React from \"react\";\nimport { styled, alpha } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getListCTV, acceptCTV, unacceptCTV } from \"redux/actions/Manager\";\nimport { RootState } from \"redux/reducers\";\nimport { IEvent } from \"redux/types/event\";\nimport UpdateCoefficient from \"./UpdateCoefficient\"\nimport { IconButton, TableSortLabel, Toolbar, OutlinedInput, InputAdornment, Card, Container, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography, Popover, Button } from \"@mui/material\";\n// @mui\nimport SearchIcon from '@mui/icons-material/Search';\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport { Box } from \"@mui/system\";\nimport { visuallyHidden } from '@mui/utils';\n\nimport { useParams } from 'react-router-dom';\n\nconst StyledRoot = styled(Toolbar)(({ theme }) => ({\n  height: 96,\n  display: 'flex',\n  justifyContent: 'space-between',\n  padding: theme.spacing(0, 1, 0, 3),\n}));\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n  width: 240,\n  transition: theme.transitions.create(['box-shadow', 'width'], {\n    easing: theme.transitions.easing.easeInOut,\n    duration: theme.transitions.duration.shorter,\n  }),\n  '&.Mui-focused': {\n    width: 320,\n  },\n  '& fieldset': {\n    borderWidth: `1px !important`,\n    borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n  },\n}));\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string },\n) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\ninterface DataUser {\n  _id: keyof IEvent;\n  nameEvent: keyof IEvent;\n  nameJob: keyof IEvent;\n  userApply: keyof IEvent;\n  unitPrice: keyof IEvent;\n  coefficient: keyof IEvent;\n  total: keyof IEvent;\n  acceptStatus: keyof IEvent;\n  accept: keyof IEvent;\n  unaccept: keyof IEvent;\n}\n\ninterface HeadCell {\n  _id: keyof DataUser;\n  label: string;\n  numeric: boolean;\n}\n\nconst headCells: HeadCell[] = [\n  {\n    _id: 'nameEvent',\n    numeric: false,\n    label: 'Tên sự kiện',\n  },\n  {\n    _id: 'nameJob',\n    numeric: false,\n    label: 'Tên công việc',\n  },\n  {\n    _id: 'userApply',\n    numeric: false,\n    label: 'Tên Cộng Tác Viên',\n  },\n  {\n    _id: 'unitPrice',\n    numeric: false,\n    label: 'Lương',\n  },\n  {\n    _id: 'coefficient',\n    numeric: false,\n    label: 'Hệ số',\n  },\n  {\n    _id: 'total',\n    numeric: false,\n    label: 'Thành tiền',\n  },\n  {\n    _id: 'acceptStatus',\n    numeric: false,\n    label: 'Trạng thái',\n  },\n  {\n    _id: 'accept',\n    numeric: false,\n    label: '',\n  },\n  {\n    _id: 'unaccept',\n    numeric: false,\n    label: '',\n  },\n];\n\n\ninterface EnhancedTableProps {\n  onRequestSort: (event: React.MouseEvent<unknown>, property: keyof DataUser) => void;\n  order: Order;\n  orderBy: string;\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const { order, orderBy, onRequestSort } =\n    props;\n  const createSortHandler =\n    (property: keyof DataUser) => (event: React.MouseEvent<unknown>) => {\n      onRequestSort(event, property);\n    };\n  return (\n    <TableHead style={{ backgroundColor: \"#f4f5f5\" }}\n      sx={{\n        '& th:first-child': {\n          borderRadius: '1em 0 0 0'\n        },\n        '& th:last-child': {\n          borderRadius: '0 1em 0 0'\n        }\n      }}>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell._id}\n            align={headCell.numeric ? 'right' : 'left'}\n            style={{ fontSize: '13px' }}\n            sortDirection={orderBy === headCell._id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell._id}\n              direction={orderBy === headCell._id ? order : 'asc'}\n              onClick={createSortHandler(headCell._id)}\n            >\n              {headCell.label}\n              {orderBy === headCell._id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\ninterface RouteParams {\n  id: string\n}\n\nconst ListCTVEvent: React.FC = (): JSX.Element => {\n\n  const dispatch = useDispatch();\n  const params = useParams<RouteParams>();\n\n  const [events, setEvents] = React.useState<IEvent[]>([]);\n  const [anchorEl, setAnchorEl] = React.useState([null]);\n  const manager = useSelector((state: RootState) => state.manager);\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [filterName, setFilterName] = React.useState('');\n\n  const [order, setOrder] = React.useState<Order>('asc');\n  const [orderBy, setOrderBy] = React.useState<keyof DataUser>('nameEvent');\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof DataUser,\n  ) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangeRowsPerPage = (event: any) => {\n    setPage(0);\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const handleChangePage = (event: any, newPage: any) => {\n    setPage(newPage);\n  };\n\n  const handleFilterByName = (event: any) => {\n    setPage(0);\n    const keyword = event.target.value;\n\n    if (keyword !== '') {\n      const results = manager?.events?.filter((event: any) => {\n        return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n        // Use the toLowerCase() method to make it case-insensitive\n      });\n      setEvents(results);\n    } else {\n      setEvents(() => manager?.events?.filter((event: any) => event.nameEvent));\n      // If the text field is empty, show all users\n    }\n\n    setFilterName(keyword);\n  };\n\n  const handleOpenMenu = (jobEvent: any, index: any) => {\n    const newAnchorEls = [\n      ...anchorEl.slice(0, index),\n      jobEvent.currentTarget,\n      ...anchorEl.slice(index + 1)\n    ];\n    setAnchorEl(newAnchorEls);\n  };\n\n  const handleCloseMenu = (index: any) => {\n    const newAnchorEls = [\n      ...anchorEl.slice(0, index),\n      null,\n      ...anchorEl.slice(index + 1)\n    ];\n    setAnchorEl(newAnchorEls);\n  };\n\n  const sortApplyJob = stableSort(events, getComparator(order, orderBy));\n\n  const checkUserApply = manager?.events?.filter((event: any) => event._id == params.id);\n\n  React.useEffect(() => {\n    dispatch(getListCTV());\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    setEvents(() => checkUserApply);\n  }, [manager]);\n\n  React.useEffect(() => {\n    document.title = \"LIST CVT\";\n  }, []);\n\n  const tableRef = React.useRef(null);\n\n  return (\n\n    <>\n      <Container>\n        <Card style={{ padding: \"20px\", marginTop: \"40px\", paddingBottom: \"40px\", borderRadius: \"22px\" }}>\n          <StyledRoot\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n            sx={{\n              color: 'primary.main',\n              bgcolor: 'primary.lighter',\n            }}\n          >\n            <Box>\n              <Typography gutterBottom style={{ color: \"black\", fontSize: \"22px\" }}>\n                Danh Sách Cộng Tác Viên\n              </Typography>\n            </Box>\n            <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n              <Box style={{ marginRight: \"14px\" }}>\n                <StyledSearch\n                  style={{ borderRadius: '30px', fontSize: '13px', height: \"48px\" }}\n                  value={filterName}\n                  onChange={handleFilterByName}\n                  placeholder=\"Tìm kiếm...\"\n                  startAdornment={\n                    <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                      <SearchIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                    </InputAdornment>\n                  }\n                />\n              </Box>\n            </Box>\n          </StyledRoot>\n          <TableContainer>\n            {/* Table user */}\n            <Table ref={tableRef}>\n              <EnhancedTableHead\n                order={order}\n                orderBy={orderBy}\n                onRequestSort={handleRequestSort}\n              />\n              {events && events.length > 0 ? (\n                <TableBody>\n                  {sortApplyJob.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((event: any, index) =>\n                    <TableRow id=\"row\" key={event._id}>\n                      <TableCell key={event._id} align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                        <Box >\n                          {event?.nameEvent ?? null}\n                        </Box>\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.notiApplyJob.includes(\"Bạn đã ứng tuyển thành công\") && jobApply.acceptStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                            {job.jobEvent.nameJob}\n                          </Box>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.notiApplyJob.includes(\"Bạn đã ứng tuyển thành công\") && jobApply.acceptStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                            {job.userApply.fullName}\n                          </Box>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"300px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.notiApplyJob.includes(\"Bạn đã ứng tuyển thành công\") && jobApply.acceptStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                            {new Intl.NumberFormat().format(job.jobEvent.unitPrice)} VND\n                          </Box>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"250px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.notiApplyJob.includes(\"Bạn đã ứng tuyển thành công\") && jobApply.acceptStatus.includes(\"Chờ phê duyệt\")).map((job: any, index: number) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"14px\", paddingBottom: \"14px\" }}>\n                            <Button style={{ fontSize: '12px', fontWeight: \"normal\", textTransform: \"lowercase\", width: \"20px\" }} size=\"small\" color=\"inherit\" onClick={(jobApply) => handleOpenMenu(jobApply, index)} >\n                              {job.coefficient}\n                            </Button>\n                            <Popover\n                              open={!!anchorEl[index]}\n                              anchorEl={anchorEl[index]}\n                              onClose={() => handleCloseMenu(index)}\n                              anchorOrigin={{ vertical: 'top', horizontal: 'left' }}\n                              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                              PaperProps={{\n                                sx: {\n\n                                  width: 340,\n                                  '& .MuiMenuItem-root': {\n                                    px: 1,\n                                    typography: 'body2',\n                                    borderRadius: 0.75,\n                                  },\n                                },\n                              }}\n                            >\n                              <UpdateCoefficient event={event} job={job} key={event._id} />\n                            </Popover>\n                          </Box>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"300px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.notiApplyJob.includes(\"Bạn đã ứng tuyển thành công\") && jobApply.acceptStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                            {new Intl.NumberFormat().format(job.total)} VND\n                          </Box>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"300px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.notiApplyJob.includes(\"Bạn đã ứng tuyển thành công\") && jobApply.acceptStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                            {job.acceptStatus}\n                          </Box>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"50px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.notiApplyJob.includes(\"Bạn đã ứng tuyển thành công\") && jobApply.acceptStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"5px\", paddingBottom: \"10px\" }}>\n                            <IconButton onClick={(e) => dispatch(acceptCTV(event._id, job._id))} style={{ color: \"green\" }}>\n                              <CheckCircleOutlineIcon />\n                            </IconButton>\n                          </Box>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"50px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.notiApplyJob.includes(\"Bạn đã ứng tuyển thành công\") && jobApply.acceptStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"5px\", paddingBottom: \"10px\" }}>\n                            <IconButton onClick={(e) => dispatch(unacceptCTV(event._id, job._id))} style={{ color: \"red\" }}>\n                              <HighlightOffIcon />\n                            </IconButton>\n                          </Box>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  )}\n\n                  <TablePagination\n                    style={{ fontSize: \"12px\" }}\n                    sx={{\n                      '& .MuiTablePagination-selectLabel': {\n                        fontSize: \"12px\"\n                      },\n                      '& .MuiTablePagination-selectIcon': {\n                        width: \"16px\"\n                      },\n                      '& .MuiTablePagination-displayedRows': {\n                        fontSize: \"12px\"\n                      },\n                      '& .MuiSvgIcon-root': {\n                        fontSize: \"16px\"\n                      },\n                    }}\n                    rowsPerPageOptions={[5, 10, 25]}\n                    labelRowsPerPage={\"Số lượng hàng:\"}\n                    count={events.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                    SelectProps={{\n                      MenuProps: {\n                        sx: {\n                          \"&& .MuiTablePagination-menuItem\": {\n                            fontSize: \"12px\"\n                          }\n                        }\n                      }\n                    }}\n                  />\n                </TableBody>\n              ) : (\n                <TableBody>\n                  <TableRow>\n                    <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\n                      <Typography variant=\"h6\" paragraph>\n                        Không tồn tại user\n                      </Typography>\n\n                      <Typography variant=\"body2\">\n                        Không tìm thấy kết quả &nbsp;\n                        <strong>&quot;{filterName}&quot;</strong>.\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              )}\n            </Table>\n          </TableContainer>\n        </Card>\n      </Container >\n    </>\n  );\n};\n\nexport default ListCTVEvent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\ListCTVExcel.tsx",["646","647","648","649","650","651","652","653"],"import * as React from \"react\";\nimport { styled, alpha } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getListCTV } from \"redux/actions/Manager\";\nimport { RootState } from \"redux/reducers\";\nimport { IEvent } from \"redux/types/event\";\nimport UpdateCoefficient from \"./UpdateCoefficient\"\nimport { TableSortLabel, Toolbar, OutlinedInput, InputAdornment, Card, Container, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography, Popover, Button } from \"@mui/material\";\n// @mui\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Box } from \"@mui/system\";\nimport { visuallyHidden } from '@mui/utils';\n\nimport { useParams } from 'react-router-dom';\n\nimport { DownloadTableExcel } from 'react-export-table-to-excel';\n\nconst StyledRoot = styled(Toolbar)(({ theme }) => ({\n    height: 96,\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0, 1, 0, 3),\n}));\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n    width: 240,\n    transition: theme.transitions.create(['box-shadow', 'width'], {\n        easing: theme.transitions.easing.easeInOut,\n        duration: theme.transitions.duration.shorter,\n    }),\n    '&.Mui-focused': {\n        width: 320,\n    },\n    '& fieldset': {\n        borderWidth: `1px !important`,\n        borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n    },\n}));\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n    order: Order,\n    orderBy: Key,\n): (\n    a: { [key in Key]: number | string },\n    b: { [key in Key]: number | string },\n) => number {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) {\n            return order;\n        }\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\ninterface DataUser {\n    _id: keyof IEvent;\n    nameEvent: keyof IEvent;\n    nameJob: keyof IEvent;\n    userApply: keyof IEvent;\n    unitPrice: keyof IEvent;\n    coefficient: keyof IEvent;\n    total: keyof IEvent;\n}\n\ninterface HeadCell {\n    _id: keyof DataUser;\n    label: string;\n    numeric: boolean;\n}\n\nconst headCells: HeadCell[] = [\n    {\n        _id: 'nameEvent',\n        numeric: false,\n        label: 'Tên sự kiện',\n    },\n    {\n        _id: 'nameJob',\n        numeric: false,\n        label: 'Tên công việc',\n    },\n    {\n        _id: 'userApply',\n        numeric: false,\n        label: 'Người ứng tuyển',\n    },\n    {\n        _id: 'unitPrice',\n        numeric: false,\n        label: 'Lương',\n    },\n    {\n        _id: 'coefficient',\n        numeric: false,\n        label: 'Hệ số',\n    },\n    {\n        _id: 'total',\n        numeric: false,\n        label: 'Thành tiền',\n    },\n];\n\n\ninterface EnhancedTableProps {\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof DataUser) => void;\n    order: Order;\n    orderBy: string;\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n    const { order, orderBy, onRequestSort } =\n        props;\n    const createSortHandler =\n        (property: keyof DataUser) => (event: React.MouseEvent<unknown>) => {\n            onRequestSort(event, property);\n        };\n    return (\n        <TableHead style={{ backgroundColor: \"#f4f5f5\" }}\n            sx={{\n                '& th:first-child': {\n                    borderRadius: '1em 0 0 0'\n                },\n                '& th:last-child': {\n                    borderRadius: '0 1em 0 0'\n                }\n            }}>\n            <TableRow>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell._id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        style={{ fontSize: '13px' }}\n                        sortDirection={orderBy === headCell._id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell._id}\n                            direction={orderBy === headCell._id ? order : 'asc'}\n                            onClick={createSortHandler(headCell._id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell._id ? (\n                                <Box component=\"span\" sx={visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </Box>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\ninterface RouteParams {\n    id: string\n}\n\nconst ListCTVExcel: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const params = useParams<RouteParams>();\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const [anchorEl, setAnchorEl] = React.useState([null]);\n    const manager = useSelector((state: RootState) => state.manager);\n\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [filterName, setFilterName] = React.useState('');\n\n    const [order, setOrder] = React.useState<Order>('asc');\n    const [orderBy, setOrderBy] = React.useState<keyof DataUser>('nameEvent');\n\n\n    const handleFilterByName = (event: any) => {\n        setPage(0);\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = manager?.events?.filter((event: any) => {\n                return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => manager?.events?.filter((event: any) => event.nameEvent));\n            // If the text field is empty, show all users\n        }\n\n        setFilterName(keyword);\n    };\n\n    const handleOpenMenu = (jobEvent: any, index: any) => {\n        const newAnchorEls = [\n            ...anchorEl.slice(0, index),\n            jobEvent.currentTarget,\n            ...anchorEl.slice(index + 1)\n        ];\n        setAnchorEl(newAnchorEls);\n    };\n\n    const handleCloseMenu = (index: any) => {\n        const newAnchorEls = [\n            ...anchorEl.slice(0, index),\n            null,\n            ...anchorEl.slice(index + 1)\n        ];\n        setAnchorEl(newAnchorEls);\n    };\n\n    const sortApplyJob = stableSort(events, getComparator(order, orderBy));\n\n    const checkUserApply = manager?.events?.filter((event: any) => event._id == params.id);\n\n    React.useEffect(() => {\n        dispatch(getListCTV());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() => checkUserApply);\n    }, [manager]);\n\n    React.useEffect(() => {\n        document.title = \"List | CTV\";\n    }, []);\n\n    const tableRef = React.useRef(null);\n\n    const nameEvent = events.map((event:any) => event.nameEvent)\n\n    return (\n\n        <>\n            <Container>\n                <Card style={{ padding: \"20px\", marginTop: \"40px\", paddingBottom: \"40px\", borderRadius: \"22px\" }}>\n                    <StyledRoot\n                        style={{ display: \"flex\", flexDirection: \"row\" }}\n                        sx={{\n                            color: 'primary.main',\n                            bgcolor: 'primary.lighter',\n                        }}\n                    >\n                        <Box>\n                            <Typography gutterBottom style={{ color: \"black\", fontSize: \"22px\" }}>\n                                Danh Sách CTV Hoàn Thành Công Việc\n                            </Typography>\n                        </Box>\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n                            <Box style={{ marginRight: \"14px\" }}>\n                                <StyledSearch\n                                    style={{ borderRadius: '30px', fontSize: '13px', height: \"48px\" }}\n                                    value={filterName}\n                                    onChange={handleFilterByName}\n                                    placeholder=\"Tìm kiếm...\"\n                                    startAdornment={\n                                        <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                                            <SearchIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                                        </InputAdornment>\n                                    }\n                                />\n                            </Box>\n                            <DownloadTableExcel\n                                filename={nameEvent.toString()}\n                                sheet= {\"Danh sách ctv sự kiện \" + nameEvent.toString()}\n                                currentTableRef={tableRef.current}\n\n                            >\n                                <Button>\n                                    <img src=\"/icons8-excel-48.png\" style={{  width: \"30px\" }}></img>\n                                </Button>\n                            </DownloadTableExcel>\n                        </Box>\n                    </StyledRoot>\n                    <TableContainer>\n                        {/* Table user */}\n                        <Table ref={tableRef}>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Tên sự kiện\n                                    </TableCell>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Tên công việc\n                                    </TableCell>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Người ứng tuyển\n                                    </TableCell>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Lương\n                                    </TableCell>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Hệ số\n                                    </TableCell>\n                                    <TableCell\n                                        align={'left'}\n                                        style={{ fontSize: '13px' }}\n                                    >\n                                        Thành tiền\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            {events && events.length > 0 ? (\n                                <TableBody>\n                                    {sortApplyJob.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((event: any, index) =>\n                                        <TableRow id=\"row\" key={event._id}>\n                                            <TableCell key={event._id} align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                                                <Box >\n                                                    {event?.nameEvent ?? null}\n                                                </Box>\n                                            </TableCell>\n                                            <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                                                {event.usersApplyJob.filter((jobApply: any) => jobApply.notiAccept.includes(\"Đã hoàn thành công việc. Liên hệ văn phòng Viện/Khoa.\")).map((job: any) =>\n                                                    <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                                                        {job.jobEvent.nameJob}\n                                                    </Box>\n                                                )}\n                                            </TableCell>\n                                            <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                                                {event.usersApplyJob.filter((jobApply: any) => jobApply.notiAccept.includes(\"Đã hoàn thành công việc. Liên hệ văn phòng Viện/Khoa.\")).map((job: any) =>\n                                                    <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                                                        {job.userApply.username}\n                                                    </Box>\n                                                )}\n                                            </TableCell>\n                                            <TableCell align=\"left\" sx={{ width: \"300px\", fontSize: '12px' }}>\n                                                {event.usersApplyJob.filter((jobApply: any) => jobApply.notiAccept.includes(\"Đã hoàn thành công việc. Liên hệ văn phòng Viện/Khoa.\")).map((job: any) =>\n                                                    <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                                                        {new Intl.NumberFormat().format(job.jobEvent.unitPrice)} VND\n                                                    </Box>\n                                                )}\n                                            </TableCell>\n                                            <TableCell align=\"left\" sx={{ width: \"250px\", fontSize: '12px' }}>\n                                                {event.usersApplyJob.filter((jobApply: any) => jobApply.notiAccept.includes(\"Đã hoàn thành công việc. Liên hệ văn phòng Viện/Khoa.\")).map((job: any, index: number) =>\n                                                    <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"14px\", paddingBottom: \"14px\" }}>\n                                                        <Button style={{ fontSize: '12px', fontWeight: \"normal\", textTransform: \"lowercase\", width: \"20px\" }} size=\"small\" color=\"inherit\" onClick={(jobApply) => handleOpenMenu(jobApply, index)} >\n                                                            {job.coefficient}\n                                                        </Button>\n                                                        <Popover\n                                                            open={!!anchorEl[index]}\n                                                            anchorEl={anchorEl[index]}\n                                                            onClose={() => handleCloseMenu(index)}\n                                                            anchorOrigin={{ vertical: 'top', horizontal: 'left' }}\n                                                            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                                                            PaperProps={{\n                                                                sx: {\n\n                                                                    width: 340,\n                                                                    '& .MuiMenuItem-root': {\n                                                                        px: 1,\n                                                                        typography: 'body2',\n                                                                        borderRadius: 0.75,\n                                                                    },\n                                                                },\n                                                            }}\n                                                        >\n                                                            <UpdateCoefficient event={event} job={job} key={event._id} />\n                                                        </Popover>\n                                                    </Box>\n                                                )}\n                                            </TableCell>\n                                            <TableCell align=\"left\" sx={{ width: \"300px\", fontSize: '12px' }}>\n                                                {event.usersApplyJob.filter((jobApply: any) => jobApply.notiAccept.includes(\"Đã hoàn thành công việc. Liên hệ văn phòng Viện/Khoa.\")).map((job: any) =>\n                                                    <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                                                        {new Intl.NumberFormat().format(job.total)} VND\n                                                    </Box>\n                                                )}\n                                            </TableCell>\n                                        </TableRow>\n                                    )}\n                                </TableBody>\n                            ) : (\n                                <TableBody>\n                                    <TableRow>\n                                        <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\n                                            <Typography variant=\"h6\" paragraph>\n                                                Không tồn tại user\n                                            </Typography>\n\n                                            <Typography variant=\"body2\">\n                                                Không tìm thấy kết quả &nbsp;\n                                                <strong>&quot;{filterName}&quot;</strong>.\n                                            </Typography>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                </Card>\n            </Container >\n        </>\n    );\n};\n\nexport default ListCTVExcel;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\ListUserApplyEvent.tsx",["654","655"],"import * as React from \"react\";\nimport { styled, alpha } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getListUserApply, approveUserApplyJob, unapproveUserApplyJob } from \"redux/actions/Manager\";\nimport { RootState } from \"redux/reducers\";\nimport { IEvent } from \"redux/types/event\";\nimport { Avatar, TableSortLabel, IconButton, Toolbar, OutlinedInput, InputAdornment, Button, Card, Container, Popover, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography, FormControl } from \"@mui/material\";\n// @mui\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Box } from \"@mui/system\";\nimport { visuallyHidden } from '@mui/utils';\n\nimport { useParams } from 'react-router-dom';\n\nconst StyledRoot = styled(Toolbar)(({ theme }) => ({\n  height: 96,\n  display: 'flex',\n  justifyContent: 'space-between',\n  padding: theme.spacing(0, 1, 0, 3),\n}));\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n  width: 240,\n  transition: theme.transitions.create(['box-shadow', 'width'], {\n    easing: theme.transitions.easing.easeInOut,\n    duration: theme.transitions.duration.shorter,\n  }),\n  '&.Mui-focused': {\n    width: 320,\n  },\n  '& fieldset': {\n    borderWidth: `1px !important`,\n    borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n  },\n}));\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string },\n) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\ninterface DataUser {\n  _id: keyof IEvent;\n  nameEvent: keyof IEvent;\n  nameJob: keyof IEvent;\n  userApply: keyof IEvent;\n  applyStatus: keyof IEvent;\n  approve: keyof IEvent;\n  unapprove: keyof IEvent;\n}\n\ninterface HeadCell {\n  _id: keyof DataUser;\n  label: string;\n  numeric: boolean;\n}\n\nconst headCells: HeadCell[] = [\n  {\n    _id: 'nameEvent',\n    numeric: false,\n    label: 'Tên sự kiện',\n  },\n  {\n    _id: 'nameJob',\n    numeric: false,\n    label: 'Tên công việc',\n  },\n  {\n    _id: 'userApply',\n    numeric: false,\n    label: 'Người ứng tuyển',\n  },\n  {\n    _id: 'applyStatus',\n    numeric: false,\n    label: 'Trạng thái',\n  },\n  {\n    _id: 'approve',\n    numeric: false,\n    label: '',\n  },\n  {\n    _id: 'unapprove',\n    numeric: false,\n    label: '',\n  },\n];\n\n\ninterface EnhancedTableProps {\n  onRequestSort: (event: React.MouseEvent<unknown>, property: keyof DataUser) => void;\n  order: Order;\n  orderBy: string;\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const { order, orderBy, onRequestSort } =\n    props;\n  const createSortHandler =\n    (property: keyof DataUser) => (event: React.MouseEvent<unknown>) => {\n      onRequestSort(event, property);\n    };\n  return (\n    <TableHead style={{ backgroundColor: \"#f4f5f5\" }}\n      sx={{\n        '& th:first-child': {\n          borderRadius: '1em 0 0 0'\n        },\n        '& th:last-child': {\n          borderRadius: '0 1em 0 0'\n        }\n      }}>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell._id}\n            align={headCell.numeric ? 'right' : 'left'}\n            style={{ fontSize: '13px' }}\n            sortDirection={orderBy === headCell._id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell._id}\n              direction={orderBy === headCell._id ? order : 'asc'}\n              onClick={createSortHandler(headCell._id)}\n            >\n              {headCell.label}\n              {orderBy === headCell._id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\ninterface RouteParams {\n  id: string\n}\nconst Users: React.FC = (): JSX.Element => {\n\n  const dispatch = useDispatch();\n  const params = useParams<RouteParams>();\n\n\n  const [events, setEvents] = React.useState<IEvent[]>([]);\n  const manager = useSelector((state: RootState) => state.manager);\n\n  const [anchorEl, setAnchorEl] = React.useState([null]);\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [filterName, setFilterName] = React.useState('');\n\n  const [order, setOrder] = React.useState<Order>('asc');\n  const [orderBy, setOrderBy] = React.useState<keyof DataUser>('nameEvent');\n\n\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof DataUser,\n  ) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangeRowsPerPage = (event: any) => {\n    setPage(0);\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const handleChangePage = (event: any, newPage: any) => {\n    setPage(newPage);\n  };\n\n  const handleFilterByName = (event: any) => {\n    setPage(0);\n    const keyword = event.target.value;\n\n    if (keyword !== '') {\n      const results = manager?.events?.filter((event: any) => {\n        return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n        // Use the toLowerCase() method to make it case-insensitive\n      });\n      setEvents(results);\n    } else {\n      setEvents(() => manager?.events?.filter((event: any) => event.nameEvent));\n      // If the text field is empty, show all users\n    }\n\n    setFilterName(keyword);\n  };\n\n  const handleOpenMenu = (jobApply: any, index: any) => {\n    const newAnchorEls = [\n      ...anchorEl.slice(0, index),\n      jobApply.currentTarget,\n      ...anchorEl.slice(index + 1)\n    ];\n    setAnchorEl(newAnchorEls);\n  };\n\n  const handleCloseMenu = (index: any) => {\n    const newAnchorEls = [\n      ...anchorEl.slice(0, index),\n      null,\n      ...anchorEl.slice(index + 1)\n    ];\n    setAnchorEl(newAnchorEls);\n  };\n\n  const sortApplyJob = stableSort(events, getComparator(order, orderBy));\n\n  React.useEffect(() => {\n    dispatch(getListUserApply());\n  }, [dispatch]);\n  // if (window.location.href.indexOf('reload') == -1) {\n  //   window.location.replace(window.location.href + '?reload');\n  // }\n\n  React.useEffect(() => {\n\n    setEvents(() => manager?.events?.filter((event: any) => event._id == params.id));\n  }, [manager]);\n\n  React.useEffect(() => {\n    document.title = \"LIST USER APPLY\";\n  }, []);\n\n  return (\n\n    <>\n      <Container>\n        <Card style={{ padding: \"20px\", marginTop: \"40px\", paddingBottom: \"40px\", borderRadius: \"22px\" }}>\n          <StyledRoot\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n            sx={{\n              color: 'primary.main',\n              bgcolor: 'primary.lighter',\n            }}\n          >\n            <Box>\n              <Typography gutterBottom style={{ color: \"black\", fontSize: \"22px\" }}>\n                Danh Sách Ứng Tuyển\n              </Typography>\n            </Box>\n            <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n              <Box style={{ marginRight: \"14px\" }}>\n                <StyledSearch\n                  style={{ borderRadius: '30px', fontSize: '13px', height: \"48px\" }}\n                  value={filterName}\n                  onChange={handleFilterByName}\n                  placeholder=\"Tìm kiếm...\"\n                  startAdornment={\n                    <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                      <SearchIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                    </InputAdornment>\n                  }\n                />\n              </Box>\n            </Box>\n          </StyledRoot>\n          <TableContainer>\n            {/* Table user */}\n            <Table >\n              <EnhancedTableHead\n                order={order}\n                orderBy={orderBy}\n                onRequestSort={handleRequestSort}\n              />\n              {events && events.length > 0 ? (\n                <TableBody>\n                  {sortApplyJob.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((event: any, index) =>\n                    <TableRow key={event._id}>\n                      <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                        <Box >\n                          {event?.nameEvent ?? null}\n                        </Box>\n                      </TableCell>\n                      {/* <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.applyStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                            {job.jobEvent.event.nameEvent}\n                          </Box>\n                        )}\n                      </TableCell> */}\n                      <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.applyStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                            {job.jobEvent.nameJob}\n                          </Box>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"150px\" }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.applyStatus.includes(\"Chờ phê duyệt\")).map((job: any, index: number) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"14px\", paddingBottom: \"14px\" }}>\n                            <Button style={{ fontSize: '12px', fontWeight: \"normal\", textTransform: \"lowercase\", width: \"40px\" }} size=\"small\" color=\"inherit\" onClick={(jobApply) => handleOpenMenu(jobApply, index)} >\n                              {job.userApply.username}\n                            </Button>\n                            <Popover\n                              open={!!anchorEl[index]}\n                              anchorEl={anchorEl[index]}\n                              onClose={() => handleCloseMenu(index)}\n                              anchorOrigin={{ vertical: 'top', horizontal: 'left' }}\n                              transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                              PaperProps={{\n                                sx: {\n\n                                  width: 340,\n                                  '& .MuiMenuItem-root': {\n                                    px: 1,\n                                    typography: 'body2',\n                                    borderRadius: 0.75,\n                                  },\n                                },\n                              }}\n                            >\n                              <Box style={{ display: \"flex\", flexDirection: \"column\" }}>\n                                <Avatar src={job.userApply.avatar} sx={{ display: \"flex\", margin: \"auto\", height: \"70px\", width: \"70px\", marginTop: \"5px\", marginBottom: \"10px\" }} />\n                                <Box sx={{ textAlign: \"center\", fontWeight: \"bold\", marginBottom: \"10px\" }}>\n                                  {job.userApply.username}\n                                </Box>\n                                <Box sx={{ display: 'grid', gap: 2, gridTemplateColumns: 'repeat(2, 1fr)', backgroundColor: \"rgba(0,0,0,0.03)\", color: \"rgb(33, 43, 54)\", marginBottom: 4, padding: 3, borderRadius: 4 }}>\n                                  <FormControl sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    fontWeight: 500,\n                                    marginTop: 1\n                                  }} >\n                                    Họ tên\n                                  </FormControl>\n                                  <FormControl sx={{ textAlign: 'right', fontSize: '14px', fontWeight: '1000', marginTop: 1 }}>\n                                    {job.userApply.fullName}\n                                  </FormControl>\n                                  <FormControl sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    fontWeight: 500,\n                                    marginTop: 1\n                                  }} >\n                                    Khoa\n                                  </FormControl>\n                                  <FormControl sx={{ textAlign: 'right', fontSize: '14px', fontWeight: '1000', marginTop: 1 }}>\n                                    {job.userApply.department.nameDepartment}\n                                  </FormControl>\n                                  <FormControl sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    fontWeight: 500,\n                                    marginTop: 1\n                                  }} >\n                                    Mã số sinh viên\n                                  </FormControl>\n                                  <FormControl sx={{ textAlign: 'right', fontSize: '14px', fontWeight: '1000', marginTop: 1 }}>\n                                    {job.userApply.mssv}\n                                  </FormControl>\n                                  <FormControl sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    fontWeight: 500,\n                                    marginTop: 1\n                                  }} >\n                                    Lớp\n                                  </FormControl>\n                                  <FormControl sx={{ textAlign: 'right', fontSize: '14px', fontWeight: '1000', marginTop: 1 }}>\n                                    {job.userApply.classUser}\n                                  </FormControl>\n                                  <FormControl sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    fontWeight: 500,\n                                    marginTop: 1\n                                  }} >\n                                    Số điện thoại\n                                  </FormControl>\n                                  <FormControl sx={{ textAlign: 'right', fontSize: '14px', fontWeight: '1000', marginTop: 1 }}>\n                                    {job.userApply.phone}\n                                  </FormControl>\n                                </Box>\n                              </Box>\n                            </Popover>\n                          </Box>\n\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"150px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.applyStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"20px\", paddingBottom: \"20px\" }}>\n                            {job.applyStatus}\n                          </Box>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"50px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.applyStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"5px\", paddingBottom: \"10px\" }}>\n                            <IconButton onClick={(e) => dispatch(approveUserApplyJob(event._id, job._id))} style={{ color: \"green\" }}>\n                              <CheckCircleOutlineIcon />\n                            </IconButton>\n                          </Box>\n                        )}\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ width: \"50px\", fontSize: '12px' }}>\n                        {event.usersApplyJob.filter((jobApply: any) => jobApply.applyStatus.includes(\"Chờ phê duyệt\")).map((job: any) =>\n                          <Box key={job._id} style={{ display: \"flex\", flexDirection: \"column\", marginTop: \"5px\", paddingBottom: \"10px\" }}>\n                            <IconButton onClick={(e) => dispatch(unapproveUserApplyJob(event._id, job._id))} style={{ color: \"red\" }}>\n                              <HighlightOffIcon />\n                            </IconButton>\n                          </Box>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  )}\n\n                  <TableRow>\n                    <TablePagination\n                      style={{ fontSize: \"12px\" }}\n                      sx={{\n                        '& .MuiTablePagination-selectLabel': {\n                          fontSize: \"12px\"\n                        },\n                        '& .MuiTablePagination-selectIcon': {\n                          width: \"16px\"\n                        },\n                        '& .MuiTablePagination-displayedRows': {\n                          fontSize: \"12px\"\n                        },\n                        '& .MuiSvgIcon-root': {\n                          fontSize: \"16px\"\n                        },\n                      }}\n                      rowsPerPageOptions={[5, 10, 25]}\n                      labelRowsPerPage={\"Số lượng hàng:\"}\n                      count={events.length}\n                      rowsPerPage={rowsPerPage}\n                      page={page}\n                      onPageChange={handleChangePage}\n                      onRowsPerPageChange={handleChangeRowsPerPage}\n                      SelectProps={{\n                        MenuProps: {\n                          sx: {\n                            \"&& .MuiTablePagination-menuItem\": {\n                              fontSize: \"12px\"\n                            }\n                          }\n                        }\n                      }}\n                    />\n                  </TableRow>\n                </TableBody>\n              ) : (\n                <TableBody>\n                  <TableRow>\n                    <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\n                      <Typography variant=\"h6\" paragraph>\n                        Không tồn tại user\n                      </Typography>\n\n                      <Typography variant=\"body2\">\n                        Không tìm thấy kết quả &nbsp;\n                        <strong>&quot;{filterName}&quot;</strong>.\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              )}\n            </Table>\n          </TableContainer>\n        </Card>\n      </Container>\n    </>\n  );\n};\n\nexport default Users;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\SManager\\NewComment.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\Events.tsx",["656"],"import * as React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEvents, deleteEvent } from \"redux/actions/Manager\";\nimport { RootState } from \"redux/reducers\";\nimport { IEvent } from \"redux/types/event\";\nimport UpdateEvent from \"pages/Manager/UpdateEvent\";\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\n\nimport ClearIcon from '@mui/icons-material/Clear';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport AddIcon from '@mui/icons-material/Add';\n\nimport { Link, NavLink } from 'react-router-dom';\n\nimport { Button, Container, Typography, Card, CardContent, CardMedia, Box, Popover, Avatar, Box as BoxButton, FormControl, Toolbar, Divider } from '@mui/material';\nimport { styled } from \"@material-ui/core/styles\";\nimport { formatDistance } from \"date-fns\";\nimport { StyledMenuItem } from \"layouts/navigation/style\";\n\nconst Event: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n\n    const StyledRoot = styled(Toolbar)(({ theme }) => ({\n        justifyContent: 'center',\n        padding: theme.spacing(0, 3, 0, 3),\n    }));\n\n\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const [anchorEl, setAnchorEl] = React.useState([null]);\n    const manager = useSelector((state: RootState) => state.manager);\n\n    const [anchorElUser, setAnchorElUser] = React.useState([null]);\n\n    const handleClickUser = (event: any, index: any) => {\n        const newAnchorEls = [\n            ...anchorElUser.slice(0, index),\n            event.currentTarget,\n            ...anchorElUser.slice(index + 1)\n        ];\n        setAnchorElUser(newAnchorEls);\n    };\n    const handleCloseUser = (index: any) => {\n        const newAnchorEls = [\n            ...anchorElUser.slice(0, index),\n            null,\n            ...anchorElUser.slice(index + 1)\n        ];\n        setAnchorElUser(newAnchorEls);\n    };\n\n    React.useEffect(() => {\n        dispatch(getEvents());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() =>\n            manager?.events?.filter((event: any) =>\n                event.nameEvent\n            ));\n    }, [manager]);\n\n    const handleOpenMenu = (event: any, index: any) => {\n        const newAnchorEls = [\n            ...anchorEl.slice(0, index),\n            event.currentTarget,\n            ...anchorEl.slice(index + 1)\n        ];\n        setAnchorEl(newAnchorEls);\n    };\n\n    const handleCloseMenu = (index: any) => {\n        const newAnchorEls = [\n            ...anchorEl.slice(0, index),\n            null,\n            ...anchorEl.slice(index + 1)\n        ];\n        setAnchorEl(newAnchorEls);\n    };\n\n    React.useEffect(() => {\n        document.title = \"Sự kiện | Manager\";\n    }, []);\n\n    return (\n\n        <Container >\n            <StyledRoot style={{ display: \"flex\", flexDirection: \"column\" }}>\n                {/* navigate */}\n                <Box style={{ display: \"flex\", flexDirection: \"row\", width: 680 }}>\n                    <Box>\n                        <Typography gutterBottom style={{ color: \"black\", fontSize: \"20px\", fontWeight: 'bold' }}>\n                            Danh Sách Sự Kiện\n                        </Typography>\n                    </Box>\n                    <Box flexGrow={1} />\n                    <Box\n                        style={{ backgroundColor: 'rgb(33, 43, 54)', color: \"white\", fontSize: 13, fontWeight: \"400\", borderRadius: 6, textDecoration: \"none\", padding: \"6px 8px\", display:\"flex\", flexDirection:\"row\" }}\n                        component={Link} to={\"/event/newevent\"}\n                    >\n                        <AddIcon style={{ width: '14px', color: \"white\", marginRight: \"2px\" }} />\n                        <Box style={{ fontSize: '12px', paddingTop: \"5px\" }} >\n                            Tạo Sự Kiện\n                        </Box>\n                    </Box>\n                </Box>\n                {events.map((event: any, index) =>\n                    <Box key={event._id} width={680} marginTop={4}>\n                        <Box >\n                            <Card style={{ boxShadow: \"none\", padding: 50, borderRadius: \"24px\" }}>\n                                {event?.approver === null ? (\n                                    <Box display={\"flex\"} flexDirection={\"row\"}>\n                                        <Box style={{ fontSize: 16, lineHeight: 3, fontWeight: '700', letterSpacing: 0.4, paddingRight: 7 }}>\n                                            Người duyệt:\n                                        </Box>\n                                        <Box style={{ fontSize: 16, lineHeight: 3, letterSpacing: 0.4 }}>\n                                            Chưa có người duyệt\n                                        </Box>\n                                    </Box>\n                                ) : (\n                                    <Box display={\"flex\"} flexDirection={\"row\"}>\n                                        <Box style={{ fontSize: 16, lineHeight: 3, fontWeight: '700', letterSpacing: 0.4, paddingRight: 7 }}>\n                                            Người duyệt:\n                                        </Box>\n                                        <Box style={{ fontSize: 16, lineHeight: 3, letterSpacing: 0.4 }}>\n                                            {event.approver.username}\n                                        </Box>\n                                    </Box>\n                                )}\n                                {/* header */}\n                                <Box style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", marginBottom: \"20px\" }}>\n                                    <Box style={{ fontSize: 24, lineHeight: 3, fontWeight: '700', letterSpacing: 0.4 }}>\n                                        {event?.nameEvent ?? null}\n                                    </Box>\n                                    <Box flexGrow={1} />\n\n                                    <Button onClick={(event) => handleClickUser(event, index)}  >\n                                        <MoreVertIcon style={{ color: \"black\" }} />\n                                    </Button>\n                                    <Popover\n                                        open={!!anchorElUser[index]}\n                                        anchorEl={anchorElUser[index]}\n                                        onClose={() => handleCloseUser(index)}\n                                        anchorReference=\"anchorPosition\"\n                                        anchorPosition={{ top: 300, left: 1330 }}\n                                        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                                        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                                        PaperProps={{\n                                            style: {\n                                                borderRadius: 20,\n                                                boxShadow: 'rgba(145, 158, 171, 0.24) 0px 0px 2px 0px, rgba(145, 158, 171, 0.24) -20px 20px 40px -4px',\n                                            },\n                                            sx: {\n                                                p: 1,\n                                                width: 180,\n                                                overflowX: 'unset',\n                                                overflowY: 'unset',\n                                                '& .MuiMenuItem-root': {\n                                                    px: 1,\n                                                    py: 1,\n                                                    typography: 'body2',\n                                                    borderRadius: 1,\n                                                    justifyContent: 'left'\n                                                },\n                                            },\n                                        }}\n                                    >\n                                        <Box>\n                                            <StyledMenuItem component={NavLink} to={`/jobEvents/${event._id}`}>\n                                                <Typography style={{ fontSize: '14px' }}>Danh sách công việc</Typography>\n                                            </StyledMenuItem>\n                                            <StyledMenuItem component={NavLink} to={`/listUserApply/${event._id}`}>\n                                                <Typography style={{ fontSize: '14px' }}>Danh sách ứng tuyển</Typography>\n                                            </StyledMenuItem>\n\n                                            <StyledMenuItem component={NavLink} to={`/listCTVEvent/${event._id}`}>\n                                                <Typography style={{ fontSize: '14px' }}>Danh sách ctv</Typography>\n                                            </StyledMenuItem>\n\n                                            <StyledMenuItem component={NavLink} to={`/listCTVCalendar/${event._id}`}>\n                                                <Typography style={{ fontSize: '14px' }}>Xuất file excel lịch làm </Typography>\n                                            </StyledMenuItem>\n\n                                            <StyledMenuItem component={NavLink} to={`/listCTVExcel/${event._id}`}>\n                                                <Typography style={{ fontSize: '14px' }}>Xuất file excel lương </Typography>\n                                            </StyledMenuItem>\n                                        </Box>\n                                    </Popover>\n                                </Box>\n\n                                <Box style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", marginBottom: \"20px\" }}>\n                                    <Box\n                                        style={{\n                                            display: \"flex\", flexDirection: \"row\", alignItems: \"center\",\n                                            borderRadius: \"40px\",\n                                        }}>\n                                        <Avatar style={{ backgroundColor: \"red\", marginRight: \"15px\", width: '30px', height: '30px', fontSize: '13px' }}>\n                                            {event.poster.username.charAt(0).toUpperCase()}\n                                        </Avatar>\n                                        <Box>\n                                            <Typography style={{ fontWeight: \"600\", fontSize: '15px' }}>{event.poster.username}</Typography>\n                                            <Typography style={{ fontWeight: \"400\", fontSize: '13px', color: 'rgb(145, 158, 171)' }}>{event.poster.department.nameDepartment}</Typography>\n                                        </Box>\n                                    </Box>\n                                    <Box flexGrow={1} />\n                                    <Box>\n                                        <Button style={{ color: \"white\", backgroundColor: '#00ab55', marginRight: 20, textTransform: 'capitalize', borderRadius: '10px', padding: '4px 12px', fontSize: '12px' }} onClick={(event) => handleOpenMenu(event, index)}  >\n                                            <RefreshIcon style={{ width: \"16px\", marginRight: '4px', fontWeight: '600' }} />\n                                            Cập nhật\n                                        </Button>\n                                        <Popover\n                                            open={!!anchorEl[index]}\n                                            anchorEl={anchorEl[index]}\n                                            onClose={() => handleCloseMenu(index)}\n                                            anchorReference=\"anchorPosition\"\n                                            anchorPosition={{ top: 300, left: 1270 }}\n                                            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                                            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                                            PaperProps={{\n                                                sx: {\n                                                    p: 1,\n                                                    width: 300,\n                                                    overflowX: 'unset',\n                                                    overflowY: 'unset',\n                                                    '& .MuiMenuItem-root': {\n                                                        px: 1,\n                                                        py: 1,\n                                                        typography: 'body2',\n                                                        borderRadius: 1,\n                                                        justifyContent: 'left'\n                                                    },\n                                                },\n                                            }}\n                                        >\n                                            <Box>\n                                                <UpdateEvent event={event} key={event._id} />\n                                            </Box>\n                                        </Popover>\n                                    </Box>\n                                    <Button style={{ color: \"white\", backgroundColor: '#FF5630', textTransform: 'capitalize', borderRadius: '10px', fontSize: '12px', padding: '4px 12px' }} onClick={(e) => dispatch(deleteEvent(event._id))} >\n                                        <ClearIcon style={{ width: \"16px\", marginRight: '4px' }} />\n                                        Xóa\n                                    </Button>\n                                </Box>\n                                {/* noidung */}\n                                <Box style={{ marginBottom: \"20px\" }}>\n                                    <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\n                                        Nội dung\n                                    </Typography>\n                                    <Box style={{ fontSize: '13px' }} dangerouslySetInnerHTML={{ __html: event.contentEvent }} />\n                                </Box>\n                                {/* job */}\n                                <Box style={{ marginBottom: \"20px\" }}>\n                                    <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\n                                        Công việc\n                                    </Typography>\n                                    {event.job.map((job: any) =>\n                                        <Box style={{ fontSize: '13px', paddingBottom: 5 }}>\n                                            • {job.nameJob}\n                                        </Box>\n                                    )}\n                                </Box>\n\n                                {/* detail */}\n                                <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\n                                    Chi tiết\n                                </Typography>\n                                <Box display={\"flex\"}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                    alignItems={'center'}\n                                    style={{ backgroundColor: 'white', padding: '20px 0px', borderRadius: '20px' }}>\n\n                                    <Box sx={{\n                                        display: 'grid',\n                                        gap: 4,\n                                        gridTemplateColumns: 'repeat(3, 1fr)',\n                                        color: \"rgb(33, 43, 54)\",\n                                        columnGap: 11\n\n                                    }} >\n\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>\n                                                Số lượng\n                                            </Box>\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>\n                                                {event.quantityUser}\n                                            </Box>\n                                        </FormControl>\n\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Địa điểm</Box>\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>{event.location}</Box>\n                                        </FormControl>\n\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Tổng chi phí </Box>\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>{new Intl.NumberFormat().format(event.costs)}</Box>\n                                        </FormControl>\n\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Ngày bắt đầu </Box>\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }} >\n                                                {event.dayStart}\n                                            </Box>\n                                        </FormControl>\n\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Ngày kết thúc </Box>\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>\n                                                {event.dayEnd}\n                                            </Box>\n                                        </FormControl>\n\n                                    </Box>\n                                </Box>\n\n                                {/* Image event */}\n                                <Box display={\"flex\"}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                    alignItems={'center'}>\n\n                                    <CardMedia\n                                        component=\"img\"\n                                        image={event.image}\n                                        alt=\"Không có ảnh\"\n                                        style={{ width: 500, borderRadius: 10, margin: '14px 0' }}\n                                    />\n                                </Box>\n\n                                <Divider style={{ margin: '10px 0' }} />\n\n                                <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\n                                    Bình luận\n                                </Typography>\n                                {/* Comment */}\n                                <Box display={\"flex\"}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                    alignItems={'center'}>\n                                    {event.comments.map((comment: any) =>\n                                        <Box style={{ display: \"flex\", flexDirection: \"row\", marginTop: 10, }}>\n                                            {comment.commenter.username == null ? (\n                                                <Avatar style={{ backgroundColor: \"green\", marginRight: \"10px\", marginTop: \"10px\", width: '28px', height: '28px', fontSize: '13px' }} aria-label=\"recipe\">\n                                                    {comment.commenter.username}\n                                                </Avatar>\n                                            ) : (\n                                                <Avatar style={{ backgroundColor: \"green\", marginRight: \"10px\", marginTop: \"10px\", width: '28px', height: '28px', fontSize: '13px' }} aria-label=\"recipe\">\n                                                    {comment.commenter.username.charAt(0).toUpperCase()}\n                                                </Avatar>\n                                            )}\n                                            <CardContent style={{ backgroundColor: \"#f4f5f5\", padding: \"10px 10px\", borderRadius: \"10px\" }}>\n                                                <Box style={{ display: \"flex\", flexDirection: \"row\" }}>\n                                                    <Typography style={{ fontWeight: \"bold\", fontSize: \"13px\", marginBottom: \"5px\" }}>{comment.commenter.username}</Typography>\n                                                    <Box style={{ flexGrow: \"1\" }}></Box>\n                                                    <Typography style={{ fontSize: '12px' }}>{(formatDistance(new Date(comment.created), Date.now(), { addSuffix: true })).split(\"about\")}</Typography>\n                                                </Box>\n                                                <Typography style={{ fontSize: \"12px\", width: 400, textAlign: \"justify\" }}>\n                                                    {comment.contentComment}\n                                                </Typography>\n                                            </CardContent>\n                                        </Box>\n                                    )}\n                                </Box>\n                            </Card>\n                        </Box>\n                    </Box>\n                )\n                }\n            </StyledRoot >\n        </Container >\n    );\n};\n\nexport default Event;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\SManager\\ApproveEvents.tsx",["657"],"import * as React from \"react\";\nimport { makeStyles, styled } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEventApprove, deleteComment } from \"redux/actions/sManager\";\nimport { RootState } from \"redux/reducers\";\nimport { IEvent } from \"redux/types/event\";\nimport { Card, CardMedia, CardContent, Avatar, Toolbar, Typography, Button, Box, Container, FormControl, Divider } from '@mui/material';\n\nimport { approveEvent } from \"redux/actions/sManager\";\nimport UpdateComment from \"pages/SManager/UpdateComment\";\n\nimport { formatDistance } from 'date-fns';\n\nimport CheckIcon from '@mui/icons-material/Check';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport { border } from \"@mui/system\";\n\nconst useStyles = makeStyles((theme) => ({\n    btnLogin: {\n        '&.MuiButton-root:hover': {\n            backgroundColor: \"transparent\",\n        }\n    },\n}));\n\nconst StyledRoot = styled(Toolbar)(({ theme }) => ({\n    justifyContent: 'center',\n    padding: theme.spacing(0, 3, 0, 3),\n}));\n\nconst ApproveEvents: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const smanager = useSelector((state: RootState) => state.smanager);\n\n    // function formatDate(input: any) {\n    //     var datePart = input.match(/\\d+/g),\n    //         year = datePart[0].substring(0),\n    //         month = datePart[1], day = datePart[2], hour = datePart[3], minute = datePart[4];\n    //     var ampm = hour >= 12 ? 'PM' : 'AM';\n\n    //     return hour + ':' + minute + ' ' + ampm + ' ' + ' ' + day + '/' + month + '/' + year;\n    // }\n\n    function convertTZ(date: any, tzString: any) {\n        return new Date(date).toLocaleString(\"en-TT\", { timeZone: tzString });\n    }\n\n\n    React.useEffect(() => {\n        dispatch(getEventApprove());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() =>\n            smanager?.events?.filter((event: any) =>\n                event.poster\n            ));\n    }, [smanager]);\n\n    React.useEffect(() => {\n        document.title = \"Duyệt bài | CTV\";\n    }, []);\n\n    return (\n        <Container >\n            <StyledRoot style={{ display: \"flex\", flexDirection: \"column\" }}>\n                {events.map((event: any) =>\n                    <Box key={event._id} width={680}>\n                        <Box >\n                            <Card style={{ boxShadow: \"none\", padding: 40, borderRadius: \"24px\" }}>\n                                {/* header */}\n                                <Box style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", marginBottom: \"30px\" }}>\n                                    <Box >\n                                        <Box style={{ fontSize: 24, fontWeight: '700', letterSpacing: 0.4 }}>\n                                            {event?.nameEvent}\n                                        </Box>\n                                        <Box display={'flex'} flexDirection={'row'} >\n                                            <Typography style={{ fontWeight: \"bold\", fontSize: '13px', color: '#757575' }}>\n                                                {event.poster.username}\n                                            </Typography>\n                                            <Typography style={{ fontSize: '13px', padding: '0px 4px', color: '#757575' }}>\n                                                |\n                                            </Typography>\n                                            <Typography style={{ fontWeight: \"bold\", fontSize: '13px', color: '#757575' }}>\n                                                {convertTZ((event.created_at), \"Asia/Bangkok\")}\n                                            </Typography>\n                                        </Box>\n\n                                    </Box>\n                                    <Box flexGrow={1} />\n                                    <Button\n                                        style={{\n                                            display: \"flex\", color: \"green\",\n                                            textTransform: \"capitalize\",\n                                            border: '1px solid'\n                                        }}\n                                        className={classes.btnLogin}\n                                        onClick={(e) => dispatch(approveEvent(event._id))}><CheckIcon style={{ width: '18px' }} />\n                                    </Button>\n                                </Box>\n                                {/* detail */}\n                                <Box style={{ marginBottom: \"20px\" }}>\n                                    <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\n                                        Nội dung\n                                    </Typography>\n                                    <Box style={{ fontSize: '13px' }} dangerouslySetInnerHTML={{ __html: event.contentEvent }} />\n                                </Box>\n                                <Box style={{ marginBottom: \"20px\" }}>\n                                    <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\n                                        Công việc\n                                    </Typography>\n                                    {event.job.map((job: any) =>\n                                        <Box sx={{\n                                            display: 'grid',\n                                            gap: 4,\n                                            gridTemplateColumns: 'repeat(3, 1fr)',\n                                            color: \"rgb(33, 43, 54)\",\n                                            columnGap: 1,\n                                            marginBottom: 5\n\n                                        }} >\n                                            <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                                <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>\n                                                    Tên công việc\n                                                </Box>\n                                                <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>\n                                                    {job.nameJob}\n                                                </Box>\n                                            </FormControl>\n                                            <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                                <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>\n                                                    Số lượng\n                                                </Box>\n                                                <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>\n                                                    {job.quantity}\n                                                </Box>\n                                            </FormControl>\n                                            <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                                <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>\n                                                    Đơn giá\n                                                </Box>\n                                                <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>\n                                                    {new Intl.NumberFormat().format(job.unitPrice)} VNĐ\n                                                </Box>\n                                            </FormControl>\n\n                                        </Box>\n                                    )}\n                                </Box>\n                                <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\n                                    Chi tiết sự kiện\n                                </Typography>\n                                <Box display={\"flex\"}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                    alignItems={'center'}\n                                    style={{ backgroundColor: 'white', padding: '20px 0px', borderRadius: '20px' }}>\n\n                                    <Box sx={{\n                                        display: 'grid',\n                                        gap: 4,\n                                        gridTemplateColumns: 'repeat(3, 1fr)',\n                                        color: \"rgb(33, 43, 54)\",\n                                        columnGap: 11\n\n                                    }} >\n\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>\n                                                Tổng số lượng\n                                            </Box>\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>\n                                                {event.quantityUser}\n                                            </Box>\n                                        </FormControl>\n\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Địa điểm</Box>\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>{event.location}</Box>\n                                        </FormControl>\n\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Tổng chi phí </Box>\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>{new Intl.NumberFormat().format(event.costs)} VNĐ</Box>\n                                        </FormControl>\n\n\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Ngày bắt đầu </Box>\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }} >\n                                                {event.dayStart}\n                                            </Box>\n                                        </FormControl>\n\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Ngày kết thúc </Box>\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>\n                                                {event.dayEnd}\n                                            </Box>\n                                        </FormControl>\n\n                                    </Box>\n                                </Box>\n                                {/* Image event */}\n                                <Box display={\"flex\"}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                    alignItems={'center'} >\n\n                                    <CardMedia\n                                        component=\"img\"\n                                        image={event.image}\n                                        alt=\"Không có ảnh\"\n                                        style={{ width: 500, borderRadius: 10, margin: '14px 0' }}\n                                    />\n                                </Box>\n\n                                <Divider style={{ margin: '10px 0' }} />\n\n                                <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\n                                    Bình luận\n                                </Typography>\n                                {/* Comment */}\n                                <Box display={\"flex\"}\n                                    flexDirection={'column'}\n                                    justifyContent={'center'}\n                                    alignItems={'center'}>\n                                    {event.comments.map((comment: any) =>\n                                        <Box style={{ display: \"flex\", flexDirection: \"row\", marginTop: 10, }}>\n                                            <Avatar style={{ backgroundColor: \"green\", marginRight: \"10px\", marginTop: \"10px\", width: '28px', height: '28px', fontSize: '13px' }} aria-label=\"recipe\">\n                                                {comment.commenter.username.charAt(0).toUpperCase()}\n                                            </Avatar>\n                                            <CardContent style={{ backgroundColor: \"#f4f5f5\", padding: \"10px 10px\", borderRadius: \"10px\" }}>\n                                                <Box style={{ display: \"flex\", flexDirection: \"row\" }}>\n                                                    <Typography style={{ fontWeight: \"bold\", fontSize: \"13px\", marginBottom: \"5px\" }}>{comment.commenter.username}</Typography>\n                                                    <Box style={{ flexGrow: \"1\" }}></Box>\n                                                    <Typography style={{ fontSize: '12px' }}>{(formatDistance(new Date(comment.created), Date.now(), { addSuffix: true })).split(\"about\")}</Typography>\n                                                </Box>\n                                                <Typography style={{ fontSize: \"12px\", width: 400, textAlign: \"justify\" }}>\n                                                    {comment.contentComment}\n                                                </Typography>\n                                            </CardContent>\n                                            <Button\n                                                style={{ color: \"red\" }}\n                                                disableRipple\n                                                className={classes.btnLogin}\n                                                size='small'\n                                                onClick={(e) => dispatch(deleteComment(event._id, comment._id))}> <DeleteForeverIcon style={{ width: '18px' }} />\n                                            </Button>\n                                        </Box>\n                                    )}\n                                    <UpdateComment event={event} />\n                                </Box>\n                            </Card>\n                        </Box>\n                    </Box>\n                )}\n            </StyledRoot>\n        </Container>\n    );\n};\n\nexport default ApproveEvents;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\SManager\\SManager.tsx",["658"],"import * as React from \"react\";\nimport { styled, alpha } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getUsers } from \"redux/actions/sManager\";\nimport { RootState } from \"redux/reducers\";\nimport { IUser } from \"redux/types/user\";\nimport { TableSortLabel, Toolbar, OutlinedInput, InputAdornment, Card, Container, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography } from \"@mui/material\";\n// @mui\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Box } from \"@mui/system\";\nimport { visuallyHidden } from '@mui/utils';\n\nconst StyledRoot = styled(Toolbar)(({ theme }) => ({\n  height: 96,\n  display: 'flex',\n  justifyContent: 'space-between',\n  padding: theme.spacing(0, 3, 0, 3),\n}));\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n  width: 240,\n  transition: theme.transitions.create(['box-shadow', 'width'], {\n    easing: theme.transitions.easing.easeInOut,\n    duration: theme.transitions.duration.shorter,\n  }),\n  '&.Mui-focused': {\n    width: 320,\n  },\n  '& fieldset': {\n    borderWidth: `1px !important`,\n    borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n  },\n}));\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string },\n) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\ninterface DataUser {\n  _id: keyof IUser;\n  username: keyof IUser;\n  email: keyof IUser;\n  department: keyof IUser;\n  role: keyof IUser;\n}\n\ninterface HeadCell {\n  paddingLeft: boolean;\n  _id: keyof DataUser;\n  label: string;\n  numeric: boolean;\n}\n\nconst headCells: HeadCell[] = [\n  {\n    _id: 'username',\n    numeric: false,\n    paddingLeft: true,\n    label: 'Tên Tài Khoản',\n  },\n  {\n    _id: 'email',\n    numeric: false,\n    paddingLeft: false,\n    label: 'Email',\n  },\n  {\n    _id: 'role',\n    numeric: false,\n    paddingLeft: false,\n    label: 'Vai Trò',\n  },\n  {\n    _id: 'department',\n    numeric: false,\n    paddingLeft: false,\n    label: 'Khoa',\n  }\n];\n\n\ninterface EnhancedTableProps {\n  onRequestSort: (event: React.MouseEvent<unknown>, property: keyof DataUser) => void;\n  order: Order;\n  orderBy: string;\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const { order, orderBy, onRequestSort } =\n    props;\n  const createSortHandler =\n    (property: keyof DataUser) => (event: React.MouseEvent<unknown>) => {\n      onRequestSort(event, property);\n    };\n  return (\n    <TableHead style={{ backgroundColor: \"#f4f5f5\" }}\n      sx={{\n        '& th:first-child': {\n          borderRadius: '1em 0 0 0'\n        },\n        '& th:last-child': {\n          borderRadius: '0 1em 0 0'\n        }\n      }}>\n      <TableRow >\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell._id}\n            align={headCell.numeric ? 'right' : 'left'}\n            style={{ paddingLeft: headCell.paddingLeft ? \"112px\" : \"17px\", fontSize: '13px' }}\n            sortDirection={orderBy === headCell._id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell._id}\n              direction={orderBy === headCell._id ? order : 'asc'}\n              onClick={createSortHandler(headCell._id)}\n            >\n              {headCell.label}\n              {orderBy === headCell._id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nconst Users: React.FC = (): JSX.Element => {\n\n  const dispatch = useDispatch();\n\n  const [users, setUsers] = React.useState<IUser[]>([]);\n  const smanager = useSelector((state: RootState) => state.smanager);\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [filterName, setFilterName] = React.useState('');\n\n  const [order, setOrder] = React.useState<Order>('asc');\n  const [orderBy, setOrderBy] = React.useState<keyof DataUser>('username');\n\n\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof DataUser,\n  ) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangeRowsPerPage = (event: any) => {\n    setPage(0);\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const handleChangePage = (event: any, newPage: any) => {\n    setPage(newPage);\n  };\n\n  const handleFilterByName = (event: any) => {\n    setPage(0);\n    const keyword = event.target.value;\n\n    if (keyword !== '') {\n      const results = smanager?.users?.filter((user: any) => {\n        if (user.role.keyRole !== \"admin\")\n          return user.username.toLowerCase().startsWith(keyword.toLowerCase());\n        // Use the toLowerCase() method to make it case-insensitive\n      });\n      setUsers(results);\n    } else {\n      setUsers(() => smanager?.users?.filter((user: any) => user.role.keyRole === \"user\" || user.role.keyRole === \"manager\" || user.role.keyRole === \"smanager\"));\n      // If the text field is empty, show all users\n    }\n\n    setFilterName(keyword);\n  };\n\n  const sortUser = stableSort(users, getComparator(order, orderBy));\n\n  React.useEffect(() => {\n    dispatch(getUsers());\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    setUsers(() => smanager?.users?.filter((user: any) =>  user.role.keyRole === \"manager\"));\n  }, [smanager]);\n\n  React.useEffect(() => {\n    document.title = \"Smanager | CTV\";\n  }, []);\n\n  return (\n\n    <>\n      <Container>\n        <Card style={{ padding: \"20px\", marginTop: \"50px\", paddingBottom: \"40px\", borderRadius: \"22px\" }}>\n          <StyledRoot\n            sx={{\n              color: 'primary.main',\n              bgcolor: 'primary.lighter',\n            }}\n          >\n            <Typography gutterBottom style={{ color: \"black\", fontSize: \"22px\" }}>\n              User\n            </Typography>\n            <StyledSearch\n              style={{ borderRadius: '30px', fontSize: '13px' }}\n              value={filterName}\n              onChange={handleFilterByName}\n              placeholder=\"Tìm kiếm user...\"\n              startAdornment={\n                <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                  <SearchIcon sx={{ color: 'text.disabled', width: 18 }} />\n                </InputAdornment>\n              }\n            />\n          </StyledRoot>\n          <TableContainer>\n            {/* Table user */}\n            <Table>\n              <EnhancedTableHead\n                order={order}\n                orderBy={orderBy}\n                onRequestSort={handleRequestSort}\n              />\n              {users && users.length > 0 ? (\n                <TableBody style={{ fontSize: '12px' }} >\n                  {sortUser.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((user: any) =>\n                    <TableRow key={user.username} >\n                      <TableCell align=\"left\" sx={{ width: \"150px\", paddingLeft: \"110px\", fontSize: '12px' }}>\n                        {user.username}\n                      </TableCell>\n\n                      <TableCell align=\"left\" sx={{ width: \"150px\", fontSize: '12px' }}>\n                        {user.email}\n                      </TableCell>\n\n                      <TableCell align=\"left\" sx={{ width: \"150px\", fontSize: '12px' }}>\n                        {user.role.keyRole}\n                      </TableCell>\n\n\n                      <TableCell align=\"left\" sx={{ width: \"150px\", fontSize: '12px' }}>\n                        {user.department.nameDepartment}\n                      </TableCell >\n                    </TableRow>\n                  )}\n\n                  <TableRow>\n                    <TablePagination\n                      style={{ fontSize: \"12px\" }}\n                      sx={{\n                        '& .MuiTablePagination-selectLabel': {\n                          fontSize: \"12px\"\n                        },\n                        '& .MuiTablePagination-selectIcon': {\n                          width: \"16px\"\n                        },\n                        '& .MuiTablePagination-displayedRows': {\n                          fontSize: \"12px\"\n                        },\n                        '& .MuiSvgIcon-root': {\n                          fontSize: \"16px\"\n                        },\n                      }}\n                      rowsPerPageOptions={[5, 10, 25]}\n                      labelRowsPerPage={\"Số lượng hàng:\"}\n                      count={users.length}\n                      rowsPerPage={rowsPerPage}\n                      page={page}\n                      onPageChange={handleChangePage}\n                      onRowsPerPageChange={handleChangeRowsPerPage}\n                      SelectProps={{\n                        MenuProps:{\n                          sx: {\n                            \"&& .MuiTablePagination-menuItem\": {\n                              fontSize: \"12px\"\n                            }\n                          }\n                        }\n                      }}\n\n                    // labelDisplayedRows={({ from, to, count }) => `${from} - ${to} / ${count}`}\n\n                    />\n                  </TableRow>\n                </TableBody>\n              ) : (\n                <TableBody>\n                  <TableRow>\n                    <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\n                      <Typography variant=\"h6\" paragraph>\n                        Không tồn tại user\n                      </Typography>\n\n                      <Typography variant=\"body2\">\n                        Không tìm thấy kết quả &nbsp;\n                        <strong>&quot;{filterName}&quot;</strong>.\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              )}\n            </Table>\n          </TableContainer>\n        </Card>\n      </Container>\n    </>\n  );\n};\n\nexport default Users;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\JobEvents.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\AddDepartment.tsx",["659"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, CircularProgress } from \"@material-ui/core\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { IDepartment } from \"redux/types/department\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"redux/reducers\";\n\nimport { addDepartment, getDepartments } from \"redux/actions/admin\";\n\nimport { Box, Container, FormControl, FormLabel, TextField, Typography } from \"@mui/material\";\n\nimport { useHistory } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    position: \"absolute\",\n    top: \"0\",\n    left: \"0\",\n    width: \"100%\",\n    minHeight: \"100vh\",\n  },\n  btnRegister: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(1, 2),\n  },\n  checkboxWrapper: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    marginTop: theme.spacing(2),\n  },\n  textField: {\n    margin: theme.spacing(1.5, 0),\n    textAlign: 'left',\n    fontSize: '13px',\n    \"& .MuiInputBase-root\": {\n      \"& fieldset\": {\n        borderRadius: \"10px\",\n      },\n    },\n  },\n}));\n\ninterface IInitialValues {\n  nameDepartment: string;\n  keyDepartment: string;\n}\n\nconst AddDepartment: React.FC = (): JSX.Element => {\n  const classes = useStyles();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const ADMIN = \"640cbf0573094a5e2e001859\";\n\n  const [departments, setDepartments] = React.useState<IDepartment[]>([]);\n  const Department = useSelector((state: RootState) => state.admin);\n\n  const initialValues: IInitialValues = {\n    nameDepartment: \"\",\n    keyDepartment: \"\",\n  };\n\n  const onHandleSubmit = (values: IInitialValues, { setSubmitting }: any) => {\n    dispatch(addDepartment({ ...values, role: ADMIN }, setSubmitting))\n  };\n\n  const validationSchema = Yup.object({\n    nameDepartment: Yup.string().required(\"Invalid nameDepartment!\"),\n    keyDepartment: Yup.string().required(\"Invalid keyDepartment!\"),\n  });\n\n  React.useEffect(() => {\n    dispatch(getDepartments());\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    setDepartments(() => Department?.departments?.filter((department: any) => department.nameDepartment));\n  }, [Department]);\n\n  return (\n    <Container style={{ maxWidth: 600 }}>\n\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onHandleSubmit}\n      >\n        {({ isSubmitting, handleSubmit, values, handleChange, handleBlur, errors, touched }) => (\n          <form noValidate onSubmit={handleSubmit}>\n            <Box display={\"flex\"}\n              flexDirection={'column'}\n              justifyContent={'center'}\n              alignItems={'center'}\n              style={{ backgroundColor: 'white', padding: '40px 0px', borderRadius: '20px' }}>\n\n              <Typography style={{ fontWeight: \"bold\", fontSize: \"18px\", margin: 20 }} >\n                Thêm khoa\n              </Typography>\n\n              <FormControl>\n                <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", marginTop: \"5px\" }}>Ký tự viết tắt khoa</FormLabel>\n                <TextField\n                  style={{ width: 300 }}\n                  className={classes.textField}\n                  fullWidth\n                  variant={'outlined'}\n                  name='keyDepartment'\n                  value={values.keyDepartment}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  placeholder='Nhập ký tự viết tắt khoa muốn thêm'\n                  InputProps={{\n\n                  }}\n                  inputProps={{\n                    style: {\n                      fontSize: '12px',\n                    }\n                  }}\n                  helperText={touched.keyDepartment ? errors.keyDepartment : \"\"}\n                  error={touched.keyDepartment ? Boolean(errors.keyDepartment) : false}\n                />\n              </FormControl>\n\n              <FormControl style={{ marginTop: 2 }} >\n                <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", marginTop: 2 }}>\n                  Tên khoa\n                </FormLabel>\n                <TextField\n                  style={{ width: 300, }}\n                  className={classes.textField}\n                  fullWidth\n                  variant={'outlined'}\n                  name='nameDepartment'\n                  value={values.keyDepartment}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  placeholder='Nhập tên khoa muốn thêm'\n                  inputProps={{\n                    style: {\n                      fontSize: '12px',\n                    }\n                  }}\n                  helperText={touched.nameDepartment ? errors.nameDepartment : \"\"}\n                  error={touched.nameDepartment ? Boolean(errors.nameDepartment) : false} />\n\n              </FormControl>\n              <Box marginTop={2}>\n                <Button\n                  type='submit'\n                  disabled={isSubmitting}\n                  style={{\n                    color: \"rgb(33, 43, 54)\",\n                    height: \"34px\",\n                    width: \"120px\",\n                    fontSize: \"12px\",\n                    borderRadius: \"4px\",\n                    fontWeight: 500,\n                    textTransform: \"capitalize\",\n                    border: '1px solid rgb(33, 43, 54)',\n                    marginRight: 10\n                  }}\n                >\n                  {isSubmitting ? <CircularProgress size='1rem' /> : \"Thêm Khoa\"}\n                </Button>\n\n                <Button style={{\n                  color: \"#FF6969\",\n                  height: \"34px\",\n                  width: \"120px\",\n                  fontSize: \"12px\",\n                  fontWeight: 500,\n                  borderRadius: \"4px\",\n                  textTransform: \"capitalize\",\n                  border: '1px solid #FF6969',\n\n                }}\n                  onClick={history.goBack}\n                >Quay lại</Button>\n              </Box>\n\n\n            </Box>\n          </form>\n        )}\n      </Formik>\n\n\n\n\n\n    </Container >\n\n  );\n};\n\nexport default AddDepartment;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\Events.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\Users.tsx",["660"],"import * as React from \"react\";\nimport { styled, alpha } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getUsers, deleteUser } from \"redux/actions/admin\";\nimport { RootState } from \"redux/reducers\";\nimport { IUser } from \"redux/types/user\";\nimport { Box,TableSortLabel, Toolbar, OutlinedInput, InputAdornment, Button, Card, Container, Popover, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography } from \"@mui/material\";\nimport { Link } from 'react-router-dom';\nimport UserForm from \"./UserForm\";\n// @mui\nimport EditIcon from '@mui/icons-material/Edit';\nimport SearchIcon from '@mui/icons-material/Search';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport { visuallyHidden } from '@mui/utils';\n\nconst StyledRoot = styled(Toolbar)(({ theme }) => ({\n  height: 96,\n  display: 'flex',\n  justifyContent: 'space-between',\n  padding: theme.spacing(0, 1, 0, 3),\n}));\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n  width: 240,\n  transition: theme.transitions.create(['box-shadow', 'width'], {\n    easing: theme.transitions.easing.easeInOut,\n    duration: theme.transitions.duration.shorter,\n  }),\n  '&.Mui-focused': {\n    width: 320,\n  },\n  '& fieldset': {\n    borderWidth: `1px !important`,\n    borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n  },\n}));\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n  order: Order,\n  orderBy: Key,\n): (\n  a: { [key in Key]: number | string },\n  b: { [key in Key]: number | string },\n) => number {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\ninterface DataUser {\n  _id: keyof IUser;\n  username: keyof IUser;\n  email: keyof IUser;\n  department: keyof IUser;\n  role: keyof IUser;\n  update: keyof IUser;\n  delete: keyof IUser;\n}\n\ninterface HeadCell {\n  _id: keyof DataUser;\n  label: string;\n  numeric: boolean;\n}\n\nconst headCells: HeadCell[] = [\n  {\n    _id: 'username',\n    numeric: false,\n    label: 'Tên người dùng',\n  },\n  {\n    _id: 'email',\n    numeric: false,\n    label: 'Email',\n  },\n  {\n    _id: 'role',\n    numeric: false,\n    label: 'Chức vụ',\n  },\n  {\n    _id: 'department',\n    numeric: false,\n    label: 'Khoa',\n  },\n  {\n    _id: 'update',\n    numeric: false,\n    label: '',\n  },\n  {\n    _id: 'delete',\n    numeric: false,\n    label: '',\n  },\n];\n\n\ninterface EnhancedTableProps {\n  onRequestSort: (event: React.MouseEvent<unknown>, property: keyof DataUser) => void;\n  order: Order;\n  orderBy: string;\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n  const { order, orderBy, onRequestSort } =\n    props;\n  const createSortHandler =\n    (property: keyof DataUser) => (event: React.MouseEvent<unknown>) => {\n      onRequestSort(event, property);\n    };\n  return (\n    <TableHead style={{ backgroundColor: \"#f4f5f5\" }}\n      sx={{\n        '& th:first-child': {\n          borderRadius: '1em 0 0 0'\n        },\n        '& th:last-child': {\n          borderRadius: '0 1em 0 0'\n        }\n      }}>\n      <TableRow>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell._id}\n            align={headCell.numeric ? 'right' : 'left'}\n            style={{ fontSize: '13px' }}\n            sortDirection={orderBy === headCell._id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell._id}\n              direction={orderBy === headCell._id ? order : 'asc'}\n              onClick={createSortHandler(headCell._id)}\n            >\n              {headCell.label}\n              {orderBy === headCell._id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nconst Users: React.FC = (): JSX.Element => {\n\n  const dispatch = useDispatch();\n\n\n  const [users, setUsers] = React.useState<IUser[]>([]);\n  const admin = useSelector((state: RootState) => state.admin);\n\n  const [anchorEl, setAnchorEl] = React.useState([null]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [filterName, setFilterName] = React.useState('');\n\n  const [order, setOrder] = React.useState<Order>('asc');\n  const [orderBy, setOrderBy] = React.useState<keyof DataUser>('username');\n\n\n\n  const handleRequestSort = (\n    event: React.MouseEvent<unknown>,\n    property: keyof DataUser,\n  ) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangeRowsPerPage = (event: any) => {\n    setPage(0);\n    setRowsPerPage(parseInt(event.target.value, 10));\n  };\n\n  const handleChangePage = (event: any, newPage: any) => {\n    setPage(newPage);\n  };\n\n  const handleFilterByName = (event: any) => {\n    setPage(0);\n    const keyword = event.target.value;\n\n    if (keyword !== '') {\n      const results = admin?.users?.filter((user: any) => {\n        if (user.role.keyRole !== \"admin\")\n          return user.username.toLowerCase().startsWith(keyword.toLowerCase());\n      });\n      setUsers(results);\n    } else {\n      setUsers(() => admin?.users?.filter((user: any) => user.role.keyRole === \"user\" || user.role.keyRole === \"manager\" || user.role.keyRole === \"smanager\"));\n    }\n\n    setFilterName(keyword);\n  };\n\n  const handleOpenMenu = (event: any, index: any) => {\n    const newAnchorEls = [\n      ...anchorEl.slice(0, index),\n      event.currentTarget,\n      ...anchorEl.slice(index + 1)\n    ];\n    setAnchorEl(newAnchorEls);\n  };\n\n  const handleCloseMenu = (index: any) => {\n    const newAnchorEls = [\n      ...anchorEl.slice(0, index),\n      null,\n      ...anchorEl.slice(index + 1)\n    ];\n    setAnchorEl(newAnchorEls);\n  };\n\n\n  const sortUser = stableSort(users, getComparator(order, orderBy));\n\n  React.useEffect(() => {\n    dispatch(getUsers());\n  }, [dispatch]);\n\n  React.useEffect(() => {\n    setUsers(() => admin?.users?.filter((user: any) => user.role.keyRole === \"user\" || user.role.keyRole === \"manager\" || user.role.keyRole === \"smanager\"))\n  }, [admin]);\n\n  React.useEffect(() => {\n    document.title = \"ADMIN\";\n  }, []);\n\n  return (\n\n    <>\n      <Container>\n        <Card style={{ padding: \"20px\", paddingBottom: \"40px\", borderRadius: \"22px\" }}>\n          <StyledRoot\n            style={{ display: \"flex\", flexDirection: \"row\" }}\n            sx={{\n              color: 'primary.main',\n              bgcolor: 'primary.lighter',\n            }}\n          >\n            <Box>\n              <Typography gutterBottom style={{ color: \"black\", fontSize: \"22px\" }}>\n                Danh sách người dùng\n              </Typography>\n            </Box>\n            <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n              <Box style={{ marginRight: \"14px\" }}>\n                <StyledSearch\n                  style={{ borderRadius: '30px', fontSize: '13px', height: \"48px\" }}\n                  value={filterName}\n                  onChange={handleFilterByName}\n                  placeholder=\"Tìm kiếm user...\"\n                  startAdornment={\n                    <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                      <SearchIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                    </InputAdornment>\n                  }\n                />\n              </Box>\n              <Box component={Link} to=\"/users/registerAdmin\" style={{ fontSize: '14px', textDecoration: \"none\", color: \"black\" }}>\n                <Box style={{\n                  border: '1px solid rgba(158, 158, 158, 0.32)',\n                  borderRadius: '30px', textAlign: 'center',\n                  marginTop: '0.5px', padding: '11px', backgroundColor: \"#f5f5f5\",\n                  width: 180, display: 'flex', flexDirection: 'row', justifyContent: 'center'\n                }}>\n                  <AddIcon style={{ width: '14px', color: '#ee6f81', marginRight: \"6px\" }} />\n                  <Typography style={{ fontSize: '12px', paddingTop: \"2.5px\" }} >\n                    Thêm Người Dùng\n                  </Typography>\n                </Box>\n              </Box>\n            </Box>\n          </StyledRoot>\n          <TableContainer>\n            {/* Table user */}\n            <Table >\n              <EnhancedTableHead\n                order={order}\n                orderBy={orderBy}\n                onRequestSort={handleRequestSort}\n              />\n              {users && users.length > 0 ? (\n                <TableBody>\n                  {sortUser.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((user: any, index) =>\n                    <TableRow key={user._id}>\n                      <TableCell align=\"left\" sx={{ width: \"200px\", paddingLeft: \"26px\", fontSize: '12px' }}>\n                        {user.username}\n                      </TableCell>\n\n                      <TableCell align=\"left\" sx={{ width: \"300px\", fontSize: '12px' }}>\n                        {user.email}\n                      </TableCell>\n\n                      <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                        {user.role.keyRole}\n                      </TableCell>\n\n\n                      <TableCell align=\"left\" sx={{ width: \"200px\", fontSize: '12px' }}>\n                        {user.department.nameDepartment}\n                      </TableCell >\n                      <TableCell align=\"left\" sx={{ padding: \"0px\" }}>\n                        <Button size=\"large\" color=\"inherit\" onClick={(event) => handleOpenMenu(event, index)} >\n                          <EditIcon style={{ width: \"16px\" }} />\n                        </Button>\n                        <Popover\n                          open={!!anchorEl[index]}\n                          anchorEl={anchorEl[index]}\n                          onClose={() => handleCloseMenu(index)}\n                          anchorOrigin={{ vertical: 'top', horizontal: 'left' }}\n                          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                          PaperProps={{\n                            sx: {\n                              p: 1,\n                              width: 340,\n                              '& .MuiMenuItem-root': {\n                                px: 1,\n                                typography: 'body2',\n                                borderRadius: 0.75,\n                              },\n                            },\n                          }}\n                        >\n                          <Box>\n                            <UserForm user={user} key={user._id} />\n                          </Box>\n                        </Popover>\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ padding: \"0px\" }} >\n                        <Button style={{ color: \"red\" }} onClick={(e) => dispatch(deleteUser(user._id))} >\n                          <DeleteForeverIcon style={{ width: \"16px\" }} />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  )}\n\n                  <TableRow>\n                    <TablePagination\n                      style={{ fontSize: \"12px\" }}\n                      sx={{\n                        '& .MuiTablePagination-select': {\n                          width: \"12px\"\n                        },\n                        '& .MuiTablePagination-selectLabel': {\n                          fontSize: \"12px\"\n                        },  \n                        '& .MuiTablePagination-selectIcon': {\n                          width: \"16px\"\n                        },\n                        '& .MuiTablePagination-displayedRows': {\n                          fontSize: \"12px\"\n                        },\n                        '& .MuiSvgIcon-root': {\n                          fontSize: \"16px\"\n                        },\n                      }}\n                      rowsPerPageOptions={[5, 10, 25]}\n                      labelRowsPerPage={\"Số lượng hàng:\"}\n                      count={users.length}\n                      rowsPerPage={rowsPerPage}\n                      page={page}\n                      onPageChange={handleChangePage}\n                      onRowsPerPageChange={handleChangeRowsPerPage}\n                      SelectProps={{\n                        MenuProps: {\n                          sx: {\n                            \"&& .MuiTablePagination-menuItem\": {\n                              fontSize: \"12px\"\n                            }\n                          }\n                        }\n                      }}\n                    />\n                  </TableRow>\n                </TableBody>\n              ) : (\n                <TableBody>\n                  <TableRow>\n                    <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\n                      <Typography variant=\"h6\" paragraph>\n                        Không tồn tại user\n                      </Typography>\n\n                      <Typography variant=\"body2\">\n                        Không tìm thấy kết quả &nbsp;\n                        <strong>&quot;{filterName}&quot;</strong>.\n                      </Typography>\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              )}\n            </Table>\n          </TableContainer>\n        </Card>\n      </Container>\n    </>\n  );\n};\n\nexport default Users;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\NewEvent.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\Department.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\JobFromEvent.tsx",["661","662"],"import * as React from \"react\";\nimport { styled, alpha } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getJobEvents, deleteJobEvent } from \"redux/actions/Manager\";\nimport { RootState } from \"redux/reducers\";\nimport { IJobEvent } from \"redux/types/jobEvent\";\nimport { TableSortLabel, Toolbar, OutlinedInput, InputAdornment, Button, Card, Container, Popover, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography } from \"@mui/material\";\nimport { Link } from 'react-router-dom';\nimport UpdateJobEvent from \"pages/Manager/UpdateJobEvent\";\n// @mui\nimport EditIcon from '@mui/icons-material/Edit';\nimport SearchIcon from '@mui/icons-material/Search';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\nimport { Box } from \"@mui/system\";\nimport { visuallyHidden } from '@mui/utils';\nimport { useParams } from 'react-router-dom';\n\nconst StyledRoot = styled(Toolbar)(({ theme }) => ({\n    height: 96,\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0, 1, 0, 3),\n}));\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n    width: 240,\n    transition: theme.transitions.create(['box-shadow', 'width'], {\n        easing: theme.transitions.easing.easeInOut,\n        duration: theme.transitions.duration.shorter,\n    }),\n    '&.Mui-focused': {\n        width: 320,\n    },\n    '& fieldset': {\n        borderWidth: `1px !important`,\n        borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n    },\n}));\n\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\ntype Order = 'asc' | 'desc';\n\nfunction getComparator<Key extends keyof any>(\n    order: Order,\n    orderBy: Key,\n): (\n    a: { [key in Key]: number | string },\n    b: { [key in Key]: number | string },\n) => number {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) {\n            return order;\n        }\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\ninterface DataUser {\n    _id: keyof IJobEvent;\n    nameJob: keyof IJobEvent;\n    event: keyof IJobEvent;\n    quantity: keyof IJobEvent;\n    unitPrice: keyof IJobEvent;\n    jobDescription: keyof IJobEvent;\n    benefit: keyof IJobEvent;\n    update: keyof IJobEvent;\n    delete: keyof IJobEvent;\n}\n\ninterface HeadCell {\n    _id: keyof DataUser;\n    label: string;\n    numeric: boolean;\n}\n\nconst headCells: HeadCell[] = [\n    {\n        _id: 'event',\n        numeric: false,\n        label: 'Tên sự kiện',\n    },\n    {\n        _id: 'nameJob',\n        numeric: false,\n        label: 'Tên công việc',\n    },\n    {\n        _id: 'quantity',\n        numeric: false,\n        label: 'Số lượng người',\n    },\n    {\n        _id: 'unitPrice',\n        numeric: false,\n        label: 'Đơn giá',\n    },\n    {\n        _id: 'jobDescription',\n        numeric: false,\n        label: 'Mô tả công việc',\n    },\n    {\n        _id: 'benefit',\n        numeric: false,\n        label: 'Yêu cầu công việc',\n    },\n    {\n        _id: 'update',\n        numeric: false,\n        label: '',\n    },\n    {\n        _id: 'delete',\n        numeric: false,\n        label: '',\n    },\n];\n\n\ninterface EnhancedTableProps {\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof DataUser) => void;\n    order: Order;\n    orderBy: string;\n}\n\nfunction EnhancedTableHead(props: EnhancedTableProps) {\n    const { order, orderBy, onRequestSort } =\n        props;\n    const createSortHandler =\n        (property: keyof DataUser) => (event: React.MouseEvent<unknown>) => {\n            onRequestSort(event, property);\n        };\n    return (\n        <TableHead\n            style={{ backgroundColor: \"#f4f5f5\" }}\n            sx={{\n                '& th:first-child': {\n                    borderRadius: '1em 0 0 0'\n                },\n                '& th:last-child': {\n                    borderRadius: '0 1em 0 0'\n                }\n            }}>\n            <TableRow>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell._id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        style={{ fontSize: '13px' }}\n                        sortDirection={orderBy === headCell._id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell._id}\n                            direction={orderBy === headCell._id ? order : 'asc'}\n                            onClick={createSortHandler(headCell._id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell._id ? (\n                                <Box component=\"span\" sx={visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </Box>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\ninterface RouteParams {\n    id: string\n}\nconst JobFromEvent: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const params = useParams<RouteParams>();\n\n    const [jobEvents, setJobEvents] = React.useState<IJobEvent[]>([]);\n    const manager = useSelector((state: RootState) => state.manager);\n\n    const [anchorEl, setAnchorEl] = React.useState([null]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [filterName, setFilterName] = React.useState('');\n\n    const [order, setOrder] = React.useState<Order>('asc');\n    const [orderBy, setOrderBy] = React.useState<keyof DataUser>('nameJob');\n\n    const handleRequestSort = (\n        event: React.MouseEvent<unknown>,\n        property: keyof DataUser,\n    ) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleChangeRowsPerPage = (event: any) => {\n        setPage(0);\n        setRowsPerPage(parseInt(event.target.value, 10));\n    };\n\n    const handleChangePage = (event: any, newPage: any) => {\n        setPage(newPage);\n    };\n\n    const handleFilterByName = (event: any) => {\n        setPage(0);\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = manager?.jobevents?.filter((jobEvent: any) => {\n                return jobEvent.nameJob.toLowerCase().startsWith(keyword.toLowerCase());\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setJobEvents(results);\n        } else {\n            setJobEvents(() => manager?.jobevents?.filter((jobEvent: any) => jobEvent.nameJob || jobEvent.event));\n            // If the text field is empty, show all users\n        }\n\n        setFilterName(keyword);\n    };\n\n    const handleOpenMenu = (jobEvent: any, index: any) => {\n        const newAnchorEls = [\n            ...anchorEl.slice(0, index),\n            jobEvent.currentTarget,\n            ...anchorEl.slice(index + 1)\n        ];\n        setAnchorEl(newAnchorEls);\n    };\n\n    const handleCloseMenu = (index: any) => {\n        const newAnchorEls = [\n            ...anchorEl.slice(0, index),\n            null,\n            ...anchorEl.slice(index + 1)\n        ];\n        setAnchorEl(newAnchorEls);\n    };\n\n    const sortJobEvent = stableSort(jobEvents, getComparator(order, orderBy));\n\n    React.useEffect(() => {\n        dispatch(getJobEvents());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n\n        setJobEvents(() => manager?.jobevents?.filter((jobEvent: any) => jobEvent.event._id == params.id));\n    }, [manager]);\n\n    React.useEffect(() => {\n        document.title = \"JOB EVENT\";\n    }, []);\n\n    return (\n\n        <>\n            <Container>\n                <Card style={{ padding: \"20px\", marginTop: \"20px\", paddingBottom: \"40px\", borderRadius: \"22px\" }}>\n                    <StyledRoot\n                        style={{ display: \"flex\", flexDirection: \"row\" }}\n                        sx={{\n                            color: 'primary.main',\n                            bgcolor: 'primary.lighter',\n                        }}\n                    >\n                        <Box>\n                            <Typography gutterBottom style={{ color: \"black\", fontSize: \"22px\" }}>\n                                Công Việc Sự Kiện\n                            </Typography>\n                        </Box>\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n                            <Box style={{ marginRight: \"14px\" }}>\n                                <StyledSearch\n                                    style={{ borderRadius: '30px', fontSize: '13px', height: \"48px\" }}\n                                    value={filterName}\n                                    onChange={handleFilterByName}\n                                    placeholder=\"Tìm kiếm công việc...\"\n                                    startAdornment={\n                                        <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                                            <SearchIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                                        </InputAdornment>\n                                    }\n                                />\n                            </Box>\n                            <Box component={Link} to=\"/jobEvent/newJobEvent\" style={{ fontSize: '14px', textDecoration: \"none\", color: \"black\" }}>\n                                <Box style={{\n                                    border: '1px solid rgba(158, 158, 158, 0.32)',\n                                    borderRadius: '30px', textAlign: 'center',\n                                    marginTop: '0.5px', padding: '11px', backgroundColor: \"#f5f5f5\",\n                                    width: 140, display: 'flex', flexDirection: 'row', justifyContent: 'center'\n                                }}>\n                                    <AddIcon style={{ width: '14px', color: '#ee6f81', marginRight: \"6px\" }} />\n                                    <Typography style={{ fontSize: '12px', paddingTop: \"2.5px\" }} >\n                                        Thêm Công Việc\n                                    </Typography>\n                                </Box>\n                            </Box>\n                        </Box>\n                    </StyledRoot>\n                    <TableContainer>\n                        {/* Table user */}\n                        <Table >\n                            <EnhancedTableHead\n                                order={order}\n                                orderBy={orderBy}\n                                onRequestSort={handleRequestSort}\n                            />\n                            {jobEvents && jobEvents.length > 0 ? (\n                                <TableBody>\n                                    {sortJobEvent.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((jobEvent: any, index) =>\n                                        <TableRow key={jobEvent._id}>\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\n                                                {jobEvent.event.nameEvent}\n                                            </TableCell>\n\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\n                                                {jobEvent.nameJob}\n                                            </TableCell>\n\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\n                                                {jobEvent.quantity}\n                                            </TableCell>\n\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\n                                                {jobEvent.unitPrice}\n\n                                            </TableCell>\n\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\n                                                {jobEvent.jobDescription}\n                                            </TableCell>\n\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\n                                                {jobEvent.benefit}\n                                            </TableCell>\n\n                                            <TableCell align=\"right\">\n                                                <Button size=\"large\" color=\"inherit\" onClick={(jobEvent) => handleOpenMenu(jobEvent, index)} >\n                                                    <EditIcon style={{ width: \"16px\" }} />\n                                                </Button>\n                                                <Popover\n                                                    open={!!anchorEl[index]}\n                                                    anchorEl={anchorEl[index]}\n                                                    onClose={() => handleCloseMenu(index)}\n                                                    anchorOrigin={{ vertical: 'top', horizontal: 'left' }}\n                                                    transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                                                    PaperProps={{\n                                                        sx: {\n                                                            p: 1,\n                                                            width: 340,\n                                                            '& .MuiMenuItem-root': {\n                                                                px: 1,\n                                                                typography: 'body2',\n                                                                borderRadius: 0.75,\n                                                            },\n                                                        },\n                                                    }}\n                                                >\n                                                    <Box>\n                                                        <UpdateJobEvent jobEvent={jobEvent} key={jobEvent._id} />\n                                                    </Box>\n                                                </Popover>\n                                            </TableCell>\n                                            <TableCell >\n                                                <Button style={{ color: \"red\" }} onClick={(e) => dispatch(deleteJobEvent(jobEvent._id))} >\n                                                    <DeleteForeverIcon style={{ width: \"16px\" }} />\n                                                </Button>\n                                            </TableCell>\n                                        </TableRow>\n                                    )}\n\n                                    <TableRow>\n                                        <TablePagination\n                                            style={{ fontSize: \"12px\" }}\n                                            sx={{\n                                                '& .MuiTablePagination-selectLabel': {\n                                                    fontSize: \"12px\"\n                                                },\n                                                '& .MuiTablePagination-selectIcon': {\n                                                    width: \"16px\"\n                                                },\n                                                '& .MuiTablePagination-displayedRows': {\n                                                    fontSize: \"12px\"\n                                                },\n                                                '& .MuiSvgIcon-root': {\n                                                    fontSize: \"16px\"\n                                                },\n                                            }}\n                                            rowsPerPageOptions={[5, 10, 25]}\n                                            labelRowsPerPage={\"Số lượng hàng:\"}\n                                            count={jobEvents.length}\n                                            rowsPerPage={rowsPerPage}\n                                            page={page}\n                                            onPageChange={handleChangePage}\n                                            onRowsPerPageChange={handleChangeRowsPerPage}\n                                            SelectProps={{\n                                                MenuProps: {\n                                                    sx: {\n                                                        \"&& .MuiTablePagination-menuItem\": {\n                                                            fontSize: \"12px\"\n                                                        }\n                                                    }\n                                                }\n                                            }}\n                                        />\n                                    </TableRow>\n                                </TableBody>\n                            ) : (\n                                <TableBody>\n                                    <TableRow>\n                                        <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\n                                            <Typography variant=\"h6\" paragraph>\n                                                Không tồn tại công việc\n                                            </Typography>\n\n                                            <Typography variant=\"body2\">\n                                                Không tìm thấy kết quả &nbsp;\n                                                <strong>&quot;{filterName}&quot;</strong>.\n                                            </Typography>\n                                        </TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            )}\n                        </Table>\n                    </TableContainer>\n                </Card>\n            </Container>\n        </>\n    );\n};\n\nexport default JobFromEvent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\Login.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\LoginUser.tsx",["663","664","665"],"// import React from \"react\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import { Button, CircularProgress, Typography } from \"@material-ui/core\";\n// import { Formik } from \"formik\";\n// import * as Yup from \"yup\";\n// import { Container, Drawer, Box, TextField } from \"@mui/material\";\n\n// import { useDispatch } from \"react-redux\";\n// import { loginUser } from \"redux/actions/user\";\n// import { Link } from \"react-router-dom\";\n// import { InputAdornment } from \"@mui/material\";\n// import PersonIcon from '@mui/icons-material/Person';\n// import PasswordIcon from '@mui/icons-material/Password';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     flexGrow: 1,\n//     position: \"absolute\",\n//     top: \"0\",\n//     left: \"0\",\n//     width: \"100%\",\n//     minHeight: \"100vh\",\n//   },\n//   btnLogin: {\n//     marginTop: theme.spacing(2),\n//     padding: theme.spacing(1, 2),\n//   },\n//   checkboxWrapper: {\n//     display: \"flex\",\n//     justifyContent: \"flex-start\",\n//     marginTop: theme.spacing(2),\n//   },\n\n//   textField: {\n//     margin: theme.spacing(2, 0),\n//     textAlign: 'left',\n//     fontSize: '13px',\n//     \"& .MuiInputBase-root\": {\n//       \"& fieldset\": {\n//         borderRadius: \"10px\",\n//       },\n//     },\n//   },\n\n// }));\n\n// interface IInitialValues {\n//   email: string;\n//   password: string;\n// }\n\n// const LoginUser: React.FC = (): JSX.Element => {\n//   const classes = useStyles();\n//   const dispatch = useDispatch();\n//   // const [checked, setChecked] = React.useState<boolean>(false);\n\n//   const initialValues: IInitialValues = {\n//     email: \"\",\n//     password: \"\",\n//   };\n\n//   const onHandleSubmit = (values: IInitialValues, { setSubmitting }: any) => {\n//     dispatch(loginUser(values, setSubmitting));\n//   };\n\n//   const validationSchema = Yup.object({\n//     email: Yup.string().required(\"Invalid username!\"),\n//     password: Yup.string().required(\"Invalid password!\"),\n//   });\n\n//   React.useEffect(() => {\n//     document.title = \"Đăng nhập | CTV\";\n//   }, []);\n\n//   return (\n\n//     <Box component={\"nav\"}\n//       color={\"black\"}\n//       display={\"flex\"}\n//     >\n//       <Box flexGrow={1} style={{ paddingRight: 360 }}>\n\n//       </Box>\n//       <Drawer\n//         anchor=\"right\"\n//         open\n//         variant=\"permanent\"\n//         style={{}}\n//         BackdropProps={{ style: { position: 'absolute' } }}\n//         PaperProps={{\n//           sx: {\n//             width: 400,\n//             bgcolor: 'background.default',\n//             borderLeftStyle: 'none',\n//           },\n//         }}\n//       >\n//         <Container style={{ maxWidth: 360, }}>\n//           <Box>\n//             <Box display={\"flex\"} flexDirection={'column'} justifyContent={'center'} style={{ backgroundColor: 'white', padding: '220px 0px 0px', borderRadius: '20px' }}>\n//               <Box display={\"flex\"} flexDirection={'column'} justifyContent={'center'} textAlign={'left'}>\n//                 <Typography style={{ fontWeight: \"500\", fontSize: \"20px\", margin: \"14px 0px\", letterSpacing: '0.6px', paddingBottom: '4px' }} >\n//                   Đăng nhập vào Cộng Tác Viên\n//                 </Typography>\n//               </Box>\n//               <Box display={'flex'} textAlign={'left'} flexDirection={'row'} style={{ fontSize: \"14px\", fontWeight: '380' }} >\n//                 <Box style={{ color: 'black', marginRight: '4px' }}>\n//                   Bạn là người mới ?\n//                 </Box>\n//                 <Box component={Link} to=\"/register\" style={{ color: 'black', textDecoration: \"none\", cursor: 'pointer' }} >\n//                   Tạo tài khoản\n//                 </Box>\n//               </Box>\n//               <Box textAlign={'center'}>\n//                 <Formik\n//                   initialValues={initialValues}\n//                   validationSchema={validationSchema}\n//                   onSubmit={onHandleSubmit}\n//                 >\n//                   {({ isSubmitting, handleSubmit, handleChange, handleBlur, values, errors, touched }) => (\n//                     <form noValidate onSubmit={handleSubmit}>\n//                       <Box style={{ margin: '30px 0px 0px 0px' }}>\n\n//                         <TextField\n//                           className={classes.textField}\n//                           fullWidth\n//                           variant={'outlined'}\n//                           name='email'\n//                           value={values.email}\n//                           onChange={handleChange}\n//                           onBlur={handleBlur}\n//                           placeholder='Nhập gmail'\n//                           InputProps={{\n//                             startAdornment: (\n//                               <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n//                                 <PersonIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n//                               </InputAdornment>\n//                             ),\n//                           }}\n//                           inputProps={{\n//                             style: {\n//                               fontSize: '12px',\n//                             }\n//                           }}\n//                           helperText={touched.email ? errors.email : \"\"}\n//                           error={touched.email ? Boolean(errors.email) : false}\n//                         />\n\n//                         <TextField\n//                           className={classes.textField}\n//                           fullWidth\n//                           style={{ paddingBottom: '30px' }}\n//                           variant={'outlined'}\n//                           type='password'\n//                           name='password'\n//                           value={values.password}\n//                           onChange={handleChange}\n//                           onBlur={handleBlur}\n//                           placeholder='Nhập mật khẩu'\n//                           InputProps={{\n//                             startAdornment: (\n//                               <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n//                                 <PasswordIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n//                               </InputAdornment>\n//                             )\n//                           }}\n//                           inputProps={{\n//                             style: {\n//                               fontSize: '12px',\n//                             }\n//                           }}\n//                           helperText={touched.password ? errors.password : \"\"}\n//                           error={touched.password ? Boolean(errors.password) : false}\n//                         />\n//                         <Box textAlign={'right'} style={{ fontSize: \"14px\", fontWeight: '380' }}>\n//                           <Box component={Link} to=\"/login\" style={{ color: 'black', cursor: 'pointer', paddingBottom: '4px' }}>\n//                             Quên mật khẩu?\n//                           </Box>\n//                         </Box>\n\n//                       </Box>\n//                       <Button\n//                         fullWidth\n//                         disableRipple\n//                         type='submit'\n//                         style={{ backgroundColor: 'rgb(33, 43, 54)', color: \"white\", borderRadius: 10, textTransform: 'capitalize', fontWeight: 'normal' }}\n//                         className={classes.btnLogin}\n//                         disabled={isSubmitting}\n//                       >\n//                         {isSubmitting ? <CircularProgress size='1rem' /> : \"Đăng Nhập\"}\n//                       </Button>\n//                     </form>\n//                   )}\n//                 </Formik>\n//               </Box>\n//             </Box>\n//           </Box>\n//         </Container>\n//       </Drawer>\n\n//     </Box>\n//   );\n// };\n\n// export default LoginUser;\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { Container, Typography, Drawer, Button, Box, TextField, CircularProgress } from '@mui/material';\n\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { styled } from '@mui/material/styles';\n\nimport { useDispatch } from \"react-redux\";\nimport { loginUser } from \"redux/actions/user\";\nimport { Link } from \"react-router-dom\";\nimport { InputAdornment } from \"@mui/material\";\nimport PersonIcon from '@mui/icons-material/Person';\nimport PasswordIcon from '@mui/icons-material/Password';\nimport { BoxInfor } from \"layouts/navigation/style\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    position: \"absolute\",\n    top: \"0\",\n    left: \"0\",\n    width: \"100%\",\n    minHeight: \"100vh\",\n  },\n  btnLogin: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(1, 2),\n  },\n  checkboxWrapper: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    marginTop: theme.spacing(2),\n  },\n\n  textField: {\n    margin: theme.spacing(2, 0),\n    textAlign: 'left',\n    fontSize: '13px',\n    \"& .MuiInputBase-root\": {\n      \"& fieldset\": {\n        borderRadius: \"10px\",\n      },\n    },\n  },\n\n}));\n\n\n\nconst StyledSection = styled('div')(({ theme }) => ({\n\n  maxWidth: 600,\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  backgroundColor: 'white'\n\n}));\n\nconst StyledRoot = styled('div')(({ theme }) => ({\n  [theme.breakpoints.up('md')]: {\n    display: 'flex',\n    padding: 0\n  },\n}));\n\nconst StyledContent = styled('div')(({ theme }) => ({\n  maxWidth: 800,\n  margin: 'auto',\n  minHeight: '100vh',\n  display: 'flex',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  padding: theme.spacing(12, 0),\n}));\n\ninterface IInitialValues {\n  email: string;\n  password: string;\n}\n\nconst LoginUser: React.FC = (): JSX.Element => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  // const [checked, setChecked] = React.useState<boolean>(false);\n\n  const initialValues: IInitialValues = {\n    email: \"\",\n    password: \"\",\n  };\n\n  const onHandleSubmit = (values: IInitialValues, { setSubmitting }: any) => {\n    dispatch(loginUser(values, setSubmitting));\n  };\n\n  const validationSchema = Yup.object({\n    email: Yup.string().required(\"Invalid username!\"),\n    password: Yup.string().required(\"Invalid password!\"),\n  });\n\n  React.useEffect(() => {\n    document.title = \"Đăng nhập | CTV\";\n  }, []);\n\n  return (\n\n\n    <StyledRoot>\n      {/* this is logo */}\n      {/* <Logo\n      sx={{\n        position: 'fixed',\n        top: { xs: 16, sm: 24, md: 40 },\n        left: { xs: 16, sm: 24, md: 40 },\n      }}\n    /> */}\n\n      <Container maxWidth=\"lg\">\n        <StyledContent>\n          <Typography style={{ fontWeight: \"700\", fontSize: \"40px\", marginBottom: \"20px\", letterSpacing: '0.8px', paddingBottom: '4px' }} >\n            Hi, welcome to CTV\n          </Typography>\n          <img src=\"/login.png\" />\n        </StyledContent>\n\n      </Container>\n\n      <StyledSection>\n\n        <Container >\n\n          <Box display={\"flex\"} flexDirection={'column'}\n            justifyContent={'center'}\n            style={{ backgroundColor: 'white', padding: '120px 0px 0px', borderRadius: '20px' }}\n          >\n            <Box display={\"flex\"} flexDirection={'column'} justifyContent={'center'} textAlign={'left'}>\n              <Typography style={{ fontWeight: \"700\", fontSize: \"20px\", margin: \"14px 0px\", letterSpacing: '0.6px', paddingBottom: '4px' }} >\n                Đăng nhập vào CTV\n              </Typography>\n            </Box>\n            <Box display={'flex'} textAlign={'left'} flexDirection={'row'} style={{ fontSize: \"14px\", fontWeight: '380' }} >\n              <Box style={{ color: 'black', marginRight: '4px' }}>\n                Bạn là người mới ?\n              </Box>\n              <Box component={Link} to=\"/register\"\n                style={{ color: 'rgb(84 219 154)', cursor: 'pointer' }}\n              >\n                Tạo tài khoản\n              </Box>\n            </Box>\n            <Box textAlign={'center'}>\n              <Formik\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={onHandleSubmit}\n              >\n                {({ isSubmitting, handleSubmit, handleChange, handleBlur, values, errors, touched }) => (\n                  <form noValidate onSubmit={handleSubmit}>\n                    <Box style={{ margin: '30px 0px 0px 0px' }}>\n\n                      <TextField\n                        className={classes.textField}\n                        fullWidth\n                        variant={'outlined'}\n                        name='email'\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        placeholder='Nhập gmail'\n                        InputProps={{\n                          startAdornment: (\n                            <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                              <PersonIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                            </InputAdornment>\n                          ),\n                        }}\n                        inputProps={{\n                          style: {\n                            fontSize: '12px',\n                          }\n                        }}\n                        helperText={touched.email ? errors.email : \"\"}\n                        error={touched.email ? Boolean(errors.email) : false}\n                      />\n\n                      <TextField\n                        className={classes.textField}\n                        fullWidth\n                        style={{ paddingBottom: '30px' }}\n                        variant={'outlined'}\n                        type='password'\n                        name='password'\n                        value={values.password}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        placeholder='Nhập mật khẩu'\n                        InputProps={{\n                          startAdornment: (\n                            <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                              <PasswordIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                            </InputAdornment>\n                          )\n                        }}\n                        inputProps={{\n                          style: {\n                            fontSize: '12px',\n                          }\n                        }}\n                        helperText={touched.password ? errors.password : \"\"}\n                        error={touched.password ? Boolean(errors.password) : false}\n                      />\n                      <Box textAlign={'right'} style={{ fontSize: \"14px\", fontWeight: '380' }}>\n                        <Box component={Link} to=\"/login\" style={{ color: 'black', cursor: 'pointer', paddingBottom: '4px' }}>\n                          Quên mật khẩu?\n                        </Box>\n                      </Box>\n\n                    </Box>\n                    <Button\n                      fullWidth\n                      disableRipple\n                      type='submit'\n                      style={{ backgroundColor: 'rgb(33, 43, 54)', color: \"white\", borderRadius: 10, textTransform: 'capitalize', fontWeight: 'normal' }}\n                      className={classes.btnLogin}\n                      disabled={isSubmitting}\n                    >\n                      {isSubmitting ? <CircularProgress size='1rem' /> : \"Đăng Nhập\"}\n                    </Button>\n                  </form>\n                )}\n              </Formik>\n            </Box>\n          </Box>\n\n        </Container>\n      </StyledSection>\n\n\n    </StyledRoot>\n  );\n};\n\nexport default LoginUser;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\Register.tsx",["666","667","668","669","670","671","672"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getDepartments } from \"redux/actions/user\";\nimport { IDepartment } from \"redux/types/department\";\n\nimport FormField from \"pages/auth/FormField\";\nimport { registerSManagerAdmin } from \"redux/actions/sManager\";\nimport { registerManagerAdmin } from \"redux/actions/Manager\";\nimport { FormControlLabel, RadioGroup, Typography, Grid, Button, CircularProgress } from \"@material-ui/core\";\nimport FormFieldDepartment from \"pages/auth/FormDepartment_Admin\";\n\nimport { Link } from 'react-router-dom';\nimport { Box, Container, FormControl, FormLabel, InputAdornment, MenuItem, Select, TextField, Radio } from \"@mui/material\";\nimport { Person } from \"@mui/icons-material\";\nimport { RootState } from \"redux/reducers\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    position: \"absolute\",\n    top: \"0\",\n    left: \"0\",\n    width: \"100%\",\n    minHeight: \"100vh\",\n  },\n  btnRegister: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(1, 2),\n  },\n  checkboxWrapper: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    marginTop: theme.spacing(2),\n  },\n  formControl: {\n    margin: theme.spacing(2, 0),\n    width: 300,\n  },\n  formLabel: {\n    marginBottom: theme.spacing(1.5),\n    textAlign: 'left',\n    fontSize: '13px',\n    borderRadius: 10\n  },\n  selectStyle: {\n    fontSize: '13px',\n    marginBottom: '28px',\n\n    \"& fieldset\": {\n      borderRadius: \"10px\",\n    },\n  },\n  textField: {\n    margin: theme.spacing(1.5, 0),\n    textAlign: 'left',\n    fontSize: '13px',\n    \"& .MuiInputBase-root\": {\n      \"& fieldset\": {\n        borderRadius: \"10px\",\n      },\n    },\n  },\n}));\n\ninterface IInitialValues {\n  username: string;\n  email: string;\n  password: string;\n  department: string;\n}\n\nconst Register: React.FC = (): JSX.Element => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [checked2, setChecked2] = React.useState(\"smanager\");\n  const [checked3, setChecked3] = React.useState(\"manager\");\n\n  const Department = useSelector((state: RootState) => state.admin);\n\n  React.useEffect(() => {\n    dispatch(getDepartments());\n  }, [dispatch]);\n\n\n  const initialValues: IInitialValues = {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    department: \"\",\n  };\n\n  const onHandleSubmit = (values: IInitialValues, { setSubmitting }: any) => {\n\n    if (checked2 === \"smanager\") {\n      dispatch(registerSManagerAdmin({ ...values, role: \"640cc3c229937ffacc4359f8\" }, setSubmitting));\n    } else if (checked3 === \"manager\") {\n      dispatch(registerManagerAdmin({ ...values, role: \"640cc3ca29937ffacc4359fa\" }, setSubmitting));\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChecked2(event.target.value);\n    setChecked3(event.target.value);\n  };\n\n  const validationSchema = Yup.object({\n    username: Yup.string().required(\"Invalid username!\"),\n    email: Yup.string().email(\"Invalid email!\").required(\"Invalid email!\"),\n    password: Yup.string().required(\"Invalid password!\"),\n  });\n\n  React.useEffect(() => {\n    document.title = \"Thêm tài khoản | CTV \";\n  }, []);\n\n  return (\n    <Container style={{ maxWidth: 600 }}>\n      <Box display={\"flex\"}\n        flexDirection={'column'}\n        justifyContent={'center'}\n        alignItems={'center'}\n        style={{ backgroundColor: 'white', padding: '40px 0px', borderRadius: '20px' }}>\n\n        <Typography style={{ fontWeight: \"bold\", fontSize: \"18px\", marginTop: \"5px\" }} >\n          Tạo Tài Khoản\n        </Typography>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={onHandleSubmit}\n        >\n          {({ isSubmitting, handleSubmit, values, handleChange, handleBlur, errors, touched }) => (\n            <form noValidate onSubmit={handleSubmit}>\n              <Box display={\"flex\"}\n                flexDirection={'column'}\n                justifyContent={'center'}\n                alignItems={'center'}\n                style={{ backgroundColor: 'white', padding: '40px 0px', borderRadius: '20px' }}>\n\n                {/* Email */}\n                <FormControl>\n                  <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", marginTop: \"5px\" }}>\n                    Email\n                  </FormLabel>\n                  <TextField\n                    style={{ width: 300, }}\n                    className={classes.textField}\n                    fullWidth\n                    variant={'outlined'}\n                    name='email'\n                    value={values.email}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    placeholder='Nhập Email'\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                          <Person style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                        </InputAdornment>\n                      ),\n                    }}\n                    inputProps={{\n                      style: {\n                        fontSize: '12px',\n                      }\n                    }}\n                    helperText={touched.email ? errors.email : \"\"}\n                    error={touched.email ? Boolean(errors.email) : false}\n                  />\n                </FormControl>\n\n\n\n                {/* Username */}\n                <FormControl>\n                  <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", marginTop: \"5px\" }}>\n                    Username\n                  </FormLabel>\n                  <TextField\n                    style={{ width: 300, }}\n                    className={classes.textField}\n                    fullWidth\n                    variant={'outlined'}\n                    name='username'\n                    value={values.username}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    placeholder='Nhập username'\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                          <Person style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                        </InputAdornment>\n                      ),\n                    }}\n                    inputProps={{\n                      style: {\n                        fontSize: '12px',\n                      }\n                    }}\n                    helperText={touched.username ? errors.username : \"\"}\n                    error={touched.username ? Boolean(errors.username) : false}\n                  />\n                </FormControl>\n\n                {/* password */}\n                <FormControl>\n                  <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", marginTop: \"5px\" }}>Password</FormLabel>\n                  <TextField\n                    style={{ width: 300, }}\n                    className={classes.textField}\n                    fullWidth\n                    variant={'outlined'}\n                    name='password'\n                    type=\"password\"\n                    value={values.password}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    placeholder='Nhập password'\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\n                          <Person style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\n                        </InputAdornment>\n                      ),\n                    }}\n                    inputProps={{\n                      style: {\n                        fontSize: '12px',\n                      }\n                    }}\n                    helperText={touched.password ? errors.password : \"\"}\n                    error={touched.password ? Boolean(errors.password) : false}\n                  />\n                </FormControl>\n\n\n\n                {/* <Select\n                name=\"nameDepartment\"\n                fullWidth\n                displayEmpty\n                variant={'outlined'}\n                className={classes.selectStyle}\n                value={values.nameDepartment}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                error={touched.nameDepartment ? Boolean(errors.nameDepartment) : false}\n                renderValue={(value) => value ? value : <em style={{ fontSize: '13px' }}>Vui lòng chọn khoa</em>}\n                MenuProps={{\n                  PaperProps: {\n                    style: {\n                      fontSize: 10,\n                    },\n                  },\n                }}\n              >\n                {departments?.map((department: any) => {\n                  return <MenuItem style={{ fontSize: '13px' }} value={department.nameDepartment} key={department._id}> {department.nameDepartment} </MenuItem>\n                })}\n              </Select> */}\n\n                <FormFieldDepartment isDepartmentCbb={true} />\n\n                <Box  display={\"flex\"} justifyContent={'center'}>\n                  <RadioGroup\n                    name=\"radio-buttons-group\"\n                    style={{ flexDirection: 'row', fontSize: '13px' }}\n                  >\n                    <FormControlLabel  value=\"smanager\" control={<Radio sx={{\n                      \"& svg\": {\n                        width: \"14px\",\n                        height: \"14px\"\n                      }\n                    }} onChange={handleChange} />} label={<Box fontSize={'13px'} style={{ padding: '3px' }} >Quản lý cấp cao</Box>}  />\n                    <FormControlLabel value=\"manager\" control={<Radio sx={{\n                      \"& svg\": {\n                        width: \"14px\",\n                        height: \"14px\"\n                      }\n                    }} onChange={handleChange} />} label={<Box fontSize={'13px'} style={{ padding: '3px' }} >Quản lý</Box>}  />\n                  </RadioGroup>\n                </Box>\n                <Box marginTop={2}>\n                  <Button\n                    type='submit'\n                    style={{\n                      color: \"rgb(33, 43, 54)\",\n                      height: \"34px\",\n                      width: \"120px\",\n                      fontSize: \"12px\",\n                      borderRadius: \"4px\",\n                      fontWeight: 500,\n                      textTransform: \"capitalize\",\n                      border: '1px solid rgb(33, 43, 54)',\n                      marginRight: 10\n                    }}\n                    disabled={isSubmitting}\n                  >\n                    {isSubmitting ? <CircularProgress size='1rem' /> : \"Đăng Ký\"}\n                  </Button>\n\n                  <Link to=\"/users\">\n                    <Button style={{\n                      color: \"#FF6969\",\n                      height: \"34px\",\n                      width: \"120px\",\n                      fontSize: \"12px\",\n                      fontWeight: 500,\n                      borderRadius: \"4px\",\n                      textTransform: \"capitalize\",\n                      border: '1px solid #FF6969',\n\n                    }}\n                    >Quay lại</Button>\n                  </Link>\n                </Box>\n\n\n\n              </Box>\n            </form>\n          )}\n        </Formik>\n      </Box>\n\n    </Container >\n\n  );\n};\n\nexport default Register;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\RegisterUser.tsx",["673","674","675","676","677"],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\guest\\DetailGuest1.tsx",["678","679","680","681","682","683","684"],"import * as React from \"react\";\nimport { styled, makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEvents, getDepartments } from \"redux/actions/user\";\nimport { RootState } from \"redux/reducers\";\nimport { Box, OutlinedInput, InputAdornment, TextField, Toolbar, AppBar, Typography, Avatar, ListItemIcon, Divider, MenuItem as MenuItemDepartment, IconButton, Stack, Popover, MenuItem } from '@mui/material';\n\nimport { StyledMenuItem } from '../../layouts/navigation/style'\nimport { BoxSpan } from '../../layouts/navigation/style'\n\nimport { IEvent } from \"redux/types/event\";\nimport { IDepartment } from \"redux/types/department\";\n\nimport FeedGuest from \"pages/guest/FeedGuest\";\nimport FeedDetailGuest from \"pages/guest/FeedDetailGuest\";\n\nimport SearchIcon from '@mui/icons-material/Search';\nimport {  Person, PersonAdd } from '@mui/icons-material';\n\nimport { Link, useParams } from \"react-router-dom\";\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n    width: 240,\n    '& fieldset': {\n        borderWidth: `1px !important`,\n        // borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n        borderColor: '#rgba(0, 0, 0, 0.87)'\n    },\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    textfield: {\n        '& .MuiSelect-select': {\n            color: 'black', fontSize: '12px'\n        },\n        '& .MuiSvgIcon-root': {\n            fontSize: '20px', paddingRight: '2px'\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderRadius: '20px'\n            },\n            '&.Mui-focused fieldset': {\n                border: \"1px solid black\",\n            }\n        },\n        '& label.Mui-focused': {\n            color: 'black',\n        },\n        '& fieldset': {\n            borderRadius: '30px'\n        },\n\n    },\n    hoverDetail: {\n        '&: hover': {\n            color: 'green',\n        },\n    },\n}))\n\nconst StyledRoot = styled(AppBar)(() => ({\n    boxShadow: 'none',\n    width: '100%',\n    backgroundColor: 'white',\n    fontWeight: 'bold',\n}));\ninterface RouteParams {\n    id: string\n}\nconst DetailGuest: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const params = useParams<RouteParams>();\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n    const openUser = Boolean(anchorElUser);\n    const handleClickUser = (event: any) => {\n        setAnchorElUser(event.currentTarget);\n    };\n    const handleCloseUser = () => {\n        setAnchorElUser(null);\n    };\n    const classes = useStyles();\n    const [filterName, setFilterName] = React.useState('');\n\n    const [filterNameDepartment, setFilterNameDepartment] = React.useState('');\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const [eventDetails, setEventDetails] = React.useState<IEvent[]>([]);\n    const [departments, setDepartments] = React.useState<IDepartment[]>([]);\n    const user = useSelector((state: RootState) => state.user);\n\n    React.useEffect(() => {\n        dispatch(getEvents());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        dispatch(getDepartments());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() =>\n            user?.events?.filter((event: any) =>\n                event.nameEvent\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setEventDetails(() =>\n            user?.events?.filter((event: any) =>\n                event._id == params.id\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setDepartments(() => user?.departments?.filter((department: any) => department.nameDepartment));\n    }, [user]);\n\n    const myInputProps_TenKhoa = {\n        startAdornment: <Box sx={{ fontSize: '12px', position: \"start\" }}\n        > Khoa</Box>,\n        style: {\n            height: '48px',\n        }\n    }\n\n    const handleFilterByName = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase()) || event.location.toLowerCase().startsWith(keyword.toLowerCase()) || event.job.some((job: any) => job.nameJob.toLowerCase().startsWith(keyword.toLowerCase()));\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.nameEvent || event.location || event.job.some((job: any) => job.nameJob)));\n        }\n\n        setFilterName(keyword);\n    };\n\n    const handleFilterByNameDepartment = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) || event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) && event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.departmentEvent.nameDepartment));\n        }\n\n        setFilterNameDepartment(keyword);\n    };\n\n    React.useEffect(() => {\n        document.title = \"Trang Chủ\";\n    }, []);\n\n    return (\n        <Box>\n            <Box>\n                <StyledRoot style={{ boxShadow: \"none\", overflowX: \"hidden\" }}>\n                    <Toolbar>\n                        <Link style={{ textDecoration: 'none' }} to={'/'}>\n                            <img src=\"/hutech-logo.ico\" style={{ height: \"56px\", width: \"50px\" }}></img>\n                        </Link>\n                        <Box textAlign={\"center\"} sx={{ flexGrow: 1 }}>\n                            <StyledSearch\n                                style={{ borderRadius: '20px', fontSize: '13px', height: \"48px\", marginRight: '16px' }}\n                                value={filterName}\n                                onChange={handleFilterByName}\n                                placeholder=\"Tìm kiếm công việc...\"\n                                startAdornment={\n                                    <InputAdornment position=\"start\" style={{ paddingLeft: 1.3 }}>\n                                        <SearchIcon style={{ width: '16px' }} sx={{ color: 'rgba(0, 0, 0, 0.87)' }} />\n                                    </InputAdornment>\n                                }\n                            />\n                            <TextField\n                                id=\"filled-select-currency\"\n                                select\n                                value={filterNameDepartment}\n                                onChange={handleFilterByNameDepartment}\n                                variant=\"outlined\"\n                                InputProps={myInputProps_TenKhoa}\n                                style={{ width: 240 }}\n                                className={classes.textfield}\n                            >\n                                {departments.map((department) => (\n                                    <MenuItemDepartment key={department._id}\n                                        value={department.nameDepartment}\n                                        style={{ fontSize: \"12px\" }}\n                                    >\n                                        {department.nameDepartment}\n                                    </MenuItemDepartment>\n                                ))}\n                            </TextField>\n                        </Box>\n                        {/* <Box>\n                            <Notifications style={{ color: 'black' }} />\n                        </Box> */}\n                        <Stack\n                            direction=\"row\"\n                            alignItems=\"center\"\n                            spacing={{\n                                xs: 0.5,\n                                sm: 1,\n                            }}\n                            sx={{ margin: 3, color: 'black' }}\n                        >\n                            <Box sx={{\n                                display: 'flex', alignItems: 'center', textAlign: 'center'\n                            }}>\n                                <IconButton onClick={(event) => handleClickUser(event)}\n                                    sx={{\n                                        p: 0,\n\n                                    }}>\n                                    <Person style={{ color: \"black\" }} />\n                                </IconButton>\n\n                                <Popover\n                                    open={openUser}\n                                    anchorEl={anchorElUser}\n                                    onClose={handleCloseUser}\n                                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                                    transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                                    sx={{ marginLeft: 1 }}\n                                    PaperProps={{\n                                        style: {\n                                            borderRadius: 20,\n                                            boxShadow: 'rgba(145, 158, 171, 0.24) 0px 0px 2px 0px, rgba(145, 158, 171, 0.24) -20px 20px 40px -4px',\n                                        },\n                                        sx: {\n                                            p: 1,\n                                            width: 220,\n                                            overflowX: 'unset',\n                                            overflowY: 'unset',\n                                            '& .MuiMenuItem-root': {\n                                                px: 1,\n                                                py: 1,\n                                                typography: 'body2',\n                                                borderRadius: 1,\n                                                justifyContent: 'left'\n                                            },\n                                            '& .MuiAvatar-root': {\n                                                width: 32,\n                                                height: 32,\n                                                ml: -0.5,\n                                                mt: 1,\n                                                mr: 1,\n                                            },\n                                        },\n                                    }}\n                                >\n\n                                    <BoxSpan />\n                                    <Stack sx={{ p: 0.5 }} >\n                                    <StyledMenuItem component={Link} to={'/loginuser'} >\n                                            <Avatar>G</Avatar>\n                                            <Typography style={{ color: \"black\" }}>Tài Khoản</Typography>\n                                        </StyledMenuItem>\n\n                                        <Divider />\n\n                                        <StyledMenuItem component={Link} to={'/register'} >\n                                            <ListItemIcon>\n                                                <PersonAdd fontSize=\"small\" />\n                                            </ListItemIcon>\n                                            <Typography style={{ color: \"black\" }}>Đăng Ký</Typography>\n                                        </StyledMenuItem>\n                                    </Stack>\n\n                                </Popover>\n                            </Box>\n                        </Stack>\n                    </Toolbar>\n                </StyledRoot>\n            </Box>\n            <Box style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center'\n            }}>\n                <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n                    {events && events.length > 0 ? (\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }}>\n                            <Box style={{ paddingLeft: '20px', top: 100, zIndex: 10, }}>\n                                {events.map((event: any) =>\n                                    <Box>\n                                        <Link style={{ textDecoration: \"none\" }} to={`/guestEvent2/${event._id}`}>\n                                            <FeedGuest event={event} key={event._id} />\n                                        </Link>\n                                    </Box>\n                                )}\n                            </Box>\n                            <Box style={{ display: 'flex', paddingLeft: '20px', }}>\n                                {eventDetails.map((event: any) =>\n                                    <Box style={{\n                                        width: 500,\n                                        height: 500,\n                                        borderRadius: '12px',\n                                        position: 'sticky',\n                                        zIndex: 10,\n                                        top: \"100px\",\n                                    }}\n                                    >\n                                        <FeedDetailGuest event={event} key={event._id} />\n                                    </Box>\n                                )}\n                            </Box>\n                        </Box>\n                    ) : (\n                        <Box style={{ margin: \"70px 0px\" }}>\n                            <Box>\n                                <img style={{ width: \"400px\", height: \"410px\", display: \"flex\", margin: \"auto\" }} src=\"/not-found.png\" />\n                            </Box>\n                            <Box>\n                                <Typography style={{ fontSize: \"45px\", fontWeight: \"bold\" }}>\n                                    Không Tồn Tại Sự Kiện\n                                </Typography>\n                            </Box>\n                        </Box>\n                    )}\n\n                </Box >\n            </Box>\n        </Box >\n    );\n};\n\nexport default DetailGuest;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\guest\\DetailGuest2.tsx",["685","686","687","688","689","690","691"],"import * as React from \"react\";\nimport { styled, makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEvents, getDepartments } from \"redux/actions/user\";\nimport { RootState } from \"redux/reducers\";\nimport { Box, OutlinedInput, InputAdornment, TextField, Toolbar, AppBar, Typography, Avatar, ListItemIcon, Divider, MenuItem as MenuItemDepartment, IconButton, Stack, Popover, MenuItem } from '@mui/material';\n\nimport { StyledMenuItem } from '../../layouts/navigation/style'\nimport { BoxSpan } from '../../layouts/navigation/style'\n\nimport { IEvent } from \"redux/types/event\";\nimport { IDepartment } from \"redux/types/department\";\n\nimport FeedGuest from \"pages/guest/FeedGuest\";\nimport FeedDetailGuest from \"pages/guest/FeedDetailGuest\";\n\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Person, PersonAdd } from '@mui/icons-material';\n\nimport { Link, useParams } from \"react-router-dom\";\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n    width: 240,\n    '& fieldset': {\n        borderWidth: `1px !important`,\n        // borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n        borderColor: '#rgba(0, 0, 0, 0.87)'\n    },\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    textfield: {\n        '& .MuiSelect-select': {\n            color: 'black', fontSize: '12px'\n        },\n        '& .MuiSvgIcon-root': {\n            fontSize: '20px', paddingRight: '2px'\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderRadius: '20px'\n            },\n            '&.Mui-focused fieldset': {\n                border: \"1px solid black\",\n            }\n        },\n        '& label.Mui-focused': {\n            color: 'black',\n        },\n        '& fieldset': {\n            borderRadius: '30px'\n        },\n\n    },\n    hoverDetail: {\n        '&: hover': {\n            color: 'green',\n        },\n    },\n}))\n\nconst StyledRoot = styled(AppBar)(() => ({\n    boxShadow: 'none',\n    width: '100%',\n    backgroundColor: 'white',\n    fontWeight: 'bold',\n}));\ninterface RouteParams {\n    id: string\n}\nconst DetailGuest: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const params = useParams<RouteParams>();\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n    const openUser = Boolean(anchorElUser);\n    const handleClickUser = (event: any) => {\n        setAnchorElUser(event.currentTarget);\n    };\n    const handleCloseUser = () => {\n        setAnchorElUser(null);\n    };\n    const classes = useStyles();\n    const [filterName, setFilterName] = React.useState('');\n\n    const [filterNameDepartment, setFilterNameDepartment] = React.useState('');\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const [eventDetails, setEventDetails] = React.useState<IEvent[]>([]);\n    const [departments, setDepartments] = React.useState<IDepartment[]>([]);\n    const user = useSelector((state: RootState) => state.user);\n\n    React.useEffect(() => {\n        dispatch(getEvents());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        dispatch(getDepartments());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() =>\n            user?.events?.filter((event: any) =>\n                event.nameEvent\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setEventDetails(() =>\n            user?.events?.filter((event: any) =>\n                event._id == params.id\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setDepartments(() => user?.departments?.filter((department: any) => department.nameDepartment));\n    }, [user]);\n\n    const myInputProps_TenKhoa = {\n        startAdornment: <Box sx={{ fontSize: '12px', position: \"start\" }}\n        > Khoa</Box>,\n        style: {\n            height: '48px',\n        }\n    }\n\n    const handleFilterByName = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase()) || event.location.toLowerCase().startsWith(keyword.toLowerCase()) || event.job.some((job: any) => job.nameJob.toLowerCase().startsWith(keyword.toLowerCase()));\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.nameEvent || event.location || event.job.some((job: any) => job.nameJob)));\n        }\n\n        setFilterName(keyword);\n    };\n\n    const handleFilterByNameDepartment = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) || event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) && event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.departmentEvent.nameDepartment));\n        }\n\n        setFilterNameDepartment(keyword);\n    };\n\n    React.useEffect(() => {\n        document.title = \"Trang Chủ | CTV\";\n    }, []);\n\n    return (\n        <Box>\n            <Box>\n                <StyledRoot style={{ boxShadow: \"none\", overflowX: \"hidden\" }}>\n                    <Toolbar>\n                        <Link style={{ textDecoration: 'none' }} to={'/'}>\n                            <img src=\"/hutech-logo.ico\" style={{ height: \"56px\", width: \"50px\" }}></img>\n                        </Link>\n                        <Box textAlign={\"center\"} sx={{ flexGrow: 1 }}>\n                            <StyledSearch\n                                style={{ borderRadius: '20px', fontSize: '13px', height: \"48px\", marginRight: '16px' }}\n                                value={filterName}\n                                onChange={handleFilterByName}\n                                placeholder=\"Tìm kiếm công việc...\"\n                                startAdornment={\n                                    <InputAdornment position=\"start\" style={{ paddingLeft: 1.3 }}>\n                                        <SearchIcon style={{ width: '16px' }} sx={{ color: 'rgba(0, 0, 0, 0.87)' }} />\n                                    </InputAdornment>\n                                }\n                            />\n                            <TextField\n                                id=\"filled-select-currency\"\n                                select\n                                value={filterNameDepartment}\n                                onChange={handleFilterByNameDepartment}\n                                variant=\"outlined\"\n                                InputProps={myInputProps_TenKhoa}\n                                style={{ width: 240 }}\n                                className={classes.textfield}\n                            >\n                                {departments.map((department) => (\n                                    <MenuItemDepartment key={department._id}\n                                        value={department.nameDepartment}\n                                        style={{ fontSize: \"12px\" }}\n                                    >\n                                        {department.nameDepartment}\n                                    </MenuItemDepartment>\n                                ))}\n                            </TextField>\n                        </Box>\n                        {/* <Box>\n                            <Notifications style={{ color: 'black' }} />\n                        </Box> */}\n                        <Stack\n                            direction=\"row\"\n                            alignItems=\"center\"\n                            spacing={{\n                                xs: 0.5,\n                                sm: 1,\n                            }}\n                            sx={{ margin: 3, color: 'black' }}\n                        >\n                            <Box sx={{\n                                display: 'flex', alignItems: 'center', textAlign: 'center'\n                            }}>\n                                <IconButton onClick={(event) => handleClickUser(event)}\n                                    sx={{\n                                        p: 0,\n\n                                    }}>\n                                    <Person style={{ color: \"black\" }} />\n                                </IconButton>\n\n                                <Popover\n                                    open={openUser}\n                                    anchorEl={anchorElUser}\n                                    onClose={handleCloseUser}\n                                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                                    transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                                    sx={{ marginLeft: 1 }}\n                                    PaperProps={{\n                                        style: {\n                                            borderRadius: 20,\n                                            boxShadow: 'rgba(145, 158, 171, 0.24) 0px 0px 2px 0px, rgba(145, 158, 171, 0.24) -20px 20px 40px -4px',\n                                        },\n                                        sx: {\n                                            p: 1,\n                                            width: 220,\n                                            overflowX: 'unset',\n                                            overflowY: 'unset',\n                                            '& .MuiMenuItem-root': {\n                                                px: 1,\n                                                py: 1,\n                                                typography: 'body2',\n                                                borderRadius: 1,\n                                                justifyContent: 'left'\n                                            },\n                                            '& .MuiAvatar-root': {\n                                                width: 32,\n                                                height: 32,\n                                                ml: -0.5,\n                                                mt: 1,\n                                                mr: 1,\n                                            },\n                                        },\n                                    }}\n                                >\n\n                                    <BoxSpan />\n                                    <Stack sx={{ p: 0.5 }} >\n                                        <StyledMenuItem component={Link} to={'/loginuser'} >\n                                            <Avatar>G</Avatar>\n                                            <Typography style={{ color: \"black\" }}>Tài Khoản</Typography>\n                                        </StyledMenuItem>\n\n                                        <Divider />\n\n                                        <StyledMenuItem component={Link} to={'/register'} >\n                                            <ListItemIcon>\n                                                <PersonAdd fontSize=\"small\" />\n                                            </ListItemIcon>\n                                            <Typography style={{ color: \"black\" }}>Đăng Ký</Typography>\n                                        </StyledMenuItem>\n                                    </Stack>\n\n                                </Popover>\n                            </Box>\n                        </Stack>\n                    </Toolbar>\n                </StyledRoot>\n            </Box>\n            <Box style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center'\n            }}>\n                <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n                    {events && events.length > 0 ? (\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }}>\n                            <Box style={{ paddingLeft: '20px', top: 100, zIndex: 10, }}>\n                                {events.map((event: any) =>\n                                    <Box>\n                                        <Link style={{ textDecoration: \"none\" }} to={`/guestEvent1/${event._id}`}>\n                                            <FeedGuest event={event} key={event._id} />\n                                        </Link>\n                                    </Box>\n                                )}\n                            </Box>\n                            <Box style={{ display: 'flex', paddingLeft: '20px', }}>\n                                {eventDetails.map((event: any) =>\n                                    <Box style={{\n                                        width: 500,\n                                        height: 500,\n                                        borderRadius: '12px',\n                                        position: 'sticky',\n                                        zIndex: 10,\n                                        top: \"100px\",\n                                    }}\n                                    >\n                                        <FeedDetailGuest event={event} key={event._id} />\n                                    </Box>\n                                )}\n                            </Box>\n                        </Box>\n                    ) : (\n                        <Box style={{ margin: \"70px 0px\" }}>\n                            <Box>\n                                <img style={{ width: \"400px\", height: \"410px\", display: \"flex\", margin: \"auto\" }} src=\"/not-found.png\" />\n                            </Box>\n                            <Box>\n                                <Typography style={{ fontSize: \"45px\", fontWeight: \"bold\" }}>\n                                    Không Tồn Tại Sự Kiện\n                                </Typography>\n                            </Box>\n                        </Box>\n                    )}\n\n                </Box >\n            </Box>\n        </Box >\n    );\n};\n\nexport default DetailGuest;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\guest\\Guest.tsx",["692","693","694","695","696","697","698","699","700","701","702","703","704","705","706"],"import * as React from \"react\";\nimport { styled, makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEvents, getDepartments } from \"redux/actions/user\";\nimport { RootState } from \"redux/reducers\";\nimport { Button, AppBar, Box, Toolbar, Typography, InputAdornment, OutlinedInput, IconButton, TextField } from '@mui/material';\n\nimport { MenuItem as MenuItemDepartment } from \"@material-ui/core\"\nimport { StyledMenuItem } from '../../layouts/navigation/style'\nimport { BoxSpan } from '../../layouts/navigation/style'\n\nimport { IEvent } from \"redux/types/event\";\nimport { IDepartment } from \"redux/types/department\";\n\nimport FeedGuest from \"pages/guest/FeedGuest\";\nimport FeedDetailGuest from \"pages/guest/FeedDetailGuest\";\n\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Person, PersonAdd } from '@mui/icons-material';\n\nimport { Link } from \"react-router-dom\";\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n    width: 240,\n    '& fieldset': {\n        borderWidth: `1px !important`,\n        // borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n        borderColor: '#rgba(0, 0, 0, 0.87)'\n    },\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    textfield: {\n        '& .MuiSelect-select': {\n            color: 'black', fontSize: '12px'\n        },\n        '& .MuiSvgIcon-root': {\n            fontSize: '20px', paddingRight: '2px'\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderRadius: '20px'\n            },\n            '&.Mui-focused fieldset': {\n                border: \"1px solid black\",\n            }\n        },\n        '& label.Mui-focused': {\n            color: 'black',\n        },\n        '& fieldset': {\n            borderRadius: '30px'\n        },\n\n    },\n    hoverDetail: {\n        '&: hover': {\n            color: 'green',\n        },\n    },\n}))\n\nconst StyledRoot = styled(AppBar)(() => ({\n    boxShadow: 'none',\n    width: '100%',\n    backgroundColor: 'white',\n    fontWeight: 'bold',\n}));\n\nconst Content: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n    const openUser = Boolean(anchorElUser);\n    const handleClickUser = (event: any) => {\n        setAnchorElUser(event.currentTarget);\n    };\n    const handleCloseUser = () => {\n        setAnchorElUser(null);\n    };\n    const classes = useStyles();\n    const [filterName, setFilterName] = React.useState('');\n\n    const [filterNameDepartment, setFilterNameDepartment] = React.useState('');\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const [eventDetails, setEventDetails] = React.useState<IEvent[]>([]);\n    const [departments, setDepartments] = React.useState<IDepartment[]>([]);\n    const user = useSelector((state: RootState) => state.user);\n\n    React.useEffect(() => {\n        dispatch(getEvents());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        dispatch(getDepartments());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() =>\n            user?.events?.filter((event: any) =>\n                event.nameEvent\n            ));\n    }, [user]);\n    const findIndexEvent = user.events.map((event: any) => event.nameEvent)\n    React.useEffect(() => {\n        setEventDetails(() =>\n            user?.events?.filter((event: any) =>\n                event.nameEvent == findIndexEvent[0]\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setDepartments(() => user?.departments?.filter((department: any) => department.nameDepartment));\n    }, [user]);\n\n    const myInputProps_TenKhoa = {\n        startAdornment: <Box style={{ fontSize: '12px' }}\n        > Khoa</Box>,\n        style: {\n            height: '48px',\n        }\n    }\n\n    const handleFilterByName = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase()) || event.location.toLowerCase().startsWith(keyword.toLowerCase()) || event.job.some((job: any) => job.nameJob.toLowerCase().startsWith(keyword.toLowerCase()));\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.nameEvent || event.location || event.job.some((job: any) => job.nameJob)));\n        }\n\n        setFilterName(keyword);\n    };\n\n    const handleFilterByNameDepartment = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) || event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) && event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.departmentEvent.nameDepartment));\n        }\n\n        setFilterNameDepartment(keyword);\n    };\n\n    React.useEffect(() => {\n        document.title = \"Trang Chủ\";\n    }, []);\n\n    return (\n        <Box>\n            <Box>\n                <StyledRoot style={{ boxShadow: \"none\", overflowX: \"hidden\" }}>\n                    <Toolbar>\n                        <Link style={{ textDecoration: 'none' }} to={'/'}>\n                            <img src=\"/hutech-logo.ico\" style={{ height: \"56px\", width: \"50px\" }}></img>\n                        </Link>\n                        <Box textAlign={\"center\"} sx={{ flexGrow: 1 }}>\n                            <StyledSearch\n                                style={{ borderRadius: '20px', fontSize: '13px', height: \"48px\", marginRight: '16px' }}\n                                value={filterName}\n                                onChange={handleFilterByName}\n                                placeholder=\"Tìm kiếm công việc...\"\n                                startAdornment={\n                                    <InputAdornment position=\"start\" style={{ paddingLeft: 1.3 }}>\n                                        <SearchIcon style={{ width: '16px' }} sx={{ color: 'rgba(0, 0, 0, 0.87)' }} />\n                                    </InputAdornment>\n                                }\n                            />\n                            <TextField\n                                id=\"filled-select-currency\"\n                                select\n                                value={filterNameDepartment}\n                                onChange={handleFilterByNameDepartment}\n                                variant=\"outlined\"\n                                InputProps={myInputProps_TenKhoa}\n                                style={{ width: 240 }}\n                                className={classes.textfield}\n                            >\n                                {departments.map((department) => (\n                                    <MenuItemDepartment key={department._id}\n                                        value={department.nameDepartment}\n                                        style={{ fontSize: \"12px\" }}\n                                    >\n                                        {department.nameDepartment}\n                                    </MenuItemDepartment>\n                                ))}\n                            </TextField>\n                        </Box>\n                        {/* <Box>\n                            <Notifications style={{ color: 'black' }} />\n                        </Box> */}\n                        <Box\n                            style={{ textDecoration:\"none\", color:\"#212B36\", marginRight:14, fontSize: 14 }}\n                            component={Link} to={\"/loginuser\"}\n                        >\n                           Đăng nhập\n                        </Box>\n                        <Box\n                            style={{ backgroundColor: 'rgb(33, 43, 54)', color: \"white\" , fontSize: 13, fontWeight:\"400\", borderRadius: 4, textDecoration:\"none\", padding:6.5 }}\n                            component={Link} to={\"/register\"}\n                        >\n                           Đăng ký\n                        </Box>\n                    </Toolbar>\n                </StyledRoot>\n            </Box>\n            <Box style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center'\n            }}>\n                <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n                    {events && events.length > 0 ? (\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }}>\n                            <Box style={{ paddingLeft: '20px', top: 100, zIndex: 10, }}>\n                                {events.map((event: any) =>\n                                    <Box>\n                                        <Link style={{ textDecoration: \"none\" }} to={`/guestEvent1/${event._id}`}>\n                                            <FeedGuest event={event} key={event._id} />\n                                        </Link>\n                                    </Box>\n                                )}\n                            </Box>\n                            <Box style={{ display: 'flex', paddingLeft: '20px', }}>\n                                {eventDetails.map((event: any) =>\n                                    <Box key={event._id} style={{\n                                        width: 500,\n                                        height: 500,\n                                        borderRadius: '12px',\n                                        position: 'sticky',\n                                        zIndex: 10,\n                                        top: \"100px\",\n                                    }}\n                                    >\n                                        <FeedDetailGuest event={event} key={event._id} />\n                                    </Box>\n                                )}\n                            </Box>\n                        </Box>\n                    ) : (\n                        <Box style={{ margin: \"70px 0px\" }}>\n                            <Box>\n                                <img style={{ width: \"400px\", display: \"flex\", margin: \"auto\" }} src=\"/not-found.png\" />\n                            </Box>\n                            <Box>\n                                <Typography style={{ fontSize: \"45px\", fontWeight: \"bold\" }}>\n                                    Không Tồn Tại Sự Kiện\n                                </Typography>\n                            </Box>\n                        </Box>\n                    )}\n\n                </Box >\n            </Box>\n        </Box >\n    );\n};\n\nexport default Content;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\CreateEvent.tsx",["707"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, CircularProgress, FormControl, FormLabel, TextField, Accordion, Box, Typography, Container } from \"@mui/material\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { createEvent } from \"redux/actions/Manager\";\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    accordion: {\n        marginBottom: theme.spacing(3),\n        padding: theme.spacing(1),\n    },\n    formLabel: {\n        fontWeight: \"bold\",\n        fontSize: \"14px\",\n        marginTop: \"5px\"\n    },\n    textField: {\n        margin: theme.spacing(1.5, 0),\n        textAlign: 'left',\n        fontSize: '13px',\n        \"& .MuiInputBase-root\": {\n            \"& fieldset\": {\n                borderRadius: \"10px\",\n            },\n        },\n    },\n}));\n\ntype Props = {\n    event: any;\n};\n\ninterface IInitialValues {\n    nameEvent: string;\n    location: string;\n    dayStart: string;\n    dayEnd: string;\n    image: string;\n    contentEvent: string;\n    ggSheet: string;\n}\n\nconst CreateEvent: React.FC<Props> = ({ event }): JSX.Element => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const initialValues: IInitialValues = {\n        nameEvent: event?.nameEvent ?? \"\",\n        location: event?.location ?? \"\",\n        dayStart: event?.dayStart ?? \"\",\n        dayEnd: event?.dayEnd ?? \"\",\n        image: event?.image ?? \"\",\n        contentEvent: event?.contentEvent ?? \"\",\n        ggSheet: event?.ggSheet ?? \"\",\n    };\n\n\n    // const onHandleSubmit = (\n    //     values: IInitialValues,\n    //     { setSubmitting }: any\n    // ): Promise<void> =>\n    //     dispatch<any>(createEvent(values, setSubmitting));\n\n    const validationSchema = Yup.object({\n        nameEvent: Yup.string().required(\"required!\"),\n        location: Yup.string().required(\"required!\"),\n        dayStart: Yup.string().required(\"required!\"),\n        dayEnd: Yup.string().required(\"required!\"),\n        ggSheet: Yup.string().required(\"required!\"),\n        contentEvent: Yup.string().required(\"required!\"),\n    });\n\n    return (\n        <Container style={{ maxWidth: 600 }}>\n            <Formik\n                enableReinitialize\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={(values: any, { setSubmitting }) => {\n                    let formData = new FormData();\n                    formData.append(\"nameEvent\", values.nameEvent);\n                    formData.append(\"location\", values.location);\n                    formData.append(\"dayStart\", values.dayStart);\n                    formData.append(\"dayEnd\", values.dayEnd);\n                    formData.append(\"image\", values.image);\n                    formData.append(\"contentEvent\", values.contentEvent);\n                    formData.append(\"ggSheet\", values.ggSheet);\n                    dispatch(createEvent(formData, setSubmitting));\n                }}\n            >\n                {({ values, handleChange, handleBlur, errors, touched, setFieldValue, isSubmitting, handleSubmit }) => (\n                    <form noValidate onSubmit={handleSubmit} encType=\"multipart/form-data\">\n                        <Box display={\"flex\"}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                            alignItems={'center'}\n                            style={{ backgroundColor: 'white', padding: '40px 0px', borderRadius: '20px' }}>\n                            <Typography style={{ fontWeight: \"bold\", fontSize: \"18px\", margin: 20 }} >\n                                Thêm sự kiện\n                            </Typography>\n                            <FormControl>\n                                <FormLabel classes={{ root: classes.formLabel }}>Tên sự kiện</FormLabel>\n                                <TextField\n                                    style={{ width: 300 }}\n                                    className={classes.textField}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    name='nameEvent'\n                                    value={values.nameEvent}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập tên sự kiện'\n                                    helperText={touched.nameEvent ? errors.nameEvent : \"\"}\n                                    error={touched.nameEvent ? Boolean(errors.nameEvent) : false}\n                                />\n                            </FormControl>\n                            <FormControl>\n                                <FormLabel classes={{ root: classes.formLabel }}>Địa điểm tổ chức</FormLabel>\n                                <TextField\n                                    style={{ width: 300 }}\n                                    className={classes.textField}\n                                    fullWidth\n                                    multiline\n                                    variant=\"outlined\"\n                                    name='location'\n                                    value={values.location}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập địa điểm tổ chức'\n                                    helperText={touched.location ? errors.location : \"\"}\n                                    error={touched.location ? Boolean(errors.location) : false}\n                                />\n                            </FormControl>\n                            <FormControl>\n                                <FormLabel classes={{ root: classes.formLabel }}>Ngày giờ bắt đầu</FormLabel>\n                                <TextField\n                                    style={{ width: 300 }}\n                                    className={classes.textField}\n                                    fullWidth\n                                    multiline\n                                    variant=\"outlined\"\n                                    name='dayStart'\n                                    value={values.dayStart}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập ngày giờ bắt đầu'\n                                    helperText={touched.dayStart ? errors.dayStart : \"\"}\n                                    error={touched.dayStart ? Boolean(errors.dayStart) : false}\n                                />\n                            </FormControl>\n                            <FormControl>\n                                <FormLabel classes={{ root: classes.formLabel }}>Ngày giờ kết thúc</FormLabel>\n                                <TextField\n                                    style={{ width: 300 }}\n                                    className={classes.textField}\n                                    fullWidth\n                                    multiline\n                                    variant=\"outlined\"\n                                    name='dayEnd'\n                                    value={values.dayEnd}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập ngày giờ kết thúc'\n                                    helperText={touched.dayEnd ? errors.dayEnd : \"\"}\n                                    error={touched.dayEnd ? Boolean(errors.dayEnd) : false}\n                                />\n                            </FormControl>\n                            <FormControl>\n                                <FormLabel classes={{ root: classes.formLabel }}>Nội dung sự kiện</FormLabel>\n                                <ReactQuill theme=\"snow\" value={values.contentEvent} onChange={(e: any) => {\n                                    setFieldValue('contentEvent', e);\n                                }} />\n                                {/* <TextField\n                                    style={{ width: 300 }}\n                                    className={classes.textField}\n                                    fullWidth\n                                    multiline\n                                    variant=\"outlined\"\n                                    name='contentEvent'\n                                    value={values.contentEvent}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập nội dung sự kiện'\n                                    helperText={touched.contentEvent ? errors.contentEvent : \"\"}\n                                    error={touched.contentEvent ? Boolean(errors.contentEvent) : false}\n                                /> */}\n                            </FormControl>\n                            <FormControl>\n                                <FormLabel classes={{ root: classes.formLabel }}>Link Google Sheet</FormLabel>\n                                <TextField\n                                    style={{ width: 300 }}\n                                    className={classes.textField}\n                                    fullWidth\n                                    multiline\n                                    variant=\"outlined\"\n                                    name='ggSheet'\n                                    value={values.ggSheet}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập link google sheet'\n                                    helperText={touched.ggSheet ? errors.ggSheet : \"\"}\n                                    error={touched.ggSheet ? Boolean(errors.ggSheet) : false}\n                                />\n                            </FormControl>\n                            <FormControl>\n                                <FormLabel classes={{ root: classes.formLabel }}>Hình ảnh</FormLabel>\n                                <input\n                                    accept=\"image/*\"\n                                    name='image'\n                                    type='file'\n                                    onChange={(e: any) => {\n                                        setFieldValue('image', e.target.files[0]);\n                                    }}\n                                    onBlur={handleBlur}\n                                />\n                            </FormControl>\n                            <Button\n                                type='submit'\n                                disabled={isSubmitting}\n                                style={{\n                                    color: \"rgb(33, 43, 54)\",\n                                    height: \"34px\",\n                                    width: \"120px\",\n                                    fontSize: \"12px\",\n                                    borderRadius: \"4px\",\n                                    fontWeight: 500,\n                                    textTransform: \"capitalize\",\n                                    border: '1px solid rgb(33, 43, 54)',\n                                    margin: \"15px 10px 0px 0px\"\n                                }}\n                            >\n                                {isSubmitting ? <CircularProgress size='1rem' /> : \"Tạo Sự Kiện\"}\n                            </Button>\n                        </Box>\n\n                    </form>\n                )}\n            </Formik>\n        </Container>\n    );\n};\n\nexport default CreateEvent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\UserForm.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\SManager\\UpdateComment.tsx",["708"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, CircularProgress, Box } from \"@material-ui/core\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport SendIcon from '@mui/icons-material/Send';\nimport { useDispatch } from \"react-redux\";\nimport { commentEvent } from \"redux/actions/sManager\";\nimport { FormControl, TextField } from \"@mui/material\";\n\nconst useStyles = makeStyles((theme) => ({\n    btnLogin: {\n        '&.MuiButton-root:hover': {\n            backgroundColor: \"transparent\",\n        }\n    },\n    formTextField: {\n        \"& .MuiInputBase-root\": {\n            \"& fieldset\": {\n                borderRadius: 10,\n            },\n            \"&.Mui-focused fieldset\": {\n                borderColor: \"black\"\n            },\n        }\n    },\n}));\n\ntype Props = {\n    event: any;\n};\n\ninterface IInitialValues {\n    contentComment: string;\n}\n\nconst CommentPost: React.FC<Props> = ({ event }): JSX.Element => {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    const initialValues: IInitialValues = {\n        contentComment: event?.contentComment ?? \"\",\n    };\n\n    const onHandleSubmit = (\n        values: IInitialValues,\n        { setSubmitting }: any\n    ): Promise<void> =>\n        dispatch<any>(commentEvent(values, event._id, setSubmitting));\n\n    return (\n        <Formik\n            enableReinitialize\n            initialValues={initialValues}\n            onSubmit={onHandleSubmit}\n        >\n            {({ isSubmitting, handleSubmit, values, handleChange, handleBlur, errors, touched }) => (\n                <form noValidate onSubmit={handleSubmit}>\n                    <Box style={{ display: \"flex\", flexDirection: \"row\", marginTop: \"30px\" }}>\n                        {/* <FormComment /> */}\n                        <FormControl style={{ paddingLeft: 10 }}>\n                            <TextField\n                                style={{ width: 450, }}\n                                className={classes.formTextField}\n                                variant=\"outlined\"\n                                inputProps={{\n                                    style: {\n                                        fontSize: '12px',\n                                        padding: '12px'\n                                    }\n                                }}\n                                name='contentComment'\n                                value={values.contentComment}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                placeholder='Nhập bình luận...'\n                            />\n                        </FormControl>\n                        <Button\n                            disableRipple\n                            type='submit'\n                            className={classes.btnLogin}\n                            disabled={isSubmitting}\n                        >\n                            {isSubmitting ? <CircularProgress size='1rem' /> : <SendIcon style={{ width: '16px' }} />}\n                        </Button>\n                    </Box>\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nexport default CommentPost;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\contents\\FeedContent.tsx",["709"],"import * as React from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { Avatar, Card, Box, CardMedia, IconButton, Typography } from '@mui/material';\nimport { Divider } from '@mui/material';\nimport { Bookmark, BookmarkBorder } from '@mui/icons-material';\nimport TabContext from '@mui/lab/TabContext';\nimport { createStorager, deleteStorager } from \"redux/actions/user\";\n\nimport { formatDistance } from 'date-fns';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"redux/reducers\";\n\n\ntype Props = {\n    event: any;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    toolBar: {\n        dislay: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    toolbarContent: {\n        justifyContent: 'center',\n        backgroundColor: 'none',\n        flexDirection: 'column',\n        marginBottom: 'auto',\n        letterSpacing: 0.6\n    },\n    card: {\n        borderRadius: '12px',\n        margin: 'auto',\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '500px',\n        marginBottom: 30,\n        boxShadow: 'rgba(145, 158, 171, 0.2) 0px 0px 2px 0px, rgba(145, 158, 171, 0.12) 0px 12px 24px -4px'\n    },\n    myMedia: {\n        width: \"450px\",\n        borderRadius: \"16px\"\n    },\n    cardHold: {\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '500px',\n        borderRadius: '12px',\n\n    },\n    button: {\n        backgroundColor: '#CBB7F5',\n        color: '#434343',\n        height: '40px',\n        width: '100px',\n        fontSize: '12px',\n        fontWeight: 'bold',\n        textTransform: 'none',\n        margin: '7px 0px 0px 10px',\n        borderRadius: '10px',\n        border: '1px solid',\n        borderColor: '#808080',\n    },\n    toolbarTitle: {\n        justifyContent: 'center',\n        paddingTop: '11px',\n        backgroundColor: 'white',\n        maxWidth: '100%'\n    },\n    box: {\n        justifyContent: 'center',\n        textAlign: 'center'\n    },\n    tabClick: {\n        '& .MuiTabs-indicator': {\n            display: 'flex',\n            justifyContent: 'center',\n            backgroundColor: 'transparent',\n        },\n        '& .MuiTabs-indicatorSpan': {\n            maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#F8D6A4',\n            borderRadius: 4\n        },\n        \"& .MuiTab-root.Mui-selected\": {\n            color: 'black'\n        }\n    },\n    tab: {\n        textTransform: 'none',\n        fontFamily: '',\n        fontSize: '16px',\n        borderRadius: 2,\n        fontWeight: 'bold',\n    }\n\n}));\n\nconst FeedContent: React.FC<Props> = ({ event }): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const user = useSelector((state: RootState) => state.user);\n    const [value, setValue] = React.useState('1');\n\n    function handleClickStorage() {\n        dispatch(createStorager(event._id));\n    }\n\n    function handleClickUnStorage() {\n        dispatch(deleteStorager(event._id));\n    }\n    const textAvatar = event?.poster.username ?? null;\n    const letterAvatar = textAvatar.charAt(0).toUpperCase();\n\n    const lettercreatedAt = (formatDistance(new Date(event?.created_at), Date.now(), { addSuffix: true })).split(\"about\");\n\n    const storager = event.storagers.map((storager: any) => storager.storager.username);\n\n    const storagers = event.storagers.some((storager: any) => user.user.username.includes(storager.storager.username));\n\n    const compareUser = storagers ? (\n        <Bookmark onClick={handleClickUnStorage} style={{ width: \"30px\", height: \"30px\", color: 'rgb(33, 43, 54)' }} />\n    ) : storager !== user.user.username ? (\n        <BookmarkBorder onClick={handleClickStorage} style={{ width: \"30px\", height: \"30px\", color: 'rgb(33, 43, 54)' }} />\n    ) : null\n\n    const classes = useStyles();\n\n    return (\n        <Box className={classes.toolbarContent}>\n            <TabContext value={value}>\n\n                {/* de rieng ra 1 component */}\n                <Card className={classes.card}>\n                    <Box margin={'0px 26px'}>\n                        <Box style={{ marginTop: \"30px\", fontSize: \"20px\", fontWeight: \"bold\" }}>\n                            Khoa {event.departmentEvent.nameDepartment.toLowerCase()}\n                        </Box>\n                    </Box>\n\n                    <Divider sx={{ margin: '20px 0px' }} />\n                    <Box margin={'0px 26px'}>\n                        <Box display={'flex'} flexDirection={'row'} margin={'10px 0px'}>\n                            <Box display={'flex'} flexDirection={'row'} marginTop={1}>\n                                <Avatar style={{\n                                    fontSize:\"14px\",\n                                    backgroundColor: 'white',\n                                    marginRight: '12px',\n                                    border: '1px dashed #b7b7b4',\n                                    color: '#454545'\n                                }}\n                                    aria-label=\"recipe\">\n                                    {letterAvatar}\n                                </Avatar>\n\n                                <Box>\n                                    <Box fontWeight={1000} >{event?.poster.username ?? null}</Box>\n                                    <Box sx={{ color: '#757575', fontSize: '14px' }}>{lettercreatedAt}</Box>\n                                </Box>\n                            </Box>\n\n                            <Box flexGrow={1} />\n\n                            <IconButton aria-label='settings'>\n                                {compareUser}\n                            </IconButton>\n                        </Box>\n                    </Box>\n\n                    <Box margin={'0px 26px'}>\n                        <Box style={{ marginBottom: '30px', paddingTop: '10px' }}>\n\n                            <Typography style={{ textAlign: 'left', fontSize: '17px', fontWeight: \"600\", paddingBottom: 6 }}>\n                                {event?.nameEvent ?? null}\n                            </Typography>\n\n                            <Box display={'flex'} flexDirection={'row'} marginBottom={4} letterSpacing={0.6}>\n                                <Box sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    paddingRight: 1,\n                                    fontWeight: 500\n                                }}>\n                                    Thời gian:\n                                </Box>\n                                <Box style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                                    {event?.dayStart ?? null} - {event?.dayEnd ?? null}\n                                </Box>\n\n                            </Box>\n                        </Box >\n                    </Box>\n                    <Divider sx={{ marginBottom: '50px' }} />\n                    <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", marginTop: \"-20px\" }}>\n                        <CardMedia\n                            className={classes.myMedia}\n                            component=\"img\"\n                            image={event?.image}\n                            alt=\"Paella dish\"\n                        >\n                        </CardMedia>\n                    </Box>\n\n                    <Divider sx={{ margin: '20px 0px' }} />\n                    <Box margin={'0px 26px'}>\n                        <Box display={'flex'} flexDirection={'row'} marginBottom={4}>\n                            <Box sx={{\n                                textAlign: 'left',\n                                fontSize: '14px',\n                                color: '#757575',\n                                paddingRight: 1,\n                                fontWeight: 500\n                            }}>\n                                Địa điểm:\n                            </Box>\n                            <Box style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                                {event?.location ?? null}\n                            </Box>\n\n                        </Box>\n                    </Box>\n\n                </Card>\n            </TabContext>\n        </Box>\n    );\n};\n\nexport default FeedContent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\contents\\FeedDetailContent.tsx",["710"],"import * as React from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { Divider } from '@mui/material';\nimport TabContext from '@mui/lab/TabContext';\nimport { Box, Button, FormControl } from '@mui/material';\nimport { userApplyJob, userUnApplyJob } from \"redux/actions/user\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"redux/reducers\";\nimport { BoxNameDetails, BoxDetails } from 'layouts/navigation/style';\n\ntype Props = {\n    event: any;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    toolBar: {\n        dislay: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n\n    card: {\n        borderRadius: '12px',\n        justifyContent: 'center',\n        backgroundColor: 'white',\n        maxHeight: '100%',\n        maxWidth: '100%',\n        paddingTop: 30,\n        paddingBottom: 30,\n        boxShadow: 'rgba(145, 158, 171, 0.2) 0px 0px 2px 0px, rgba(145, 158, 171, 0.12) 0px 12px 24px -4px'\n    },\n    myMedia: {\n        width: \"440px\",\n        borderRadius: \"24px\"\n    },\n    cardHold: {\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '500px',\n        height: '800px',\n        borderRadius: '12px',\n    },\n    button: {\n        backgroundColor: '#CBB7F5',\n        color: '#434343',\n        height: '40px',\n        width: '100px',\n        fontSize: '12px',\n        fontWeight: 'bold',\n        textTransform: 'none',\n        margin: '7px 0px 0px 10px',\n        borderRadius: '10px',\n        border: '1px solid',\n        borderColor: '#808080',\n    },\n    toolbarTitle: {\n        justifyContent: 'center',\n        paddingTop: '11px',\n        backgroundColor: 'white',\n        maxWidth: '100%'\n    },\n    box: {\n        justifyContent: 'center',\n        textAlign: 'center'\n    },\n    tabClick: {\n        '& .MuiTabs-indicator': {\n            display: 'flex',\n            justifyContent: 'center',\n            backgroundColor: 'transparent',\n        },\n        '& .MuiTabs-indicatorSpan': {\n            maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#F8D6A4',\n            borderRadius: 4\n        },\n        \"& .MuiTab-root.Mui-selected\": {\n            color: 'black'\n        }\n    },\n    tab: {\n        textTransform: 'none',\n        fontFamily: '',\n        fontSize: '16px',\n        borderRadius: 2,\n        fontWeight: 'bold',\n    }\n\n}));\n\nconst FeedDetailContent: React.FC<Props> = ({ event }): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const user = useSelector((state: RootState) => state.user);\n    const [value, setValue] = React.useState('1');\n\n    const userApply = event.usersApplyJob.map((userapply: any) => userapply.userApply.username);\n\n    const userApplys = event.usersApplyJob.some((userapply: any) => user.user.username.includes(userapply.userApply.username));\n\n    const userJob = event.usersApplyJob.map((userjob: any) => userjob.jobEvent._id);\n\n    const compareUserApply = userApplys ? (\n        event.job.map((job: any) =>\n            event.usersApplyJob.some((userjob: any) => job._id.includes(userjob.jobEvent._id) && user.user.username.includes(userjob.userApply.username)) ? (\n                <Box sx={{ display: 'grid', gap: 2, gridTemplateColumns: 'repeat(3, 1fr)', backgroundColor: \"rgba(0,0,0,0.03)\", color: \"rgb(33, 43, 54)\", marginBottom: 4, padding: 3, borderRadius: 4 }} key={job._id}>\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500,\n                        marginTop: 1\n                    }} >\n                        Tên công việc:\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000', marginTop: 1 }}>\n                        {job.nameJob}\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left' }}>\n                        <Button style={{\n                            color: \"#FF6969\",\n                            height: \"30px\",\n                            width: \"120px\",\n                            fontSize: \"12px\",\n                            fontWeight: 500,\n                            borderRadius: \"4px\",\n                            textTransform: \"capitalize\",\n                            border: '1px solid #FF6969'\n                        }}\n                            onClick={(e) => dispatch(userUnApplyJob(event._id, job._id))}>Hủy Ứng Tuyển</Button>\n                    </FormControl>\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500\n                    }} >\n                        Yêu cầu công việc:\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.jobRequest}\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left' }} />\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500\n                    }}>\n                        Mô tả công việc:\n                    </FormControl>\n                    <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.jobDescription}\n                    </FormControl>\n                    <FormControl sx={{ textAlign: 'left' }} />\n\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500,\n                        gap: 5\n                    }}>\n                        Quyền lợi:\n                    </FormControl>\n                    <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.benefit}\n                    </FormControl>\n                    <FormControl sx={{ textAlign: 'left' }} />\n\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500,\n                        gap: 5\n                    }}>\n                        Số lượng:\n                    </FormControl>\n                    <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.quantityRemaining}\n                    </FormControl>\n                    <FormControl sx={{ textAlign: 'left' }} />\n                </Box>\n\n            ) : (\n                <Box sx={{ display: 'grid', gap: 2, gridTemplateColumns: 'repeat(3, 1fr)', backgroundColor: \"rgba(0,0,0,0.03)\", color: \"rgb(33, 43, 54)\", marginBottom: 4, padding: 3, borderRadius: 4 }} key={job._id}>\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500,\n                        marginTop: 1\n                    }} >\n                        Tên công việc:\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000', marginTop: 1 }}>\n                        {job.nameJob}\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left' }}>\n                        <Button style={{\n                            color: \"rgb(33, 43, 54)\",\n                            height: \"30px\",\n                            width: \"120px\",\n                            fontSize: \"12px\",\n                            borderRadius: \"4px\",\n                            fontWeight: 500,\n                            textTransform: \"capitalize\",\n                            border: '1px solid rgb(33, 43, 54)'\n                        }}\n                            onClick={(e) => dispatch(userApplyJob(event._id, job._id))}>Ứng Tuyển</Button>\n                    </FormControl>\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500\n                    }} >\n                        Yêu cầu công việc:\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.jobRequest}\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left' }} />\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500\n                    }}>\n                        Mô tả công việc:\n                    </FormControl>\n                    <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.jobDescription}\n                    </FormControl>\n                    <FormControl sx={{ textAlign: 'left' }} />\n\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500,\n                        gap: 5\n                    }}>\n                        Quyền lợi:\n                    </FormControl>\n                    <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.benefit}\n                    </FormControl>\n                    <FormControl sx={{ textAlign: 'left' }} />\n\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500,\n                        gap: 5\n                    }}>\n                        Số lượng:\n                    </FormControl>\n                    <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.quantityRemaining}\n                    </FormControl>\n                    <FormControl sx={{ textAlign: 'left' }} />\n                </Box>\n            )\n        )\n    ) : userApply !== user.user.username ? (\n        event.job.map((job: any) =>\n            job._id !== userJob ? (\n                <Box sx={{ display: 'grid', gap: 2, gridTemplateColumns: 'repeat(3, 1fr)', backgroundColor: \"rgba(0,0,0,0.03)\", color: \"rgb(33, 43, 54)\", marginBottom: 4, padding: 3, borderRadius: 4 }} key={job._id}>\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500,\n                        marginTop: 1\n                    }} >\n                        Tên công việc:\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000', marginTop: 1 }}>\n                        {job.nameJob}\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left' }}>\n                        <Button style={{\n                            color: \"rgb(33, 43, 54)\",\n                            height: \"30px\",\n                            width: \"120px\",\n                            fontSize: \"12px\",\n                            borderRadius: \"4px\",\n                            fontWeight: 500,\n                            textTransform: \"capitalize\",\n                            border: '1px solid rgb(33, 43, 54)'\n                        }}\n                            onClick={(e) => dispatch(userApplyJob(event._id, job._id))}>Ứng Tuyển</Button>\n                    </FormControl>\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500\n                    }} >\n                        Yêu cầu công việc:\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.jobRequest}\n                    </FormControl>\n\n                    <FormControl sx={{ textAlign: 'left' }} />\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500\n                    }}>\n                        Mô tả công việc:\n                    </FormControl>\n                    <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.jobDescription}\n                    </FormControl>\n                    <FormControl sx={{ textAlign: 'left' }} />\n\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500,\n                        gap: 5\n                    }}>\n                        Quyền lợi:\n                    </FormControl>\n                    <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.benefit}\n                    </FormControl>\n                    <FormControl sx={{ textAlign: 'left' }} />\n\n                    <FormControl sx={{\n                        textAlign: 'left',\n                        fontSize: '14px',\n                        color: '#757575',\n                        fontWeight: 500,\n                        gap: 5\n                    }}>\n                        Số lượng:\n                    </FormControl>\n                    <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                        {job.quantityRemaining}\n                    </FormControl>\n                    <FormControl sx={{ textAlign: 'left' }} />\n                </Box>\n            ) : null\n        )\n    ) : null\n\n    const classes = useStyles();\n\n    return (\n        <Box >\n            <TabContext value={value}>\n                <Box className={classes.card}>\n                    {/* <Box margin={'10px 26px'}>\n                        <Box sx={{ fontSize: \"20px\", fontWeight: \"bold\" }}>\n                            Khoa {event.departmentEvent.nameDepartment.toLowerCase()}\n                        </Box>\n                        <Box sx={{ fontSize: \"14px\" }}>\n                            {event?.poster.username ?? null}\n                        </Box>\n                    </Box> */}\n\n\n                    {/* <Divider /> */}\n\n                    <BoxDetails >\n                        <Box sx={{ fontSize: \"14px\" }}>\n                            <BoxNameDetails>\n                                Mô tả:\n                            </BoxNameDetails>\n                            <Box sx={{ textAlign: 'left', fontSize: '14px', fontWeight: 500 }} dangerouslySetInnerHTML={{ __html: event.contentEvent }} />\n                        </Box>\n                    </BoxDetails>\n\n                    <Divider />\n                    <BoxDetails style={{ overflowY: \"auto\", height: \"500px\" }}>\n                        <BoxNameDetails >\n                            Công việc:\n                        </BoxNameDetails>\n                        {compareUserApply}\n                    </BoxDetails>\n                </Box>\n            </TabContext>\n        </Box>\n    );\n};\n\nexport default FeedDetailContent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\FeedManageJob.tsx",["711","712","713","714","715","716","717","718"],"import * as React from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { Button, Card, CardContent, Toolbar, Box } from '@mui/material';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport TabContext from '@mui/lab/TabContext';\nimport TabPanel from '@mui/lab/TabPanel';\n\nimport { userApplyJob, userUnApplyJob } from \"redux/actions/user\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"redux/reducers\";\n\ntype Props = {\n    event: any;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    toolBar: {\n        dislay: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    toolbarContent: {\n        justifyContent: 'center',\n        backgroundColor: 'none',\n        flexDirection: 'column',\n        marginBottom: 'auto'\n    },\n    card: {\n        borderRadius: '22px',\n        margin: 'auto',\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '1200px',\n        height: '300px',\n    },\n    myMedia: {\n        height: \"250px\",\n        // paddingTop: '56.25%', // 16:9,\n        marginTop: '30'\n    },\n    cardHold: {\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '500px',\n        height: '800px',\n        borderRadius: '12px',\n    },\n    button: {\n        backgroundColor: '#CBB7F5',\n        color: '#434343',\n        height: '40px',\n        width: '100px',\n        fontSize: '12px',\n        fontWeight: 'bold',\n        textTransform: 'none',\n        margin: '7px 0px 0px 10px',\n        borderRadius: '10px',\n        border: '1px solid',\n        borderColor: '#808080',\n    },\n    toolbarTitle: {\n        justifyContent: 'center',\n        paddingTop: '11px',\n        backgroundColor: 'white',\n        maxWidth: '100%'\n    },\n    box: {\n        justifyContent: 'center',\n        textAlign: 'center'\n    },\n    tabClick: {\n        '& .MuiTabs-indicator': {\n            display: 'flex',\n            justifyContent: 'center',\n            backgroundColor: 'transparent',\n        },\n        '& .MuiTabs-indicatorSpan': {\n            maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#F8D6A4',\n            borderRadius: 4\n        },\n        \"& .MuiTab-root.Mui-selected\": {\n            color: 'black'\n        }\n    },\n    tab: {\n        textTransform: 'none',\n        fontFamily: '',\n        fontSize: '16px',\n        borderRadius: 2,\n        fontWeight: 'bold',\n    }\n\n}));\n\nconst FeedManageJob: React.FC<Props> = ({ event }): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const [value, setValue] = React.useState('1');\n\n    const user = useSelector((state: RootState) => state.user);\n\n    const classes = useStyles();\n\n    const findJobUserApply = event.usersApplyJob.filter((userapply: any) => userapply.userApply.username === user.user.username && userapply.notiApplyJob == \"Bạn đã ứng tuyển thành công\");\n\n    return (\n        <>\n            {findJobUserApply.map((job: any) =>\n                <Toolbar key={job._id} className={classes.toolBar}>\n                    <Box className={classes.toolbarContent}>\n                        <TabContext value={value}>\n                            <TabPanel value=\"1\" >\n                                {/* de rieng ra 1 component */}\n                                <Card className={classes.card}>\n                                    <CardContent>\n                                        <Box sx={{ display: \"flex\", flexDirection: \"row\", marginTop: \"35px\", marginLeft: \"35px\" }}>\n                                            <Box sx={{ fontWeight: \"bold\", fontSize: \"21px\" }}>\n                                                {event.nameEvent}\n                                            </Box>\n                                            <PlayArrowIcon style={{ fontSize: \"35px\", margin: \"-5px 10px 0px 10px\", color: \"#c6c9c9\" }} />\n                                            <Box sx={{ fontWeight: \"bold\", fontSize: \"21px\" }}>\n                                                {job.jobEvent.nameJob}\n                                            </Box>\n                                            <Box flexGrow={1} />\n                                            <Box sx={{ marginTop: \"50px\", fontWeight: \"bold\" }}>\n                                                {job.acceptStatus == \"Chờ phê duyệt\" ? (\n                                                    <Box>\n                                                        Chưa có thông báo nhận lương\n                                                    </Box>\n                                                ) : job.acceptStatus == \"Duyệt\" ? (\n                                                    <Box sx={{ color: \"#00B14F\" }}>\n                                                        {job.notiAccept}\n                                                    </Box>\n                                                ) : job.acceptStatus == \"Không Duyệt\" ? (\n                                                    <Box sx={{ color: \"red\" }}>\n                                                        {job.notiAccept}\n                                                    </Box>\n                                                ) : null}\n                                            </Box>\n                                        </Box>\n\n                                        <Box sx={{ fontSize: \"15px\", marginTop: \"10px\", marginLeft: \"35px\" }}>\n                                            {event?.dayStart ?? null} - {event?.dayEnd ?? null}\n                                        </Box>\n\n                                        <Box sx={{ fontSize: \"16px\", marginTop: \"30px\", marginLeft: \"35px\" }}>\n                                            Địa điểm: {event.location}\n                                        </Box>\n\n                                        <Box sx={{ display: \"flex\", flexDirection: \"row\" }} >\n                                            <Box>\n                                                <Box sx={{ fontSize: \"15px\", marginTop: \"20px\", marginLeft: \"35px\" }}>\n                                                    Mô tả: {job.jobEvent.jobDescription}\n                                                </Box>\n                                                <Box sx={{ fontSize: \"15px\", marginTop: \"20px\", marginLeft: \"35px\" }}>\n                                                    Quyền lợi: {job.jobEvent.benefit}\n                                                </Box>\n                                            </Box>\n                                            <Box flexGrow={1} />\n                                            <Button style={{ color: \"green\" }} target='_blank' href={event.ggSheet} rel=\"noopener noreferrer\">\n                                                Link chi tiết công việc\n                                            </Button>\n\n                                        </Box>\n                                    </CardContent>\n\n                                </Card>\n                            </TabPanel>\n                        </TabContext>\n\n                    </Box>\n                </Toolbar >\n            )}\n        </>\n    );\n};\n\nexport default FeedManageJob;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\UpdateJobEvent.tsx",["719"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Box, Button, CircularProgress, FormControl, FormLabel, TextField, Typography, } from \"@mui/material\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { updateJobEvent } from \"redux/actions/Manager\";\nimport FormEvent from \"pages/auth/FormEvent-Manager\";\nimport { Container } from \"@mui/material\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    btnLogin: {\n        marginTop: theme.spacing(1.5),\n        marginRight: theme.spacing(1),\n        padding: theme.spacing(1, 2),\n    },\n    formLabel: {\n        fontWeight: 600,\n        marginBottom: theme.spacing(1.5),\n    },\n    formControl: {\n        margin: theme.spacing(1, 0),\n    },\n}));\n\ntype Props = {\n    jobEvent: any;\n};\n\ninterface IInitialValues {\n    nameJob: string;\n    quantity: number;\n    unitPrice: number;\n    jobDescription: string;\n    jobRequest: string;\n    benefit: string;\n    event: any;\n}\n\nconst UpdateJobEvent: React.FC<Props> = ({ jobEvent }): JSX.Element => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const initialValues: IInitialValues = {\n        nameJob: jobEvent?.nameJob ?? \"\",\n        quantity: jobEvent?.quantity ?? \"\",\n        unitPrice: jobEvent?.unitPrice ?? \"\",\n        jobDescription: jobEvent?.jobDescription ?? \"\",\n        jobRequest: jobEvent?.jobRequest ?? \"\",\n        benefit: jobEvent?.benefit ?? \"\",\n        event: jobEvent?.event ?? \"\",\n    };\n\n\n    const onHandleSubmit = (\n        values: IInitialValues,\n        { setSubmitting }: any\n    ): Promise<void> =>\n        dispatch<any>(updateJobEvent(values, jobEvent._id, setSubmitting));\n\n    const validationSchema = Yup.object({\n        nameJob: Yup.string().required(\"required!\"),\n        quantity: Yup.string().required(\"required!\"),\n        unitPrice: Yup.string().required(\"required!\"),\n        jobDescription: Yup.string().required(\"required!\"),\n        jobRequest: Yup.string().required(\"required!\"),\n        benefit: Yup.string().required(\"required!\"),\n    });\n\n    return (\n        <Container style={{ maxWidth: 600 }}>\n            <Formik\n                enableReinitialize\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={onHandleSubmit}\n            >\n                {({ isSubmitting, handleSubmit, values, handleChange, handleBlur, errors, touched }) => (\n                    <form noValidate onSubmit={handleSubmit}>\n                        <Box display={\"flex\"}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                            alignItems={'center'}\n                            style={{ backgroundColor: 'white', padding: '30px 0px', borderRadius: '20px' }}>\n                            <FormControl className={classes.formControl}>\n                                <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", margin: \"10px 0\" }}>\n                                    Tên công việc\n                                </FormLabel>\n\n                                <TextField\n                                    style={{ width: 300 }}\n                                    fullWidth\n                                    variant={'outlined'}\n                                    name='nameJob'\n                                    value={values.nameJob}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập tên công việc'\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                    helperText={touched.nameJob ? errors.nameJob : \"\"}\n                                    error={touched.nameJob ? Boolean(errors.nameJob) : false}\n                                />\n                            </FormControl>\n\n                            <FormControl className={classes.formControl}>\n                                <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", margin: \"10px 0\" }}>\n                                    Số lượng người\n                                </FormLabel>\n\n                                <TextField\n                                    style={{ width: 300 }}\n                                    fullWidth\n                                    variant={'outlined'}\n                                    name='quantity'\n                                    value={values.quantity}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập số lượng người'\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                    helperText={touched.quantity ? errors.quantity : \"\"}\n                                    error={touched.quantity ? Boolean(errors.quantity) : false}\n                                />\n                            </FormControl>\n\n                            <FormControl className={classes.formControl}>\n                                <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", margin: \"10px 0\" }}>\n                                    Đơn giá\n                                </FormLabel>\n                                <TextField\n                                    style={{ width: 300 }}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    name='unitPrice'\n                                    value={values.unitPrice}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập đơn giá'\n                                    helperText={touched.unitPrice ? errors.unitPrice : \"\"}\n                                    error={touched.unitPrice ? Boolean(errors.unitPrice) : false}\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n\n                            <FormControl className={classes.formControl}>\n                                <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", margin: \"10px 0\" }}>\n                                    Mô tả công việc\n                                </FormLabel>\n\n                                <TextField\n                                    style={{ width: 300 }}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    name='jobDescription'\n                                    value={values.jobDescription}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập mô tả công việc'\n                                    helperText={touched.jobDescription ? errors.jobDescription : \"\"}\n                                    error={touched.jobDescription ? Boolean(errors.jobDescription) : false}\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n\n                            <FormControl className={classes.formControl}>\n                                <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", margin: \"10px 0\" }}>\n                                    Yêu cầu công việc\n                                </FormLabel>\n                                <TextField\n                                    style={{ width: 300 }}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    name='jobRequest'\n                                    value={values.jobRequest}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập yêu cầu công việc'\n                                    helperText={touched.jobRequest ? errors.jobRequest : \"\"}\n                                    error={touched.jobRequest ? Boolean(errors.jobRequest) : false}\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n\n                            <FormControl className={classes.formControl}>\n                                <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", margin: \"10px 0\" }}>\n                                    Quyền lợi công việc\n                                </FormLabel>\n                                <TextField\n                                    style={{ width: 300 }}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    name='benefit'\n                                    value={values.benefit}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập quyền lợi công việc'\n                                    helperText={touched.benefit ? errors.benefit : \"\"}\n                                    error={touched.benefit ? Boolean(errors.benefit) : false}\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n\n                            <FormEvent isEvent={true} />\n                            <Button\n                                style={{ backgroundColor: \"black\", color: \"white\" }}\n                                type='submit'\n                                variant='contained'\n                                color='primary'\n                                size='small'\n                                className={classes.btnLogin}\n                                disabled={isSubmitting}\n                            >\n                                {isSubmitting ? <CircularProgress size='1rem' /> : \"Cập Nhật Công Việc\"}\n                            </Button>\n                        </Box>\n                    </form>\n                )}\n            </Formik>\n        </Container>\n    );\n};\n\nexport default UpdateJobEvent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\UpdateDepartment.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\guest\\FeedGuest.tsx",["720","721","722","723"],"import * as React from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { Avatar, Card, Box, CardMedia, Typography } from '@mui/material';\nimport { Divider } from '@mui/material';\n\nimport TabContext from '@mui/lab/TabContext';\nimport { createStorager, deleteStorager } from \"redux/actions/user\";\n\nimport { formatDistance } from 'date-fns';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"redux/reducers\";\n\n\ntype Props = {\n    event: any;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    toolBar: {\n        dislay: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    toolbarContent: {\n        justifyContent: 'center',\n        backgroundColor: 'none',\n        flexDirection: 'column',\n        marginBottom: 'auto',\n        letterSpacing: 0.6\n    },\n    card: {\n        borderRadius: '12px',\n        margin: 'auto',\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '500px',\n        marginBottom: 30,\n        boxShadow: 'rgba(145, 158, 171, 0.2) 0px 0px 2px 0px, rgba(145, 158, 171, 0.12) 0px 12px 24px -4px'\n    },\n    myMedia: {\n        width: \"450px\",\n        borderRadius: \"16px\"\n    },\n    cardHold: {\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '500px',\n        borderRadius: '12px',\n\n    },\n    button: {\n        backgroundColor: '#CBB7F5',\n        color: '#434343',\n        height: '40px',\n        width: '100px',\n        fontSize: '12px',\n        fontWeight: 'bold',\n        textTransform: 'none',\n        margin: '7px 0px 0px 10px',\n        borderRadius: '10px',\n        border: '1px solid',\n        borderColor: '#808080',\n    },\n    toolbarTitle: {\n        justifyContent: 'center',\n        paddingTop: '11px',\n        backgroundColor: 'white',\n        maxWidth: '100%'\n    },\n    box: {\n        justifyContent: 'center',\n        textAlign: 'center'\n    },\n    tabClick: {\n        '& .MuiTabs-indicator': {\n            display: 'flex',\n            justifyContent: 'center',\n            backgroundColor: 'transparent',\n        },\n        '& .MuiTabs-indicatorSpan': {\n            maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#F8D6A4',\n            borderRadius: 4\n        },\n        \"& .MuiTab-root.Mui-selected\": {\n            color: 'black'\n        }\n    },\n    tab: {\n        textTransform: 'none',\n        fontFamily: '',\n        fontSize: '16px',\n        borderRadius: 2,\n        fontWeight: 'bold',\n    }\n\n}));\n\nconst FeedGuest: React.FC<Props> = ({ event }): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const user = useSelector((state: RootState) => state.user);\n    const [value, setValue] = React.useState('1');\n\n    function handleClickStorage() {\n        dispatch(createStorager(event._id));\n    }\n\n    function handleClickUnStorage() {\n        dispatch(deleteStorager(event._id));\n    }\n    const textAvatar = event?.poster.username ?? null;\n    const letterAvatar = textAvatar.charAt(0).toUpperCase();\n\n    const lettercreatedAt = (formatDistance(new Date(event?.created_at), Date.now(), { addSuffix: true })).split(\"about\");\n\n    const classes = useStyles();\n\n    return (\n        <Box className={classes.toolbarContent}>\n            <TabContext value={value}>\n\n                {/* de rieng ra 1 component */}\n                <Card className={classes.card}>\n                    <Box margin={'0px 26px'}>\n                        <Box style={{ marginTop: \"30px\", fontSize: \"20px\", fontWeight: \"bold\" }}>\n                            Khoa {event.departmentEvent.nameDepartment.toLowerCase()}\n                        </Box>\n                    </Box>\n\n                    <Divider sx={{ margin: '20px 0px' }} />\n                    <Box margin={'0px 26px'}>\n                        <Box display={'flex'} flexDirection={'row'} margin={'10px 0px'}>\n                            <Avatar style={{\n                                fontSize: \"14px\",\n                                backgroundColor: 'white',\n                                marginRight: '12px',\n                                border: '1px dashed #b7b7b4',\n                                color: '#454545'\n                            }}\n                                aria-label=\"recipe\">\n                                {letterAvatar}\n                            </Avatar>\n\n                            <Box>\n                                <Box fontWeight={1000} >{event?.poster.username ?? null}</Box>\n                                <Box sx={{ color: '#757575', fontSize: '14px' }}>{lettercreatedAt}</Box>\n                            </Box>\n                        </Box>\n                    </Box>\n\n                    <Box margin={'0px 26px'}>\n                        <Box style={{ marginBottom: '30px', paddingTop: '10px' }}>\n\n                            <Typography style={{ textAlign: 'left', fontSize: '17px', fontWeight: \"600\", paddingBottom: 6 }}>\n                                {event?.nameEvent ?? null}\n                            </Typography>\n\n                            <Box display={'flex'} flexDirection={'row'} marginBottom={4} letterSpacing={0.6}>\n                                <Box sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    paddingRight: 1,\n                                    fontWeight: 500\n                                }}>\n                                    Thời gian:\n                                </Box>\n                                <Box style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                                    {event?.dayStart ?? null} - {event?.dayEnd ?? null}\n                                </Box>\n\n                            </Box>\n                        </Box >\n                    </Box>\n                    <Divider sx={{ marginBottom: '50px' }} />\n                    <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", marginTop: \"-20px\" }}>\n                        <CardMedia\n                            className={classes.myMedia}\n                            component=\"img\"\n                            image={event?.image}\n                            alt=\"Paella dish\"\n                        >\n                        </CardMedia>\n                    </Box>\n\n                    <Divider sx={{ margin: '20px 0px' }} />\n                    <Box margin={'0px 26px'}>\n                        <Box display={'flex'} flexDirection={'row'} marginBottom={4}>\n                            <Box sx={{\n                                textAlign: 'left',\n                                fontSize: '14px',\n                                color: '#757575',\n                                paddingRight: 1,\n                                fontWeight: 500\n                            }}>\n                                Địa điểm:\n                            </Box>\n                            <Box style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                                {event?.location ?? null}\n                            </Box>\n\n                        </Box>\n                    </Box>\n\n                </Card>\n            </TabContext>\n        </Box>\n    );\n};\n\nexport default FeedGuest;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\guest\\FeedDetailGuest.tsx",["724","725","726"],"import * as React from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Divider } from '@mui/material';\nimport TabContext from '@mui/lab/TabContext';\nimport { Box, Button, FormControl } from '@mui/material';\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"redux/reducers\";\nimport { BoxNameDetails, BoxDetails } from 'layouts/navigation/style';\nimport { Link } from 'react-router-dom';\n\ntype Props = {\n    event: any;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    toolBar: {\n        dislay: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n\n    card: {\n        borderRadius: '12px',\n        justifyContent: 'center',\n        backgroundColor: 'white',\n        maxWidth: '100%',\n        paddingTop: 30,\n        paddingBottom: 30,\n        boxShadow: 'rgba(145, 158, 171, 0.2) 0px 0px 2px 0px, rgba(145, 158, 171, 0.12) 0px 12px 24px -4px'\n    },\n    myMedia: {\n        width: \"440px\",\n        borderRadius: \"24px\"\n    },\n    cardHold: {\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '500px',\n        height: '800px',\n        borderRadius: '12px',\n    },\n    button: {\n        backgroundColor: '#CBB7F5',\n        color: '#434343',\n        height: '40px',\n        width: '100px',\n        fontSize: '12px',\n        fontWeight: 'bold',\n        textTransform: 'none',\n        margin: '7px 0px 0px 10px',\n        borderRadius: '10px',\n        border: '1px solid',\n        borderColor: '#808080',\n    },\n    toolbarTitle: {\n        justifyContent: 'center',\n        paddingTop: '11px',\n        backgroundColor: 'white',\n        maxWidth: '100%'\n    },\n    box: {\n        justifyContent: 'center',\n        textAlign: 'center'\n    },\n    tabClick: {\n        '& .MuiTabs-indicator': {\n            display: 'flex',\n            justifyContent: 'center',\n            backgroundColor: 'transparent',\n        },\n        '& .MuiTabs-indicatorSpan': {\n            maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#F8D6A4',\n            borderRadius: 4\n        },\n        \"& .MuiTab-root.Mui-selected\": {\n            color: 'black'\n        }\n    },\n    tab: {\n        textTransform: 'none',\n        fontFamily: '',\n        fontSize: '16px',\n        borderRadius: 2,\n        fontWeight: 'bold',\n    }\n\n}));\n\nconst FeedDetailContent: React.FC<Props> = ({ event }): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const user = useSelector((state: RootState) => state.user);\n    const [value, setValue] = React.useState('1');\n\n    const classes = useStyles();\n\n    return (\n        <Box >\n            <TabContext value={value}>\n\n                <Box className={classes.card}>\n\n                    <BoxDetails >\n                        <Box sx={{ fontSize: \"14px\" }}>\n                            <BoxNameDetails>\n                                Mô tả:\n                            </BoxNameDetails>\n                            <Box sx={{ textAlign: 'left', fontSize: '14px', fontWeight: 500 }} dangerouslySetInnerHTML={{ __html: event.contentEvent }} />\n                        </Box>\n                    </BoxDetails>\n\n                    <Divider />\n                    <BoxDetails style={{ overflowY: \"auto\", height: \"500px\" }}>\n                        <BoxNameDetails >\n                            Công việc:\n                        </BoxNameDetails>\n                        {event.job.map((job: any) =>\n                            <Box sx={{ display: 'grid', gap: 2, gridTemplateColumns: 'repeat(3, 1fr)', backgroundColor: \"rgba(0,0,0,0.03)\", color: \"rgb(33, 43, 54)\", marginBottom: 4, padding: 3, borderRadius: 4 }} key={job._id}>\n                                <FormControl sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    fontWeight: 500,\n                                    marginTop: 1\n                                }} >\n                                    Tên công việc:\n                                </FormControl>\n\n                                <FormControl sx={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000', marginTop: 1 }}>\n                                    {job.nameJob}\n                                </FormControl>\n\n                                <FormControl sx={{ textAlign: 'left' }}>\n                                    <Box component={Link} to={\"/loginuser\"}>\n                                    <Button style={{\n                                        color: \"rgb(33, 43, 54)\",\n                                        height: \"30px\",\n                                        width: \"120px\",\n                                        fontSize: \"12px\",\n                                        borderRadius: \"4px\",\n                                        fontWeight: 500,\n                                        textTransform: \"capitalize\",\n                                        border: '1px solid rgb(33, 43, 54)'\n                                    }}\n                                    >Ứng Tuyển</Button>\n                                    </Box>\n                                </FormControl>\n                                <FormControl sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    fontWeight: 500\n                                }} >\n                                    Yêu cầu công việc:\n                                </FormControl>\n\n                                <FormControl sx={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                                    {job.jobRequest}\n                                </FormControl>\n\n                                <FormControl sx={{ textAlign: 'left' }} />\n                                <FormControl sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    fontWeight: 500\n                                }}>\n                                    Mô tả công việc:\n                                </FormControl>\n                                <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                                    {job.jobDescription}\n                                </FormControl>\n                                <FormControl sx={{ textAlign: 'left' }} />\n\n                                <FormControl sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    fontWeight: 500,\n                                    gap: 5\n                                }}>\n                                    Quyền lợi:\n                                </FormControl>\n                                <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                                    {job.benefit}\n                                </FormControl>\n                                <FormControl sx={{ textAlign: 'left' }} />\n\n                                <FormControl sx={{\n                                    textAlign: 'left',\n                                    fontSize: '14px',\n                                    color: '#757575',\n                                    fontWeight: 500,\n                                    gap: 5\n                                }}>\n                                    Số lượng:\n                                </FormControl>\n                                <FormControl style={{ textAlign: 'left', fontSize: '14px', fontWeight: '1000' }}>\n                                    {job.quantityRemaining}\n                                </FormControl>\n                                <FormControl sx={{ textAlign: 'left' }} />\n\n                            </Box>\n                        )}\n                    </BoxDetails>\n                </Box>\n            </TabContext>\n        </Box>\n    );\n};\n\nexport default FeedDetailContent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\FormDepartment_Admin.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\UpdateEvent.tsx",["727","728"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, CircularProgress, FormControl, FormLabel, TextField, Accordion, AccordionDetails, Container, Box } from \"@mui/material\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { updateEvent } from \"redux/actions/Manager\";\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    btn: {\n        '&.MuiButton-root:hover': {\n            backgroundColor: \"transparent\",\n        }\n    },\n    accordion: {\n        marginBottom: theme.spacing(3),\n        padding: theme.spacing(1),\n    },\n    formLabel: {\n        fontWeight: 600,\n        marginBottom: theme.spacing(1.5),\n    },\n    formControl: {\n        margin: theme.spacing(1, 0),\n    },\n}));\n\ntype Props = {\n    event: any;\n};\n\ninterface IInitialValues {\n    nameEvent: string;\n    location: string;\n    dayStart: string;\n    dayEnd: string;\n    image: any;\n    contentEvent: string;\n    ggSheet: string;\n}\n\nconst CreatePost: React.FC<Props> = ({ event }): JSX.Element => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    const initialValues: IInitialValues = {\n        nameEvent: event?.nameEvent ?? \"\",\n        location: event?.location ?? \"\",\n        dayStart: event?.dayStart ?? \"\",\n        dayEnd: event?.dayEnd ?? \"\",\n        image: event?.image ?? \"\",\n        contentEvent: event?.contentEvent ?? \"\",\n        ggSheet: event?.ggSheet ?? \"\",\n    };\n\n    const validationSchema = Yup.object({\n        nameEvent: Yup.string().required(\"required!\"),\n        location: Yup.string().required(\"required!\"),\n        dayStart: Yup.string().required(\"required!\"),\n        dayEnd: Yup.string().required(\"required!\"),\n        contentEvent: Yup.string().required(\"required!\"),\n        ggSheet: Yup.string().required(\"required!\"),\n    });\n\n    return (\n        <Container style={{ maxWidth: 600 }}>\n            <Formik\n                enableReinitialize={true}\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={(values: any, { setSubmitting }) => {\n                    let formData = new FormData();\n                    formData.append(\"nameEvent\", values.nameEvent);\n                    formData.append(\"location\", values.location);\n                    formData.append(\"dayStart\", values.dayStart);\n                    formData.append(\"dayEnd\", values.dayEnd);\n                    formData.append(\"image\", values.image);\n                    formData.append(\"contentEvent\", values.contentEvent);\n                    formData.append(\"ggSheet\", values.ggSheet);\n                    dispatch(updateEvent(formData, event._id, setSubmitting));\n                }}\n            >\n                {({ values, handleChange, handleBlur, errors, touched, setFieldValue, isSubmitting, handleSubmit }) => (\n                    <form noValidate onSubmit={handleSubmit} encType=\"multipart/form-data\">\n                        <Box display={\"flex\"}\n                            flexDirection={'column'}\n                            justifyContent={'center'}\n                            alignItems={'center'}\n                            style={{ backgroundColor: 'white', padding: '30px 0px', borderRadius: '20px' }}>\n                            <FormControl fullWidth className={classes.formControl}>\n                                <FormLabel classes={{ root: classes.formLabel }}>Tên sự kiện</FormLabel>\n                                <TextField\n                                    style={{ width: 237 }}\n                                    fullWidth\n                                    variant=\"outlined\"\n                                    name='nameEvent'\n                                    value={values.nameEvent}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập tên sự kiện'\n                                    helperText={touched.nameEvent ? errors.nameEvent : \"\"}\n                                    error={touched.nameEvent ? Boolean(errors.nameEvent) : false}\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n                            <FormControl fullWidth className={classes.formControl}>\n                                <FormLabel classes={{ root: classes.formLabel }}>Địa điểm tổ chức</FormLabel>\n                                <TextField\n                                    style={{ width: 237 }}\n                                    fullWidth\n                                    multiline\n                                    variant=\"outlined\"\n                                    name='location'\n                                    value={values.location}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập địa điểm tổ chức'\n                                    helperText={touched.location ? errors.location : \"\"}\n                                    error={touched.location ? Boolean(errors.location) : false}\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n                            <FormControl fullWidth className={classes.formControl}>\n                                <FormLabel classes={{ root: classes.formLabel }}>Ngày giờ bắt đầu</FormLabel>\n                                <TextField\n                                    style={{ width: 237 }}\n                                    fullWidth\n                                    multiline\n                                    variant=\"outlined\"\n                                    name='dayStart'\n                                    value={values.dayStart}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập ngày giờ bắt đầu'\n                                    helperText={touched.dayStart ? errors.dayStart : \"\"}\n                                    error={touched.dayStart ? Boolean(errors.dayStart) : false}\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n                            <FormControl fullWidth className={classes.formControl}>\n                                <FormLabel classes={{ root: classes.formLabel }}>Ngày giờ kết thúc</FormLabel>\n                                <TextField\n                                    style={{ width: 237 }}\n                                    fullWidth\n                                    multiline\n                                    variant=\"outlined\"\n                                    name='dayEnd'\n                                    value={values.dayEnd}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập ngày giờ kết thúc'\n                                    helperText={touched.dayEnd ? errors.dayEnd : \"\"}\n                                    error={touched.dayEnd ? Boolean(errors.dayEnd) : false}\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n                            <FormControl fullWidth className={classes.formControl}>\n\n                                <FormLabel classes={{ root: classes.formLabel }}>Nội dung sự kiện</FormLabel>\n                                <ReactQuill theme=\"snow\" value={values.contentEvent} onChange={(e: any) => {\n                                    setFieldValue('contentEvent', e);\n                                }} />\n                            </FormControl>\n                            <FormControl fullWidth className={classes.formControl}>\n                                <FormLabel classes={{ root: classes.formLabel }}>Link Google Sheet</FormLabel>\n                                <TextField\n                                    style={{ width: 237 }}\n                                    fullWidth\n                                    multiline\n                                    variant=\"outlined\"\n                                    name='ggSheet'\n                                    value={values.ggSheet}\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    placeholder='Nhập link Google Sheet'\n                                    helperText={touched.ggSheet ? errors.ggSheet : \"\"}\n                                    error={touched.ggSheet ? Boolean(errors.ggSheet) : false}\n                                    inputProps={{\n                                        style: {\n                                            fontSize: '12px',\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n                            <FormControl fullWidth className={classes.formControl}>\n                                <FormLabel classes={{ root: classes.formLabel }}>Hình ảnh</FormLabel>\n                                <input\n                                    accept=\"image/*\"\n                                    name='image'\n                                    type='file'\n                                    onChange={(e: any) => {\n                                        setFieldValue('image', e.target.files[0]);\n                                    }}\n                                    onBlur={handleBlur}\n                                />\n                            </FormControl>\n                            <Button\n                                disableRipple\n                                style={{ backgroundColor: \"black\", color: \"white\" }}\n                                type='submit'\n                                variant='contained'\n                                color='primary'\n                                size='small'\n                                className={classes.btn}\n                                disabled={isSubmitting}\n                            >\n                                {isSubmitting ? <CircularProgress size='1rem' /> : \"Cập Nhật Sự Kiện\"}\n                            </Button>\n                        </Box>\n                    </form>\n                )}\n            </Formik>\n        </Container>\n    );\n};\n\nexport default CreatePost;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\UpdateCoefficient.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\FormFieldRole.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\FormField.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\FormEvent-Manager.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\admin\\FormFieldDepartment.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\Manager\\CreateJobEvent.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\FeedApplyJob.tsx",["729","730","731","732","733","734","735","736","737","738","739","740"],"import * as React from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { Button, Card, CardContent, Toolbar, Box } from '@mui/material';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport TabContext from '@mui/lab/TabContext';\nimport TabPanel from '@mui/lab/TabPanel';\n\nimport { userApplyJob, userUnApplyJob } from \"redux/actions/user\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"redux/reducers\";\n\ntype Props = {\n    event: any;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    toolBar: {\n        dislay: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    toolbarContent: {\n        justifyContent: 'center',\n        backgroundColor: 'none',\n        flexDirection: 'column',\n        marginBottom: 'auto'\n    },\n    card: {\n        borderRadius: '22px',\n        margin: 'auto',\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '1200px',\n        height: '300px',\n    },\n    myMedia: {\n        height: \"250px\",\n        // paddingTop: '56.25%', // 16:9,\n        marginTop: '30'\n    },\n    cardHold: {\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '500px',\n        height: '800px',\n        borderRadius: '12px',\n    },\n    button: {\n        backgroundColor: '#CBB7F5',\n        color: '#434343',\n        height: '40px',\n        width: '100px',\n        fontSize: '12px',\n        fontWeight: 'bold',\n        textTransform: 'none',\n        margin: '7px 0px 0px 10px',\n        borderRadius: '10px',\n        border: '1px solid',\n        borderColor: '#808080',\n    },\n    toolbarTitle: {\n        justifyContent: 'center',\n        paddingTop: '11px',\n        backgroundColor: 'white',\n        maxWidth: '100%'\n    },\n    box: {\n        justifyContent: 'center',\n        textAlign: 'center'\n    },\n    tabClick: {\n        '& .MuiTabs-indicator': {\n            display: 'flex',\n            justifyContent: 'center',\n            backgroundColor: 'transparent',\n        },\n        '& .MuiTabs-indicatorSpan': {\n            maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#F8D6A4',\n            borderRadius: 4\n        },\n        \"& .MuiTab-root.Mui-selected\": {\n            color: 'black'\n        }\n    },\n    tab: {\n        textTransform: 'none',\n        fontFamily: '',\n        fontSize: '16px',\n        borderRadius: 2,\n        fontWeight: 'bold',\n    }\n\n}));\n\nconst FeedApplyJob: React.FC<Props> = ({ event }): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const [value, setValue] = React.useState('1');\n\n    const user = useSelector((state: RootState) => state.user);\n\n    const classes = useStyles();\n\n    const findJobUserApply = event.usersApplyJob.filter((userapply: any) => userapply.userApply.username === user.user.username);\n\n    const userApply = event.usersApplyJob.map((userapply: any) => userapply.userApply.username);\n\n    const userApplys = event.usersApplyJob.some((userapply: any) => user.user.username.includes(userapply.userApply.username));\n\n    const userJob = event.usersApplyJob.map((userjob: any) => userjob.jobEvent._id);\n    return (\n        <>\n            {findJobUserApply.map((job: any) =>\n                <Toolbar key={job._id} className={classes.toolBar}>\n                    <Box className={classes.toolbarContent}>\n                        <TabContext value={value}>\n                            <TabPanel value=\"1\" >\n                                {/* de rieng ra 1 component */}\n                                <Card className={classes.card}>\n                                    <CardContent>\n                                        <Box sx={{ display: \"flex\", flexDirection: \"row\", marginTop: \"22px\", marginLeft: \"35px\" }}>\n                                            <Box sx={{ fontWeight: \"bold\", fontSize: \"21px\" }}>\n                                                {event.nameEvent}\n                                            </Box>\n                                            <PlayArrowIcon style={{ fontSize: \"35px\", margin: \"-5px 10px 0px 10px\", color: \"#c6c9c9\" }} />\n                                            <Box sx={{ fontWeight: \"bold\", fontSize: \"21px\" }}>\n                                                {job.jobEvent.nameJob}\n                                            </Box>\n                                            <Box flexGrow={1} />\n                                            {job.notiApplyJob == \"Chờ phê duyệt\" ? (\n                                                <Box sx={{ marginRight: \"40px\", fontWeight: \"500\" }}>\n                                                    {job.notiApplyJob}\n                                                </Box>\n                                            ) : job.notiApplyJob == \"Bạn đã ứng tuyển thành công\" ? (\n                                                <Box sx={{ marginRight: \"40px\", fontWeight: \"500\", color: \"#00B14F\" }}>\n                                                    {job.notiApplyJob}\n                                                </Box>\n                                            ) : job.notiApplyJob == \"Bạn đã ứng tuyển thất bại\" ? (\n                                                <Box sx={{ marginRight: \"40px\", fontWeight: \"500\", color: \"red\" }}>\n                                                    {job.notiApplyJob}\n                                                </Box>\n                                            ) : null\n                                            }\n                                        </Box>\n\n                                        <Box sx={{ fontSize: \"16px\", marginTop: \"7px\", marginLeft: \"35px\" }}>\n                                            {event.poster.username}\n                                        </Box>\n\n                                        <Box sx={{ fontSize: \"16px\", marginTop: \"30px\", marginLeft: \"35px\" }}>\n                                            Địa điểm: {event.location}\n                                        </Box>\n\n                                        <Box sx={{ fontSize: \"15px\", marginTop: \"10px\", marginLeft: \"35px\" }}>\n                                            {event?.dayStart ?? null} - {event?.dayEnd ?? null}\n                                        </Box>\n                                        <Box sx={{ display: \"flex\", flexDirection: \"row\" }} >\n                                            <Box>\n                                                <Box sx={{ fontSize: \"15px\", marginTop: \"20px\", marginLeft: \"35px\" }}>\n                                                    Mô tả: {job.jobEvent.jobDescription}\n                                                </Box>\n\n                                                <Box sx={{ fontSize: \"15px\", marginTop: \"10px\", marginLeft: \"35px\" }}>\n                                                    Yêu cầu: {job.jobEvent.jobRequest}\n                                                </Box>\n\n                                                <Box sx={{ fontSize: \"15px\", marginTop: \"10px\", marginLeft: \"35px\" }}>\n                                                    Quyền lợi: {job.jobEvent.benefit}\n                                                </Box>\n                                            </Box>\n                                            <Box flexGrow={1} />\n                                            <Box>\n                                                {userApplys ? (\n                                                    user.user.username == job.userApply.username && job.notiApplyJob == \"Chờ phê duyệt\" || user.user.username == job.userApply.username && job.notiApplyJob == \"Bạn đã ứng tuyển thất bại\" ? (\n                                                        <Box sx={{ margin: \"30px 30px 0px 0px\" }} >\n                                                            <Button style={{ backgroundColor: \"red\", color: \"white\", height: \"30px\", width: \"120px\", fontSize: \"12px\", fontWeight: \"bold\", borderRadius: \"6px\", textTransform: \"capitalize\" }} onClick={(e) => dispatch(userUnApplyJob(event._id, job.jobEvent._id))}>Hủy Ứng Tuyển</Button>\n                                                        </Box>\n                                                    ) : null\n                                                ) : userApply !== user.user.username ? (\n                                                    job.jobEvent._id !== userJob ? (\n                                                        <Box sx={{ margin: \"30px 30px 0px 0px\" }}>\n                                                            <Button style={{ backgroundColor: \"#00B14F\", color: \"white\", height: \"30px\", width: \"120px\", fontSize: \"12px\", fontWeight: \"bold\", borderRadius: \"6px\", textTransform: \"capitalize\" }} onClick={(e) => dispatch(userApplyJob(event._id, job.jobEvent._id))}>Ứng Tuyển</Button>\n                                                        </Box>\n                                                    ) : null\n                                                ) : null\n                                                }\n                                            </Box>\n                                        </Box>\n                                    </CardContent>\n\n                                </Card>\n                            </TabPanel>\n                        </TabContext>\n\n                    </Box>\n                </Toolbar >\n            )}\n        </>\n    );\n};\n\nexport default FeedApplyJob;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\FeedStorageEvent.tsx",["741","742"],"import * as React from 'react';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { Avatar, Card, CardContent, CardHeader, CardMedia, Toolbar, Typography, Divider, Grid, Box } from '@mui/material';\nimport { Bookmark, BookmarkBorder } from '@mui/icons-material';\nimport TabContext from '@mui/lab/TabContext';\nimport TabPanel from '@mui/lab/TabPanel';\nimport { green } from '@mui/material/colors';\nimport { createStorager, deleteStoragerInList } from \"redux/actions/user\";\nimport { formatDistance } from 'date-fns';\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RootState } from \"redux/reducers\";\n\ntype Props = {\n    event: any;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    toolBar: {\n        dislay: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    toolbarContent: {\n        justifyContent: 'center',\n        backgroundColor: 'none',\n        flexDirection: 'column',\n        marginBottom: 'auto'\n    },\n    card: {\n        borderRadius: '12px',\n        margin: 'auto',\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width:\"1400px\"\n    },\n    myMedia: {\n        width: \"320px\",\n        borderRadius: \"24px\"\n    },\n    cardHold: {\n        justifyContent: 'center',\n        maxWidth: '100%',\n        maxHeight: '100%',\n        width: '500px',\n        height: '800px',\n        borderRadius: '12px',\n    },\n    button: {\n        backgroundColor: '#CBB7F5',\n        color: '#434343',\n        height: '40px',\n        width: '100px',\n        fontSize: '12px',\n        fontWeight: 'bold',\n        textTransform: 'none',\n        margin: '7px 0px 0px 10px',\n        borderRadius: '10px',\n        border: '1px solid',\n        borderColor: '#808080',\n    },\n    toolbarTitle: {\n        justifyContent: 'center',\n        paddingTop: '11px',\n        backgroundColor: 'white',\n        maxWidth: '100%'\n    },\n    box: {\n        justifyContent: 'center',\n        textAlign: 'center'\n    },\n    tabClick: {\n        '& .MuiTabs-indicator': {\n            display: 'flex',\n            justifyContent: 'center',\n            backgroundColor: 'transparent',\n        },\n        '& .MuiTabs-indicatorSpan': {\n            maxWidth: 50,\n            width: '100%',\n            backgroundColor: '#F8D6A4',\n            borderRadius: 4\n        },\n        \"& .MuiTab-root.Mui-selected\": {\n            color: 'black'\n        }\n    },\n    tab: {\n        textTransform: 'none',\n        fontFamily: '',\n        fontSize: '16px',\n        borderRadius: 2,\n        fontWeight: 'bold',\n    }\n\n}));\n\nconst FeedStorageEvent: React.FC<Props> = ({ event }): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const user = useSelector((state: RootState) => state.user);\n    const [value, setValue] = React.useState('1');\n\n    function handleClickStorage() {\n        dispatch(createStorager(event._id));\n    }\n\n    function handleClickUnStorage() {\n        dispatch(deleteStoragerInList(event._id));\n    }\n\n    function convertTZ(date: any, tzString: any) {\n        return new Date(date).toLocaleString(\"en-TT\", { timeZone: tzString });\n    }\n\n    const textAvatar = event.poster.username ?? null;\n    const letterAvatar = textAvatar.charAt(0).toUpperCase();\n\n    const lettercreatedAt = (formatDistance(new Date(event.created_at), Date.now(), { addSuffix: true })).split(\"about\");\n\n    const storager = event.storagers.map((storager: any) => storager.storager.username);\n\n    const storagers = event.storagers.some((storager: any) => user.user.username.includes(storager.storager.username));\n\n    const compareUser = storagers ? (\n        <Bookmark onClick={handleClickUnStorage} style={{ width: \"30px\", height: \"30px\", color: 'black', marginTop: \"15px\", marginRight: \"15px\" }} />\n    ) : storager !== user.user.username ? (\n        <BookmarkBorder onClick={handleClickStorage} style={{ width: \"30px\", height: \"30px\", color: 'black', marginTop: \"15px\", marginRight: \"15px\" }} />\n    ) : null\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Toolbar className={classes.toolBar}>\n                <Box className={classes.toolbarContent}>\n                    <TabContext value={value}>\n                        <TabPanel value=\"1\" >\n                            {/* de rieng ra 1 component */}\n                            <Card className={classes.card}>\n                                <Box display={'flex'} flexDirection={'row'}>\n                                    <Box sx={{ marginTop: \"50px\", marginLeft: \"20px\", fontSize: \"20px\", fontWeight: \"bold\", width: \"850px\" }}>\n                                        <Box sx={{ marginLeft: \"15px\" }}>\n                                            {event.nameEvent}\n                                        </Box>\n                                        <Typography style={{ textAlign: 'left', fontSize: '14px', margin: '0px 14px', marginTop: \"6px\" }}>\n                                            {event?.dayStart ?? null} - {event?.dayEnd ?? null}\n                                        </Typography>\n                                        <Box>\n                                            <CardHeader\n                                                avatar={\n                                                    <Avatar style={{ backgroundColor: green[500] }} aria-label=\"recipe\">\n                                                        {letterAvatar}\n                                                    </Avatar>\n                                                }\n                                                title={event.poster.username ?? null}\n                                                titleTypographyProps={{ align: 'left', fontSize: '16px', fontWeight: 'bold' }}\n                                                subheader={lettercreatedAt}\n                                                subheaderTypographyProps={{ align: 'left', fontSize: '12px' }}\n                                            >\n                                            </CardHeader>\n\n                                            <CardContent>\n                                                <Box>\n                                                    <Box>\n                                                        <Typography style={{ textAlign: 'left', fontSize: '15px', marginTop: \"-10px\", marginBottom: '14px' }}>\n                                                            Công việc:\n                                                        </Typography>\n                                                        <Grid container spacing={2} columns={16} style={{ marginLeft: \"20px\", marginBottom: \"25px\" }}>\n                                                            {event.job.map((job: any) =>\n                                                                <Grid item xs={4} style={{ fontWeight: \"initial\", fontSize: \"14px\" }}>\n                                                                    {job.nameJob}\n                                                                </Grid>\n                                                            )}\n                                                        </Grid>\n                                                    </Box>\n                                                    <Box>\n                                                        <Typography style={{ textAlign: 'left', fontSize: '14px' }}>\n                                                            Địa điểm: {event.location ?? null}\n                                                        </Typography>\n                                                    </Box>\n                                                    <Box sx={{ marginTop: \"30px\" }}>\n                                                        {event.storagers.filter((storager:any) => storager.storager.username == user.user.username).map((storager: any) =>\n                                                            <Typography style={{ textAlign: 'left', fontSize: '14px' }}>\n                                                                Ngày lưu: {convertTZ((storager.created), \"Asia/Bangkok\")}\n                                                            </Typography>\n                                                        )}\n                                                    </Box>\n                                                </Box>\n                                            </CardContent >\n                                        </Box>\n                                    </Box>\n                                    <Box >\n                                        <Divider orientation=\"vertical\" style={{ margin: '55px 0px', height: \"250px\", backgroundColor: \"rgba(0,0,0,0.5)\" }} />\n                                    </Box>\n                                    <Box sx={{ width: \"730px\" }}>\n                                        <Box display={'flex'} flexDirection={'column'}>\n                                            <Box textAlign={'right'}>\n                                                {compareUser}\n                                            </Box>\n                                            <Box sx={{ marginTop: \"30px\", fontSize: \"20px\", fontWeight: \"bold\", textAlign: \"center\" }}>\n                                                Khoa {event.departmentEvent.nameDepartment.toLowerCase()}\n                                            </Box>\n                                            <Box sx={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", marginTop: \"25px\" }}>\n                                                <CardMedia\n                                                    className={classes.myMedia}\n                                                    component=\"img\"\n                                                    image={event?.image}\n                                                    alt=\"Paella dish\"\n                                                >\n                                                </CardMedia>\n                                            </Box>\n                                        </Box>\n                                    </Box>\n                                </Box>\n                            </Card>\n                        </TabPanel>\n                    </TabContext>\n\n                </Box>\n            </Toolbar >\n        </>\n    );\n};\n\nexport default FeedStorageEvent;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\User\\UpdateProfile.tsx",[],"C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\contents\\Content.tsx",["743","744","745","746","747","748","749"],"import * as React from \"react\";\nimport { styled, makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getEvents, getDepartments } from \"redux/actions/user\";\nimport { RootState } from \"redux/reducers\";\nimport { logOutUser } from \"redux/actions/user\";\nimport { Stack, Divider, AppBar, Box, Toolbar, Typography, Popover, MenuItem, Avatar, InputAdornment, OutlinedInput, IconButton, TextField } from '@mui/material';\n\nimport { MenuItem as MenuItemDepartment } from \"@material-ui/core\"\nimport { StyledMenuItem } from '../../layouts/navigation/style'\nimport { BoxSpan } from '../../layouts/navigation/style'\n\nimport { IEvent } from \"redux/types/event\";\nimport { IDepartment } from \"redux/types/department\";\n\nimport FeedContent from \"pages/contents/FeedContent\";\nimport FeedDetailContent from \"pages/contents/FeedDetailContent\";\n\nimport SearchIcon from '@mui/icons-material/Search';\nimport { Person, Notifications } from '@mui/icons-material';\n\nimport { Link, NavLink } from \"react-router-dom\";\n\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\n    width: 240,\n    '& fieldset': {\n        borderWidth: `1px !important`,\n        // borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\n        borderColor: '#rgba(0, 0, 0, 0.87)'\n    },\n}));\n\nconst useStyles = makeStyles((theme) => ({\n    textfield: {\n        '& .MuiSelect-select': {\n            color: 'black', fontSize: '12px'\n        },\n        '& .MuiSvgIcon-root': {\n            fontSize: '20px', paddingRight: '2px'\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderRadius: '20px'\n            },\n            '&.Mui-focused fieldset': {\n                border: \"1px solid black\",\n            }\n        },\n        '& label.Mui-focused': {\n            color: 'black',\n        },\n        '& fieldset': {\n            borderRadius: '30px'\n        },\n\n    },\n    hoverDetail: {\n        '&: hover': {\n            color: 'green',\n        },\n    },\n}))\n\nconst StyledRoot = styled(AppBar)(() => ({\n    boxShadow: 'none',\n    width: '100%',\n    backgroundColor: 'white',\n    fontWeight: 'bold',\n}));\n\nconst Content: React.FC = (): JSX.Element => {\n\n    const dispatch = useDispatch();\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n\n    const openUser = Boolean(anchorElUser);\n    const handleClickUser = (event: any) => {\n        setAnchorElUser(event.currentTarget);\n    };\n    const handleCloseUser = () => {\n        setAnchorElUser(null);\n    };\n    const classes = useStyles();\n    const [filterName, setFilterName] = React.useState('');\n\n    const [filterNameDepartment, setFilterNameDepartment] = React.useState('');\n\n    const [events, setEvents] = React.useState<IEvent[]>([]);\n    const [eventDetails, setEventDetails] = React.useState<IEvent[]>([]);\n    const [departments, setDepartments] = React.useState<IDepartment[]>([]);\n    const user = useSelector((state: RootState) => state.user);\n\n    React.useEffect(() => {\n        dispatch(getEvents());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        dispatch(getDepartments());\n    }, [dispatch]);\n\n    React.useEffect(() => {\n        setEvents(() =>\n            user?.events?.filter((event: any) =>\n                event.nameEvent\n            ));\n    }, [user]);\n    const findIndexEvent = user.events.map((event: any) => event.nameEvent)\n    React.useEffect(() => {\n        setEventDetails(() =>\n            user?.events?.filter((event: any) =>\n                event.nameEvent == findIndexEvent[0]\n            ));\n    }, [user]);\n    React.useEffect(() => {\n        setDepartments(() => user?.departments?.filter((department: any) => department.nameDepartment));\n    }, [user]);\n\n    const myInputProps_TenKhoa = {\n        startAdornment: <Box style={{ fontSize: '12px' }}\n        > Khoa</Box>,\n        style: {\n            height: '48px',\n        }\n    }\n\n    const handleFilterByName = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase()) || event.location.toLowerCase().startsWith(keyword.toLowerCase()) || event.job.some((job: any) => job.nameJob.toLowerCase().startsWith(keyword.toLowerCase()));\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.nameEvent || event.location || event.job.some((job: any) => job.nameJob)));\n        }\n\n        setFilterName(keyword);\n    };\n\n    const handleFilterByNameDepartment = (event: any) => {\n        const keyword = event.target.value;\n\n        if (keyword !== '') {\n            const results = user?.events?.filter((event: any) => {\n                return event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) || event.departmentEvent.nameDepartment.toLowerCase().startsWith(keyword.toLowerCase()) && event.nameEvent.toLowerCase().startsWith(keyword.toLowerCase());\n                // Use the toLowerCase() method to make it case-insensitive\n            });\n            setEvents(results);\n        } else {\n            setEvents(() => user?.events?.filter((event: any) => event.departmentEvent.nameDepartment));\n        }\n\n        setFilterNameDepartment(keyword);\n    };\n\n    React.useEffect(() => {\n        document.title = \"Trang Chủ | CTV\";\n    }, []);\n\n    return (\n        <Box>\n            <Box>\n                <StyledRoot style={{ boxShadow: \"none\", overflowX: \"hidden\" }}>\n                    <Toolbar>\n                        <Link style={{ textDecoration: 'none' }} to={'/user'}>\n                            <img src=\"/hutech-logo.ico\" style={{ height: \"56px\", width: \"50px\" }}></img>\n                        </Link>\n                        <Box textAlign={\"center\"} sx={{ flexGrow: 1 }}>\n                            <StyledSearch\n                                style={{ borderRadius: '20px', fontSize: '13px', height: \"48px\", marginRight: '16px' }}\n                                value={filterName}\n                                onChange={handleFilterByName}\n                                placeholder=\"Tìm kiếm công việc...\"\n                                startAdornment={\n                                    <InputAdornment position=\"start\" style={{ paddingLeft: 1.3 }}>\n                                        <SearchIcon style={{ width: '16px' }} sx={{ color: 'rgba(0, 0, 0, 0.87)' }} />\n                                    </InputAdornment>\n                                }\n                            />\n                            <TextField\n                                id=\"filled-select-currency\"\n                                select\n                                value={filterNameDepartment}\n                                onChange={handleFilterByNameDepartment}\n                                variant=\"outlined\"\n                                InputProps={myInputProps_TenKhoa}\n                                style={{ width: 240 }}\n                                className={classes.textfield}\n                            >\n                                {departments.map((department) => (\n                                    <MenuItemDepartment key={department._id}\n                                        value={department.nameDepartment}\n                                        style={{ fontSize: \"12px\" }}\n                                    >\n                                        {department.nameDepartment}\n                                    </MenuItemDepartment>\n                                ))}\n                            </TextField>\n                        </Box>\n                        {/* <Box>\n                            <Notifications style={{ color: 'black' }} />\n                        </Box> */}\n                        <Stack\n                            direction=\"row\"\n                            alignItems=\"center\"\n                            spacing={{\n                                xs: 0.5,\n                                sm: 1,\n                            }}\n                            sx={{ margin: 3, color: 'black' }}\n                        >\n                            <Box sx={{\n                                display: 'flex', alignItems: 'center', textAlign: 'center'\n                            }}>\n                                <IconButton onClick={(event) => handleClickUser(event)}\n                                    sx={{\n                                        p: 0,\n\n                                    }}>\n                                    <Person style={{ color: \"black\" }} />\n                                </IconButton>\n\n                                <Popover\n                                    open={openUser}\n                                    anchorEl={anchorElUser}\n                                    onClose={handleCloseUser}\n                                    anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                                    transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n                                    sx={{ marginLeft: 1 }}\n                                    PaperProps={{\n                                        style: {\n                                            borderRadius: 20,\n                                            boxShadow: 'rgba(145, 158, 171, 0.24) 0px 0px 2px 0px, rgba(145, 158, 171, 0.24) -20px 20px 40px -4px',\n                                        },\n                                        sx: {\n                                            p: 1,\n                                            width: 220,\n                                            overflowX: 'unset',\n                                            overflowY: 'unset',\n                                            '& .MuiMenuItem-root': {\n                                                px: 1,\n                                                py: 1,\n                                                typography: 'body2',\n                                                borderRadius: 1,\n                                                justifyContent: 'left'\n                                            },\n                                            '& .MuiAvatar-root': {\n                                                width: 32,\n                                                height: 32,\n                                                ml: -0.5,\n                                                mt: 1,\n                                                mr: 1,\n                                            },\n                                        },\n                                    }}\n                                >\n\n                                    <BoxSpan />\n                                    <Stack sx={{ p: 0.5 }} >\n                                        <StyledMenuItem component={NavLink} to={'/profile'} >\n                                            <Box display={\"flex\"}>\n                                                <Box>\n                                                    <Avatar src={user.user.avatar} />\n                                                </Box>\n                                                <Box flexDirection={'column'}>\n                                                    <Typography style={{ fontWeight: 500, fontSize: '14px' }}>{user.user.username}</Typography>\n                                                    <Typography style={{ color: \"#637381\", fontSize: '13.5px' }} >{user.user.email}</Typography>\n                                                </Box>\n                                            </Box>\n                                        </StyledMenuItem>\n\n                                        <Divider sx={{ borderStyle: 'dashed' }} />\n\n                                        <StyledMenuItem component={NavLink} to={'/storageEvent'}>\n                                            <Typography style={{ fontSize: '14px' }}>Sự Kiện Đã Lưu</Typography>\n                                        </StyledMenuItem>\n\n                                        <StyledMenuItem component={NavLink} to={'/applyJob'}>\n                                            <Typography style={{ fontSize: '14px', float: 'left' }}>Công Việc Đã Ứng Tuyển</Typography>\n                                        </StyledMenuItem>\n\n                                        <StyledMenuItem component={NavLink} to={'/manageJob'}>\n                                            <Typography style={{ fontSize: '14px', float: 'left' }}>Quản Lý Công việc</Typography>\n                                        </StyledMenuItem>\n\n                                        <Divider sx={{ borderStyle: 'dashed' }} />\n\n                                        <MenuItem className=\"navbar-logout\" onClick={(e) => dispatch(logOutUser())}>\n                                            <Typography style={{ fontSize: '14px' }}> Đăng Xuất</Typography>\n                                        </MenuItem>\n                                    </Stack>\n\n                                </Popover>\n                            </Box>\n                        </Stack>\n                    </Toolbar>\n                </StyledRoot>\n            </Box>\n            <Box style={{\n                display: 'flex',\n                flexDirection: 'row',\n                justifyContent: 'center'\n            }}>\n                <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\n                    {events && events.length > 0 ? (\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }}>\n                            <Box style={{ paddingLeft: '20px', top: 100, zIndex: 10, }}>\n                                {events.map((event: any) =>\n                                    <Box>\n                                        <Link style={{ textDecoration: \"none\" }} to={`/event1/${event._id}`}>\n                                            <FeedContent event={event} key={event._id} />\n                                        </Link>\n                                    </Box>\n                                )}\n                            </Box>\n                            <Box style={{ display: 'flex', paddingLeft: '20px', }}>\n                                {eventDetails.map((event: any) =>\n                                    <Box key={event._id} style={{\n                                        width: 500,\n                                        height: 500,\n                                        borderRadius: '12px',\n                                        position: 'sticky',\n                                        zIndex: 10,\n                                        top: \"100px\",\n                                    }}\n                                    >\n                                        <FeedDetailContent event={event} key={event._id} />\n                                    </Box>\n                                )}\n                            </Box>\n                        </Box>\n                    ) : (\n                        <Box style={{ margin: \"70px 0px\" }}>\n                            <Box>\n                                <img style={{ width: \"400px\", display: \"flex\", margin: \"auto\" }} src=\"/not-found.png\" />\n                            </Box>\n                            <Box>\n                                <Typography style={{ fontSize: \"45px\", fontWeight: \"bold\" }}>\n                                    Không Tồn Tại Sự Kiện\n                                </Typography>\n                            </Box>\n                        </Box>\n                    )}\n\n                </Box >\n            </Box>\n        </Box >\n    );\n};\n\nexport default Content;\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\SManager\\EventAccept.tsx",["750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766"],"import * as React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getEvent } from \"redux/actions/sManager\";\r\nimport { RootState } from \"redux/reducers\";\r\nimport { IEvent } from \"redux/types/event\";\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\n\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nimport { Button, Container, Typography, Card, CardContent, CardMedia, Box, Popover, Avatar, Box as BoxButton, FormControl, Toolbar, Divider } from '@mui/material';\r\nimport { styled } from \"@material-ui/core/styles\";\r\nimport { formatDistance } from \"date-fns\";\r\nimport { StyledMenuItem } from \"layouts/navigation/style\";\r\n\r\nconst EventAccept: React.FC = (): JSX.Element => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const StyledRoot = styled(Toolbar)(({ theme }) => ({\r\n        justifyContent: 'center',\r\n        padding: theme.spacing(0, 3, 0, 3),\r\n    }));\r\n\r\n\r\n\r\n    const [events, setEvents] = React.useState<IEvent[]>([]);\r\n    const [anchorEl, setAnchorEl] = React.useState([null]);\r\n    const smanager = useSelector((state: RootState) => state.smanager);\r\n\r\n    const [anchorElUser, setAnchorElUser] = React.useState([null]);\r\n\r\n    const handleClickUser = (event: any, index: any) => {\r\n        const newAnchorEls = [\r\n            ...anchorElUser.slice(0, index),\r\n            event.currentTarget,\r\n            ...anchorElUser.slice(index + 1)\r\n        ];\r\n        setAnchorElUser(newAnchorEls);\r\n    };\r\n    const handleCloseUser = (index: any) => {\r\n        const newAnchorEls = [\r\n            ...anchorElUser.slice(0, index),\r\n            null,\r\n            ...anchorElUser.slice(index + 1)\r\n        ];\r\n        setAnchorElUser(newAnchorEls);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        dispatch(getEvent());\r\n    }, [dispatch]);\r\n\r\n    React.useEffect(() => {\r\n        setEvents(() =>\r\n            smanager?.events?.filter((event: any) =>\r\n                event.nameEvent\r\n            ));\r\n    }, [smanager]);\r\n\r\n    const handleOpenMenu = (event: any, index: any) => {\r\n        const newAnchorEls = [\r\n            ...anchorEl.slice(0, index),\r\n            event.currentTarget,\r\n            ...anchorEl.slice(index + 1)\r\n        ];\r\n        setAnchorEl(newAnchorEls);\r\n    };\r\n\r\n    const handleCloseMenu = (index: any) => {\r\n        const newAnchorEls = [\r\n            ...anchorEl.slice(0, index),\r\n            null,\r\n            ...anchorEl.slice(index + 1)\r\n        ];\r\n        setAnchorEl(newAnchorEls);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        document.title = \"Sự kiện | Manager\";\r\n    }, []);\r\n\r\n    return (\r\n\r\n        <Container >\r\n            <StyledRoot style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                {/* navigate */}\r\n                <Box style={{ display: \"flex\", flexDirection: \"row\", width: 680 }}>\r\n                    <Box>\r\n                        <Typography gutterBottom style={{ color: \"black\", fontSize: \"20px\", fontWeight: 'bold' }}>\r\n                            Danh Sách Sự Kiện Đã Duyệt\r\n                        </Typography>\r\n                    </Box>\r\n                </Box>\r\n                {events.map((event: any, index) =>\r\n                    <Box key={event._id} width={680} marginTop={4}>\r\n                        <Box >\r\n                            <Card style={{ boxShadow: \"none\", padding: 50, borderRadius: \"24px\" }}>\r\n                                {/* header */}\r\n                                <Box style={{ marginBottom: \"20px\" }}>\r\n                                    <Box style={{ fontSize: 24, lineHeight: 3, fontWeight: '700', letterSpacing: 0.4 }}>\r\n                                        {event?.nameEvent ?? null}\r\n                                    </Box>\r\n                                </Box>\r\n\r\n                                <Box style={{ marginBottom: \"20px\" }}>\r\n                                    <Box\r\n                                        style={{\r\n                                            display: \"flex\", flexDirection: \"row\", alignItems: \"left\",\r\n                                            borderRadius: \"40px\",\r\n                                        }}>\r\n                                        <Avatar style={{ backgroundColor: \"red\", marginRight: \"15px\", width: '30px', height: '30px', fontSize: '13px' }}>\r\n                                            {event.poster.username.charAt(0).toUpperCase()}\r\n                                        </Avatar>\r\n                                        <Box>\r\n                                            <Typography style={{ fontWeight: \"600\", fontSize: '15px' }}>{event.poster.username}</Typography>\r\n                                            <Typography style={{ fontWeight: \"400\", fontSize: '13px', color: 'rgb(145, 158, 171)' }}>{event.poster.department.nameDepartment}</Typography>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Box>\r\n                                {/* noidung */}\r\n                                <Box style={{ marginBottom: \"20px\" }}>\r\n                                    <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\r\n                                        Nội dung\r\n                                    </Typography>\r\n                                    <Box style={{ fontSize: '13px' }} dangerouslySetInnerHTML={{ __html: event.contentEvent }} />\r\n                                </Box>\r\n                                {/* job */}\r\n                                <Box style={{ marginBottom: \"20px\" }}>\r\n                                    <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\r\n                                        Công việc\r\n                                    </Typography>\r\n                                    {event.job.map((job: any) =>\r\n                                        <Box style={{ fontSize: '13px', paddingBottom: 5 }}>\r\n                                            • {job.nameJob}\r\n                                        </Box>\r\n                                    )}\r\n                                </Box>\r\n\r\n                                {/* detail */}\r\n                                <Typography gutterBottom style={{ color: \"black\", fontSize: \"16px\", fontWeight: '600' }}>\r\n                                    Chi tiết\r\n                                </Typography>\r\n                                <Box display={\"flex\"}\r\n                                    flexDirection={'column'}\r\n                                    justifyContent={'center'}\r\n                                    alignItems={'center'}\r\n                                    style={{ backgroundColor: 'white', padding: '20px 0px', borderRadius: '20px' }}>\r\n\r\n                                    <Box sx={{\r\n                                        display: 'grid',\r\n                                        gap: 4,\r\n                                        gridTemplateColumns: 'repeat(3, 1fr)',\r\n                                        color: \"rgb(33, 43, 54)\",\r\n                                        columnGap: 11\r\n\r\n                                    }} >\r\n\r\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\r\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>\r\n                                                Số lượng\r\n                                            </Box>\r\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>\r\n                                                {event.quantityUser}\r\n                                            </Box>\r\n                                        </FormControl>\r\n\r\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\r\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Địa điểm</Box>\r\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>{event.location}</Box>\r\n                                        </FormControl>\r\n\r\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\r\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Tổng chi phí </Box>\r\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>{new Intl.NumberFormat().format(event.costs)}</Box>\r\n                                        </FormControl>\r\n\r\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\r\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Ngày bắt đầu </Box>\r\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }} >\r\n                                                {event.dayStart}\r\n                                            </Box>\r\n                                        </FormControl>\r\n\r\n                                        <FormControl sx={{ alignItems: 'center', gap: 1 }} >\r\n                                            <Box sx={{ fontSize: '14px', color: '#757575', fontWeight: 500, }}>Ngày kết thúc </Box>\r\n                                            <Box sx={{ fontSize: '14px', fontWeight: '1000' }}>\r\n                                                {event.dayEnd}\r\n                                            </Box>\r\n                                        </FormControl>\r\n\r\n                                    </Box>\r\n                                </Box>\r\n\r\n                                {/* Image event */}\r\n                                <Box display={\"flex\"}\r\n                                    flexDirection={'column'}\r\n                                    justifyContent={'center'}\r\n                                    alignItems={'center'}>\r\n\r\n                                    <CardMedia\r\n                                        component=\"img\"\r\n                                        image={event.image}\r\n                                        alt=\"Không có ảnh\"\r\n                                        style={{ width: 500, borderRadius: 10, margin: '14px 0' }}\r\n                                    />\r\n                                </Box>\r\n                            </Card>\r\n                        </Box>\r\n                    </Box>\r\n                )\r\n                }\r\n            </StyledRoot >\r\n        </Container >\r\n    );\r\n};\r\n\r\nexport default EventAccept;\r\n","C:\\Users\\ADMIN\\Desktop\\DATN_CTV\\frontend\\src\\pages\\auth\\FormDepartment_User.tsx",["767","768"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\index.tsx",[],["769","770"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\store.ts",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\App.tsx",["771"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\layouts\\AppLoader.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\actions\\admin.ts",["772"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\utils\\headers.ts",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\layouts\\navigation\\sidebar.tsx",["773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818"],"import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { logOutAdmin } from \"../../redux/actions/admin\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { Box, Drawer, Avatar, Typography, Divider } from \"@mui/material\";\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\n\r\nimport NavSection from \"./navSelection\";\r\n\r\nconst NAV_WIDTH = 270;\r\n\r\nconst SideBar: React.FC = (): JSX.Element => {\r\n  const dispatch = useDispatch();\r\n\r\n  const admin = useSelector((state: RootState) => state.admin);\r\n\r\n  const topLinks =\r\n  admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/user') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/city') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/addcity') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/product') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/newproduct') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/typeproduct') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/newtypeproduct') ? (\r\n      <Box>\r\n        <Box\r\n          style={{\r\n            display: \"flex\", flexDirection: \"row\",\r\n            borderRadius: \"16px\", padding: \"20px 10px\",\r\n            backgroundColor: '#f5f5f5', marginTop: '40px'\r\n          }}>\r\n          <Box>\r\n            <Avatar style={{ backgroundColor: \"green\", margin: \"0 10px\" }}>\r\n              {admin.admin.username.charAt(0).toUpperCase()}\r\n            </Avatar>\r\n          </Box>\r\n          <Box style={{ display: \"flex\", flexDirection: \"column\", textAlign: \"left\" }}>\r\n            <Box style={{ fontSize: \"14px\", marginBottom: \"5px\" }}>\r\n              {admin.admin.username}\r\n            </Box>\r\n            <Typography style={{ fontSize: \"13px\" }}>\r\n              {admin.getRole.nameRole}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    ) : null;\r\n\r\n\r\n\r\n  const bottomLinks = admin.isAuthenticated && window.location.pathname.includes('/user') || admin.isAuthenticated && window.location.pathname.includes('/city') || admin.isAuthenticated && window.location.pathname.includes('/addcity') || admin.isAuthenticated && window.location.pathname.includes('/product') || admin.isAuthenticated && window.location.pathname.includes('/newproduct') || admin.isAuthenticated && window.location.pathname.includes('/typeproduct') || admin.isAuthenticated && window.location.pathname.includes('/newtypeproduct') || admin.isAuthenticated && window.location.pathname.includes('/orderCart') ? (\r\n    <Box onClick={(e) => dispatch(logOutAdmin())} style={{ display: 'flex', marginBottom: \"20px\", justifyContent: 'center', cursor: 'pointer' }}>\r\n      <Box style={{\r\n        border: '1px solid #b5b5b5',\r\n        borderRadius: '12px', textAlign: 'center',\r\n        marginTop: '20px', padding: '6px', paddingTop: '8px',\r\n        width: 140, display: 'flex', flexDirection: 'row', justifyContent: 'center'\r\n      }}>\r\n        <Typography style={{ fontSize: '14px', paddingRight: '10px' }} >\r\n          Đăng xuất\r\n        </Typography>\r\n        <LogoutIcon style={{ width: '14px', color: '#ee6f81', paddingBottom: '2px' }} />\r\n      </Box>\r\n    </Box>\r\n  ) :null\r\n\r\n  const sideBar = admin.isAuthenticated && window.location.pathname.includes('/user') || admin.isAuthenticated && window.location.pathname.includes('/city') || admin.isAuthenticated && window.location.pathname.includes('/addcity') || admin.isAuthenticated && window.location.pathname.includes('/product') || admin.isAuthenticated && window.location.pathname.includes('/newproduct') || admin.isAuthenticated && window.location.pathname.includes('/typeproduct') || admin.isAuthenticated && window.location.pathname.includes('/newtypeproduct') || admin.isAuthenticated && window.location.pathname.includes('/orderCart') ? (\r\n    <>\r\n      <Box component=\"nav\"\r\n        sx={{\r\n          flexShrink: { lg: 0 },\r\n          width: { lg: NAV_WIDTH },\r\n        }}>\r\n        <Drawer\r\n          open\r\n          variant='permanent'\r\n          PaperProps={{\r\n            sx: {\r\n              width: NAV_WIDTH,\r\n              bgcolor: 'background.default',\r\n              borderRightStyle: 'dashed'\r\n            }\r\n          }}>\r\n\r\n          <Box sx={{ px: 2, py: 3, display: 'inline-block', fontWeight: \"bold\" }}>\r\n            {topLinks}\r\n          </Box>\r\n          <Divider />\r\n\r\n          <NavSection />\r\n          <Box flexGrow={1} />\r\n\r\n          <Divider  />\r\n          {bottomLinks}\r\n\r\n        </Drawer>\r\n      </Box>\r\n\r\n    </>\r\n  ) : null\r\n\r\n  return (\r\n    <>\r\n      {sideBar}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\components\\routing\\Routes.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\reducers\\index.ts",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\actions\\types.ts",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\layouts\\navigation\\navSelection.tsx",["819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834"],"import * as React from \"react\";\r\nimport { ListItemText, ListItemIcon } from '@mui/material';\r\nimport { StyledListItemButton } from './style';\r\nimport { dataAdmin } from './dataConfig'\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { Stack } from '@mui/system';\r\n\r\nimport { NavLink as RtLink } from 'react-router-dom';\r\n\r\nexport default function NavSection() {\r\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\r\n\r\n    const handleListItemClick = (event: any, index: any) => {\r\n        setSelectedIndex(index);\r\n    };\r\n\r\n    const admin = useSelector((state: RootState) => state.admin);\r\n    const topAM = admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/user') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/city') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/addcity') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/product') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/newproduct') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/typeproduct') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/newtypeproduct') || admin.isAuthenticated && admin.getRole.keyRole === \"admin\" && window.location.pathname.includes('/orderCart') ? (\r\n        <Stack spacing={2} style={{ padding: \"10px 14px\" }}>\r\n            {dataAdmin.map((item, index) => (\r\n                <StyledListItemButton disableRipple selected={selectedIndex === index} onClick={(event) => handleListItemClick(event, index)}\r\n                    component={RtLink} to={item.path} key={item.name} style={{ padding: \"8px 3px\" }} sx={{\r\n                        \"&.Mui-selected\": {\r\n                            backgroundColor: \"#f4f5f5\",\r\n                            fontWeight: \"500\",\r\n                            borderRadius: \"14px\",\r\n                            color: 'black'\r\n\r\n                        },\r\n                        \"&.Mui-selected:hover\": {\r\n                            backgroundColor: \"#f4f5f5\"\r\n                        },\r\n                        \"&.Mui-focusVisible\": {\r\n                            backgroundColor: \"none\"\r\n                        },\r\n                        \":hover\": {\r\n                            backgroundColor: \"white\"\r\n                        }\r\n                    }}>\r\n                    <ListItemIcon style={{ paddingLeft: '16px' }}>\r\n                        {item.icon}\r\n                    </ListItemIcon>\r\n                    <ListItemText style={{ fontSize: \"12px\" }} disableTypography primary={item.name} />\r\n                </StyledListItemButton>\r\n            ))}\r\n        </Stack>\r\n    ) : null;\r\n\r\n    return (\r\n        <>\r\n            {topAM}\r\n        </>\r\n\r\n    )\r\n}","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\constant\\routesProps.ts",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\components\\routing\\GuestRoute.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\components\\routing\\AdminRoute.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\reducers\\admin.ts",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\layouts\\navigation\\dataConfig.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\layouts\\navigation\\style.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\auth\\Login.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\Product.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\Guest.tsx",["835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870","871","872","873","874"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\TypeProduct.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\NewProduct.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\User.tsx",["875"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\NewTypeProduct.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\UserForm.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\CreateTypeProduct.tsx",["876","877"],"import React from \"react\";\r\nimport { Box, Button, CircularProgress, Container, FormControl, FormLabel, TextField, Typography } from \"@mui/material\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTypeProduct } from \"../../redux/actions/admin\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formLabel: {\r\n        fontWeight: 600,\r\n        marginBottom: theme.spacing(1.5),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1, 0),\r\n    },\r\n    placeholder: {\r\n        color: \"#aaa\"\r\n    },\r\n    selectStyle: {\r\n        fontSize: '13px',\r\n        marginBottom: '28px',\r\n        marginTop: 10,\r\n        width: 300,\r\n        \"& fieldset\": {\r\n            borderRadius: \"10px\",\r\n        },\r\n    },\r\n    btnLogin: {\r\n        '&.MuiButton-root:hover': {\r\n            backgroundColor: \"transparent\",\r\n        }\r\n    },\r\n}));\r\ntype Props = {\r\n    typeproduct: any;\r\n};\r\n\r\ninterface IInitialValues {\r\n    nameTypeProduct: string;\r\n}\r\n\r\nconst CreateTypeProduct: React.FC<Props> = ({ typeproduct }): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const initialValues: IInitialValues = {\r\n        nameTypeProduct: typeproduct?.nameTypeProduct ?? \"\",\r\n    };\r\n\r\n\r\n    const onHandleSubmit = (\r\n        values: IInitialValues,\r\n        { setSubmitting }: any\r\n    ): Promise<void> =>\r\n        dispatch<any>(addTypeProduct(values, setSubmitting));\r\n\r\n    const validationSchema = Yup.object({\r\n        nameTypeProduct: Yup.string().required(\"required!\"),\r\n    });\r\n\r\n    return (\r\n        <Container style={{ maxWidth: 600 }}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={onHandleSubmit}\r\n            >\r\n                {({ values, handleChange, handleBlur, errors, touched, isSubmitting, handleSubmit }) => (\r\n                    <form noValidate onSubmit={handleSubmit}>\r\n                        <Box>\r\n                            <FormControl fullWidth className={classes.formControl}>\r\n                                <FormLabel classes={{ root: classes.formLabel }}>Tên Loại Sản Phẩm</FormLabel>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    name='nameTypeProduct'\r\n                                    value={values.nameTypeProduct}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    placeholder='Nhập tên loại sản phẩm'\r\n                                    helperText={touched.nameTypeProduct ? errors.nameTypeProduct : \"\"}\r\n                                    error={touched.nameTypeProduct ? Boolean(errors.nameTypeProduct) : false}\r\n                                />\r\n                            </FormControl>\r\n                            <Box marginTop={2}>\r\n                                <Button\r\n                                    type='submit'\r\n                                    disabled={isSubmitting}\r\n                                    style={{\r\n                                        color: \"rgb(33, 43, 54)\",\r\n                                        height: \"34px\",\r\n                                        width: \"120px\",\r\n                                        fontSize: \"12px\",\r\n                                        borderRadius: \"4px\",\r\n                                        fontWeight: 500,\r\n                                        textTransform: \"capitalize\",\r\n                                        border: '1px solid rgb(33, 43, 54)',\r\n                                        marginRight: 10\r\n                                    }}\r\n                                >\r\n                                    {isSubmitting ? <CircularProgress size='1rem' /> : \"Thêm Sản Phẩm\"}\r\n                                </Button>\r\n\r\n                                <Button style={{\r\n                                    color: \"#FF6969\",\r\n                                    height: \"34px\",\r\n                                    width: \"120px\",\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: 500,\r\n                                    borderRadius: \"4px\",\r\n                                    textTransform: \"capitalize\",\r\n                                    border: '1px solid #FF6969',\r\n\r\n                                }}\r\n                                    onClick={history.goBack}\r\n                                >Quay lại</Button>\r\n                            </Box>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CreateTypeProduct;\r\n","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\CreateProduct.tsx",["878"],"import React from \"react\";\r\nimport { Box, Button, CircularProgress, Container, FormControl, FormLabel, TextField, Typography } from \"@mui/material\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addProduct } from \"../../redux/actions/admin\";\r\nimport FormTypeProduct from \"../../pages/auth/FormTypeProduct\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formLabel: {\r\n        fontWeight: 600,\r\n        marginBottom: theme.spacing(1.5),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1, 0),\r\n    },\r\n    placeholder: {\r\n        color: \"#aaa\"\r\n    },\r\n    selectStyle: {\r\n        fontSize: '13px',\r\n        marginBottom: '28px',\r\n        marginTop: 10,\r\n        width: 300,\r\n        \"& fieldset\": {\r\n            borderRadius: \"10px\",\r\n        },\r\n    },\r\n    btnLogin: {\r\n        '&.MuiButton-root:hover': {\r\n            backgroundColor: \"transparent\",\r\n        }\r\n    },\r\n}));\r\ntype Props = {\r\n    product: any;\r\n};\r\n\r\ninterface IInitialValues {\r\n    nameProduct: string;\r\n    typeProduct: any;\r\n    price: number;\r\n    productDetail: string;\r\n    productDescription: string;\r\n    image: string;\r\n}\r\n\r\nconst CreateProduct: React.FC<Props> = ({ product }): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const initialValues: IInitialValues = {\r\n        nameProduct: product?.nameProduct ?? \"\",\r\n        typeProduct: product?.typeProduct ?? \"\",\r\n        price: product?.price ?? \"\",\r\n        productDetail: product?.productDetail ?? \"\",\r\n        productDescription: product?.productDescription ?? \"\",\r\n        image: product?.image ?? \"\",\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nameProduct: Yup.string().required(\"required!\"),\r\n        price: Yup.string().required(\"required!\"),\r\n        productDetail: Yup.string().required(\"required!\"),\r\n        productDescription: Yup.string().required(\"required!\"),\r\n    });\r\n\r\n    return (\r\n        <Container style={{ maxWidth: 600 }}>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={(values: any, { setSubmitting }) => {\r\n                    let formData = new FormData();\r\n                    formData.append(\"nameProduct\", values.nameProduct);\r\n                    formData.append(\"typeProduct\", values.typeProduct);\r\n                    formData.append(\"price\", values.price);\r\n                    formData.append(\"productDetail\", values.productDetail);\r\n                    formData.append(\"image\", values.image);\r\n                    formData.append(\"productDescription\", values.productDescription);\r\n                    dispatch(addProduct(formData, setSubmitting));\r\n                }}\r\n            >\r\n                {({ values, handleChange, handleBlur, errors, touched, isSubmitting, handleSubmit, setFieldValue }) => (\r\n                    <form noValidate onSubmit={handleSubmit}>\r\n                        <Box>\r\n                            <FormControl fullWidth className={classes.formControl}>\r\n                                <FormLabel classes={{ root: classes.formLabel }}>Tên Sản Phẩm</FormLabel>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    name='nameProduct'\r\n                                    value={values.nameProduct}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    placeholder='Nhập tên sản phẩm'\r\n                                    helperText={touched.nameProduct ? errors.nameProduct : \"\"}\r\n                                    error={touched.nameProduct ? Boolean(errors.nameProduct) : false}\r\n                                />\r\n                            </FormControl>\r\n                            <FormTypeProduct isTypeProduct={true} />\r\n                            <FormControl fullWidth className={classes.formControl}>\r\n                                <FormLabel classes={{ root: classes.formLabel }}>Giá Tiền</FormLabel>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    name='price'\r\n                                    value={values.price}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    placeholder='Nhập giá sản phẩm'\r\n                                    helperText={touched.price ? errors.price : \"\"}\r\n                                    error={touched.price ? Boolean(errors.price) : false}\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl fullWidth className={classes.formControl}>\r\n                                <FormLabel classes={{ root: classes.formLabel }}>Chi Tiết Sản Phẩm</FormLabel>\r\n                                <ReactQuill theme=\"snow\" value={values.productDetail} onChange={(e: any) => {\r\n                                    setFieldValue('productDetail', e);\r\n                                }} />\r\n                                {/* <TextField\r\n                                    fullWidth\r\n                                    name='productDetail'\r\n                                    value={values.productDetail}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    placeholder='Nhập chi tiết sản phẩm'\r\n                                    helperText={touched.productDetail ? errors.productDetail : \"\"}\r\n                                    error={touched.productDetail ? Boolean(errors.productDetail) : false}\r\n                                /> */}\r\n                            </FormControl>\r\n                            <FormControl fullWidth className={classes.formControl}>\r\n                                <FormLabel classes={{ root: classes.formLabel }}>Mô Tả Sản Phẩm</FormLabel>\r\n                                <ReactQuill theme=\"snow\" value={values.productDetail} onChange={(e: any) => {\r\n                                    setFieldValue('productDescription', e);\r\n                                }} />\r\n                                {/* <TextField\r\n                                    fullWidth\r\n                                    name='productDescription'\r\n                                    value={values.productDescription}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    placeholder='Nhập mô tả sản phẩm'\r\n                                    helperText={touched.productDescription ? errors.productDescription : \"\"}\r\n                                    error={touched.productDescription ? Boolean(errors.productDescription) : false}\r\n                                /> */}\r\n                            </FormControl>\r\n                            <FormControl>\r\n                                <FormLabel classes={{ root: classes.formLabel }}>Hình ảnh</FormLabel>\r\n                                <input\r\n                                    accept=\"image/*\"\r\n                                    name='image'\r\n                                    type='file'\r\n                                    onChange={(e: any) => {\r\n                                        setFieldValue('image', e.target.files[0]);\r\n                                    }}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                            </FormControl>\r\n                            <Box marginTop={2}>\r\n                                <Button\r\n                                    type='submit'\r\n                                    disabled={isSubmitting}\r\n                                    style={{\r\n                                        color: \"rgb(33, 43, 54)\",\r\n                                        height: \"34px\",\r\n                                        width: \"120px\",\r\n                                        fontSize: \"12px\",\r\n                                        borderRadius: \"4px\",\r\n                                        fontWeight: 500,\r\n                                        textTransform: \"capitalize\",\r\n                                        border: '1px solid rgb(33, 43, 54)',\r\n                                        marginRight: 10\r\n                                    }}\r\n                                >\r\n                                    {isSubmitting ? <CircularProgress size='1rem' /> : \"Thêm Sản Phẩm\"}\r\n                                </Button>\r\n\r\n                                <Button style={{\r\n                                    color: \"#FF6969\",\r\n                                    height: \"34px\",\r\n                                    width: \"120px\",\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: 500,\r\n                                    borderRadius: \"4px\",\r\n                                    textTransform: \"capitalize\",\r\n                                    border: '1px solid #FF6969',\r\n\r\n                                }}\r\n                                    onClick={history.goBack}\r\n                                >Quay lại</Button>\r\n                            </Box>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CreateProduct;\r\n","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\UpdateTypeProduct.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\auth\\FormFieldRole.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\auth\\FormTypeProduct.tsx",["879"],"import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useFormikContext } from \"formik\";\r\nimport { FormControl, FormLabel, Select } from \"@mui/material\";\r\n\r\nimport { MenuItem } from \"@material-ui/core\";\r\n\r\nimport { getTypeProduct } from \"../../redux/actions/admin\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { ITypeProduct } from \"../../redux/types/typeproduct\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formLabel: {\r\n        fontWeight: 600,\r\n        marginBottom: theme.spacing(1.5),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(0, 0),\r\n        width: 302,\r\n    },\r\n    placeholder: {\r\n        color: \"#aaa\"\r\n    },\r\n    selectStyle: {\r\n        fontSize: '13px',\r\n        marginBottom: '28px',\r\n        marginTop: 10,\r\n        \"& fieldset\": {\r\n            borderRadius: \"10px\",\r\n        },\r\n    },\r\n}));\r\n\r\ntype Props = {\r\n    isTypeProduct?: boolean;\r\n};\r\n\r\ninterface IInitialValues {\r\n    typeProduct: any;\r\n}\r\n\r\n// const Placeholder = ({ children }: { children: any }) => {\r\n//     const classes = useStyles();\r\n//     return <div className={classes.placeholder}>{children}</div>;\r\n// };\r\n\r\nconst FormTypeProduct: React.FC<Props> = ({ isTypeProduct = false }): JSX.Element => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const { values, handleChange, handleBlur, touched, errors } =\r\n        useFormikContext<IInitialValues>();\r\n\r\n    const [typeProducts, setTypeProducts] = React.useState<ITypeProduct[]>([]);\r\n    const TypeProduct = useSelector((state: RootState) => state.admin);\r\n\r\n\r\n    React.useEffect(() => {\r\n        dispatch(getTypeProduct());\r\n    }, [dispatch]);\r\n\r\n    React.useEffect(() => {\r\n        setTypeProducts(() => TypeProduct?.typeproducts?.filter((typeproduct: any) => typeproduct.nameTypeProduct));\r\n    }, [TypeProduct]);\r\n\r\n    return (\r\n        <>\r\n\r\n            {isTypeProduct ? (\r\n                <FormControl className={classes.formControl}>\r\n                    <Select\r\n                        name=\"typeProduct._id\"\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"handle-city\"\r\n                        value={values.typeProduct._id}\r\n                        className={classes.selectStyle}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        error={touched.typeProduct ? Boolean(errors.typeProduct) : false}\r\n                        variant={'outlined'}\r\n                        MenuProps={{\r\n                            PaperProps: {\r\n                                style: {\r\n                                    fontSize: 10,\r\n                                },\r\n                            },\r\n                        }}\r\n                    >\r\n                        {typeProducts?.map((typeProduct: any) => (\r\n                            <MenuItem value={typeProduct._id} key={typeProduct._id}>\r\n                                {typeProduct.nameTypeProduct}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            ) : null}\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormTypeProduct;\r\n","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\auth\\FormField.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\UpdateProduct.tsx",["880"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, CircularProgress, Box } from \"@material-ui/core\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateProduct } from \"../../redux/actions/admin\";\r\nimport { FormControl, FormLabel, TextField } from \"@mui/material\";\r\nimport FormTypeProduct from \"../../pages/auth/FormTypeProduct\";\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    btnLogin: {\r\n        '&.MuiButton-root:hover': {\r\n            backgroundColor: \"transparent\",\r\n        }\r\n    },\r\n    formLabel: {\r\n        fontWeight: 600,\r\n        marginBottom: theme.spacing(1.5),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(2, 0),\r\n    },\r\n}));\r\n\r\ntype Props = {\r\n    product: any;\r\n};\r\n\r\ninterface IInitialValues {\r\n    nameProduct: string;\r\n    price: number;\r\n    productDetail: string;\r\n    productDescription: string;\r\n    image: string;\r\n}\r\n\r\nconst UpdateProduct: React.FC<Props> = ({ product }): JSX.Element => {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    const initialValues: IInitialValues = {\r\n        nameProduct: product?.nameProduct ?? \"\",\r\n        price: product?.price ?? \"\",\r\n        productDetail: product?.productDetail ?? \"\",\r\n        productDescription: product?.productDescription ?? \"\",\r\n        image: product?.image ?? \"\",\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nameProduct: Yup.string().required(\"required!\"),\r\n        price: Yup.string().required(\"required!\"),\r\n        productDetail: Yup.string().required(\"required!\"),\r\n        productDescription: Yup.string().required(\"required!\"),\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values: any, { setSubmitting }) => {\r\n                let formData = new FormData();\r\n                formData.append(\"nameProduct\", values.nameProduct);\r\n                formData.append(\"price\", values.price);\r\n                formData.append(\"productDetail\", values.productDetail);\r\n                formData.append(\"image\", values.image);\r\n                formData.append(\"productDescription\", values.productDescription);\r\n                dispatch(updateProduct(formData, product._id, setSubmitting));\r\n            }}\r\n        >\r\n            {({ values, handleChange, handleBlur, errors, touched, isSubmitting, handleSubmit, setFieldValue }) => (\r\n                <form noValidate onSubmit={handleSubmit} encType=\"multipart/form-data\">\r\n                    <Box>\r\n                        <FormControl fullWidth className={classes.formControl}>\r\n                            <FormLabel classes={{ root: classes.formLabel }}>Tên Sản Phẩm</FormLabel>\r\n                            <TextField\r\n                                fullWidth\r\n                                name='nameProduct'\r\n                                value={values.nameProduct}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                placeholder='Nhập tên sản phẩm'\r\n                                helperText={touched.nameProduct ? errors.nameProduct : \"\"}\r\n                                error={touched.nameProduct ? Boolean(errors.nameProduct) : false}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl fullWidth className={classes.formControl}>\r\n                            <FormLabel classes={{ root: classes.formLabel }}>Giá Tiền</FormLabel>\r\n                            <TextField\r\n                                fullWidth\r\n                                name='price'\r\n                                value={values.price}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                placeholder='Nhập giá sản phẩm'\r\n                                helperText={touched.price ? errors.price : \"\"}\r\n                                error={touched.price ? Boolean(errors.price) : false}\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl fullWidth className={classes.formControl}>\r\n                            <FormLabel classes={{ root: classes.formLabel }}>Chi Tiết Sản Phẩm</FormLabel>\r\n                            <ReactQuill theme=\"snow\" value={values.productDetail} onChange={(e: any) => {\r\n                                setFieldValue('productDetail', e);\r\n                            }} />\r\n                            {/* <TextField\r\n                                fullWidth\r\n                                name='productDetail'\r\n                                value={values.productDetail}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                placeholder='Nhập chi tiết sản phẩm'\r\n                                helperText={touched.productDetail ? errors.productDetail : \"\"}\r\n                                error={touched.productDetail ? Boolean(errors.productDetail) : false}\r\n                            /> */}\r\n                        </FormControl>\r\n                        <FormControl fullWidth className={classes.formControl}>\r\n                            <FormLabel classes={{ root: classes.formLabel }}>Mô Tả Sản Phẩm</FormLabel>\r\n                            <ReactQuill theme=\"snow\" value={values.productDescription} onChange={(e: any) => {\r\n                                setFieldValue('productDescription', e);\r\n                            }} />\r\n                            {/* <TextField\r\n                                fullWidth\r\n                                name='productDescription'\r\n                                value={values.productDescription}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                placeholder='Nhập mô tả sản phẩm'\r\n                                helperText={touched.productDescription ? errors.productDescription : \"\"}\r\n                                error={touched.productDescription ? Boolean(errors.productDescription) : false}\r\n                            /> */}\r\n                        </FormControl>\r\n                        <FormControl fullWidth className={classes.formControl}>\r\n                                <FormLabel classes={{ root: classes.formLabel }}>Hình ảnh</FormLabel>\r\n                                <input\r\n                                    accept=\"image/*\"\r\n                                    name='image'\r\n                                    type='file'\r\n                                    onChange={(e: any) => {\r\n                                        setFieldValue('image', e.target.files[0]);\r\n                                    }}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                            </FormControl>\r\n                        <Button\r\n                            disableRipple\r\n                            style={{ backgroundColor: \"black\", color: \"white\" }}\r\n                            type='submit'\r\n                            variant='contained'\r\n                            color='primary'\r\n                            size='small'\r\n                            className={classes.btnLogin}\r\n                            disabled={isSubmitting}\r\n                        >\r\n                            {isSubmitting ? <CircularProgress size='1rem' /> : \"Cập nhật sản phẩm\"}\r\n                        </Button>\r\n                    </Box>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default UpdateProduct;\r\n","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\data.tsx",[],["881","882"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\LoaiSanPham1.tsx",["883","884","885","886","887","888","889","890","891"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\LoaiSanPham2.tsx",["892","893","894","895","896","897","898","899","900"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\ImageData.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\ImageSlider.tsx",["901","902","903","904","905"],"import React, { useEffect, useState } from 'react';\r\nimport  './ImageSlider.css';\r\n\r\nconst ImageSlider = (props:any) => {\r\n    const SliderProperty = {\r\n        ImageNo: '',\r\n        ImageName: '',\r\n        ImageSrc: ''\r\n    }\r\n\r\n    const [sliderProperty, setSliderProperty] = useState(SliderProperty);\r\n\r\n    const { ImageNo, ImageName, ImageSrc } = sliderProperty;\r\n\r\n    const [count, setCount] = useState(0);\r\n\r\n\r\n    const [animationCls, setAnimationCls] = useState('displayBlock fade');\r\n\r\n    const PreClick = () => {\r\n\r\n        setAnimationCls(() => ('displayNone fade'));\r\n        const myTimeout = setTimeout(() => {\r\n            setAnimationCls('displayBlock fade')\r\n        }, 100);\r\n\r\n        if (count > 0) {\r\n            setCount((preCount) => preCount - 1);  \r\n        }\r\n\r\n        if (count === 0) {\r\n            setCount(props.ImageData.length-1);\r\n        }\r\n\r\n    };\r\n\r\n    const NextClick = () => {\r\n\r\n        setAnimationCls(() => ('displayNone fade'));\r\n        const myTimeout = setTimeout(() => {\r\n            setAnimationCls('displayBlock fade')\r\n        }, 100);\r\n\r\n        if (count <= props.ImageData.length - 2) {\r\n            setCount((preCount) => preCount + 1);           \r\n        }\r\n\r\n        if (count === props.ImageData.length-1) {\r\n            setCount(0);\r\n        }\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        setSliderProperty((previous) => ({ ...previous, ImageNo: props.ImageData[count].ImageNo, ImageName: props.ImageData[count].ImageName, ImageSrc: props.ImageData[count].ImageSrc }));\r\n\r\n    }, [count]);\r\n    return (\r\n        <>\r\n            <div className='slideshow-container '>\r\n\r\n\r\n                <div className={animationCls}>\r\n                    <img src={ImageSrc} style={{ width: '100%', height: '100%' }} alt=\"Img\" />\r\n                </div>\r\n\r\n                <button className=\"prev\" onClick={PreClick}>❮</button>\r\n                <button className=\"next\" onClick={NextClick}>❯</button>\r\n            </div>\r\n\r\n\r\n            </>\r\n\r\n        );\r\n};\r\n\r\nexport default ImageSlider;","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\DetailSanPham.tsx",["906","907","908","909","910","911","912","913","914","915","916"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\City.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\AddCity.tsx",["917"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, CircularProgress } from \"@material-ui/core\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { ICity } from \"../../redux/types/city\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/reducers\";\r\n\r\nimport { addCity, getCity } from \"../../redux/actions/admin\";\r\n\r\nimport { Box, Container, FormControl, FormLabel, TextField, Typography } from \"@mui/material\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        width: \"100%\",\r\n        minHeight: \"100vh\",\r\n    },\r\n    btnRegister: {\r\n        marginTop: theme.spacing(2),\r\n        padding: theme.spacing(1, 2),\r\n    },\r\n    checkboxWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    textField: {\r\n        margin: theme.spacing(1.5, 0),\r\n        textAlign: 'left',\r\n        fontSize: '13px',\r\n        \"& .MuiInputBase-root\": {\r\n            \"& fieldset\": {\r\n                borderRadius: \"10px\",\r\n            },\r\n        },\r\n    },\r\n}));\r\n\r\ninterface IInitialValues {\r\n    nameCity: string;\r\n}\r\n\r\nconst AddCity: React.FC = (): JSX.Element => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const ADMIN = \"640cbf0573094a5e2e001859\";\r\n\r\n    const [cities, setCities] = React.useState<ICity[]>([]);\r\n    const City = useSelector((state: RootState) => state.admin);\r\n\r\n    const initialValues: IInitialValues = {\r\n        nameCity: \"\",\r\n    };\r\n\r\n    const onHandleSubmit = (values: IInitialValues, { setSubmitting }: any) => {\r\n        dispatch(addCity({ ...values, role: ADMIN }, setSubmitting))\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        nameCity: Yup.string().required(\"Invalid nameCity!\"),\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        dispatch(getCity());\r\n    }, [dispatch]);\r\n\r\n    React.useEffect(() => {\r\n        setCities(() => City?.cities?.filter((city: any) => city.nameCity));\r\n    }, [City]);\r\n\r\n    return (\r\n        <Container style={{ maxWidth: 600 }}>\r\n\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={onHandleSubmit}\r\n            >\r\n                {({ isSubmitting, handleSubmit, values, handleChange, handleBlur, errors, touched }) => (\r\n                    <form noValidate onSubmit={handleSubmit}>\r\n                        <Box display={\"flex\"}\r\n                            flexDirection={'column'}\r\n                            justifyContent={'center'}\r\n                            alignItems={'center'}\r\n                            style={{ backgroundColor: 'white', padding: '40px 0px', borderRadius: '20px' }}>\r\n\r\n                            <Typography style={{ fontWeight: \"bold\", fontSize: \"18px\", margin: 20 }} >\r\n                                Thêm thành phố\r\n                            </Typography>\r\n\r\n                            <FormControl style={{ marginTop: 2 }} >\r\n                                <FormLabel style={{ fontWeight: \"bold\", fontSize: \"14px\", marginTop: 2 }}>\r\n                                    Tên thành phố\r\n                                </FormLabel>\r\n                                <TextField\r\n                                    style={{ width: 300, }}\r\n                                    className={classes.textField}\r\n                                    fullWidth\r\n                                    variant={'outlined'}\r\n                                    name='nameCity'\r\n                                    value={values.nameCity}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    placeholder='Nhập tên thành phố muốn thêm'\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            fontSize: '12px',\r\n                                        }\r\n                                    }}\r\n                                    helperText={touched.nameCity ? errors.nameCity : \"\"}\r\n                                    error={touched.nameCity ? Boolean(errors.nameCity) : false} />\r\n\r\n                            </FormControl>\r\n                            <Box marginTop={2}>\r\n                                <Button\r\n                                    type='submit'\r\n                                    disabled={isSubmitting}\r\n                                    style={{\r\n                                        color: \"rgb(33, 43, 54)\",\r\n                                        height: \"34px\",\r\n                                        width: \"120px\",\r\n                                        fontSize: \"12px\",\r\n                                        borderRadius: \"4px\",\r\n                                        fontWeight: 500,\r\n                                        textTransform: \"capitalize\",\r\n                                        border: '1px solid rgb(33, 43, 54)',\r\n                                        marginRight: 10\r\n                                    }}\r\n                                >\r\n                                    {isSubmitting ? <CircularProgress size='1rem' /> : \"Thêm Thành Phố\"}\r\n                                </Button>\r\n\r\n                                <Button style={{\r\n                                    color: \"#FF6969\",\r\n                                    height: \"34px\",\r\n                                    width: \"120px\",\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: 500,\r\n                                    borderRadius: \"4px\",\r\n                                    textTransform: \"capitalize\",\r\n                                    border: '1px solid #FF6969',\r\n\r\n                                }}\r\n                                    onClick={history.goBack}\r\n                                >Quay lại</Button>\r\n                            </Box>\r\n\r\n\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n\r\n\r\n\r\n\r\n\r\n        </Container >\r\n\r\n    );\r\n};\r\n\r\nexport default AddCity;\r\n","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\UpdateCity.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\Order.tsx",["918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933","934","935"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\Cart.tsx",["936","937","938","939","940","941","942"],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\auth\\FormCity.tsx",["943"],"import React from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useFormikContext } from \"formik\";\r\nimport { FormControl, FormLabel, Select } from \"@mui/material\";\r\n\r\nimport { MenuItem } from \"@material-ui/core\";\r\n\r\nimport { getCity } from \"../../redux/actions/user\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { ICity } from \"../../redux/types/city\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formLabel: {\r\n        fontWeight: 600,\r\n        marginBottom: theme.spacing(1.5),\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(0, 0),\r\n        width: 500,\r\n        height: 60,\r\n    },\r\n    placeholder: {\r\n        color: \"#aaa\"\r\n    },\r\n    selectStyle: {\r\n        fontSize: '13px',\r\n        marginBottom: '28px',\r\n        marginTop: 10,\r\n        \"& fieldset\": {\r\n            borderRadius: \"10px\",\r\n        },\r\n    },\r\n}));\r\n\r\ntype Props = {\r\n    isCity?: boolean;\r\n};\r\n\r\ninterface IInitialValues {\r\n    city: any;\r\n}\r\n\r\n// const Placeholder = ({ children }: { children: any }) => {\r\n//     const classes = useStyles();\r\n//     return <div className={classes.placeholder}>{children}</div>;\r\n// };\r\n\r\nconst FormCity: React.FC<Props> = ({ isCity = false }): JSX.Element => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    const { values, handleChange, handleBlur, touched, errors } =\r\n        useFormikContext<IInitialValues>();\r\n\r\n    const [cities, setCities] = React.useState<ICity[]>([]);\r\n    const City = useSelector((state: RootState) => state.user);\r\n\r\n\r\n    React.useEffect(() => {\r\n        dispatch(getCity());\r\n    }, [dispatch]);\r\n\r\n    React.useEffect(() => {\r\n        setCities(() => City?.cities?.filter((city: any) => city.nameCity));\r\n    }, [City]);\r\n\r\n    return (\r\n        <>\r\n\r\n            {isCity ? (\r\n                <FormControl className={classes.formControl}>\r\n                    <Select\r\n                        name=\"city._id\"\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"handle-city\"\r\n                        value={values.city._id}\r\n                        defaultValue={'64a67186e2b288d3b57ee1c0'}\r\n                        className={classes.selectStyle}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        error={touched.city ? Boolean(errors.city) : false}\r\n                        variant={'outlined'}\r\n                        MenuProps={{\r\n                            PaperProps: {\r\n                                style: {\r\n                                    fontSize: 10,\r\n                                    height:\"200px\"\r\n                                },\r\n                            },\r\n                        }}\r\n                    >\r\n                        {cities?.map((city: any) => (\r\n                            <MenuItem value={city._id} key={city._id}>\r\n                                {city.nameCity}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            ) : null}\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormCity;\r\n","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\reducers\\user.ts",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\components\\routing\\PrivateRoute.tsx",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\redux\\actions\\user.ts",[],"D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\admin\\OrderCart.tsx",["944","945"],"import * as React from \"react\";\r\nimport { styled, alpha } from \"@material-ui/core/styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCart, deleteCart } from \"../../redux/actions/admin\";\r\nimport { RootState } from \"../../redux/reducers\";\r\nimport { ICart } from \"../../redux/types/cart\";\r\nimport { Box, TableSortLabel, Toolbar, OutlinedInput, InputAdornment, Card, Container, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, Typography, Divider, Button } from \"@mui/material\";\r\n// @mui\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\nimport { visuallyHidden } from '@mui/utils';\r\n\r\nconst StyledRoot = styled(Toolbar)(({ theme }) => ({\r\n    height: 96,\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    padding: theme.spacing(0, 1, 0, 3),\r\n}));\r\n\r\nconst StyledSearch = styled(OutlinedInput)(({ theme }) => ({\r\n    width: 240,\r\n    transition: theme.transitions.create(['box-shadow', 'width'], {\r\n        easing: theme.transitions.easing.easeInOut,\r\n        duration: theme.transitions.duration.shorter,\r\n    }),\r\n    '&.Mui-focused': {\r\n        width: 320,\r\n    },\r\n    '& fieldset': {\r\n        borderWidth: `1px !important`,\r\n        borderColor: `${alpha(theme.palette.grey[500], 0.32)} !important`,\r\n    },\r\n}));\r\n\r\nfunction descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\ntype Order = 'asc' | 'desc';\r\n\r\nfunction getComparator<Key extends keyof any>(\r\n    order: Order,\r\n    orderBy: Key,\r\n): (\r\n    a: { [key in Key]: number | string },\r\n    b: { [key in Key]: number | string },\r\n) => number {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort<T>(array: T[], comparator: (a: T, b: T) => number) {\r\n    const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) {\r\n            return order;\r\n        }\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\ninterface DataUser {\r\n    _id: keyof ICart;\r\n    date: keyof ICart;\r\n    fullName: keyof ICart;\r\n    nameCompany: keyof ICart;\r\n    address: keyof ICart;\r\n    city: keyof ICart;\r\n    sdt: keyof ICart;\r\n    email: keyof ICart;\r\n    note: keyof ICart;\r\n    product: keyof ICart;\r\n    delete: keyof ICart;\r\n}\r\n\r\ninterface HeadCell {\r\n    _id: keyof DataUser;\r\n    label: string;\r\n    numeric: boolean;\r\n}\r\n\r\nconst headCells: HeadCell[] = [\r\n    {\r\n        _id: 'date',\r\n        numeric: false,\r\n        label: 'Ngày Đặt Hàng',\r\n    },\r\n    {\r\n        _id: 'fullName',\r\n        numeric: false,\r\n        label: 'Tên Khách Hàng',\r\n    },\r\n    {\r\n        _id: 'nameCompany',\r\n        numeric: false,\r\n        label: 'Tên Công Ty',\r\n    },\r\n    {\r\n        _id: 'address',\r\n        numeric: false,\r\n        label: 'Địa Chỉ',\r\n    },\r\n    {\r\n        _id: 'city',\r\n        numeric: false,\r\n        label: 'Thành Phố',\r\n    },\r\n    {\r\n        _id: 'sdt',\r\n        numeric: false,\r\n        label: 'SĐT',\r\n    },\r\n    {\r\n        _id: 'email',\r\n        numeric: false,\r\n        label: 'Email',\r\n    },\r\n    {\r\n        _id: 'note',\r\n        numeric: false,\r\n        label: 'Ghi Chú',\r\n    },\r\n    {\r\n        _id: 'product',\r\n        numeric: false,\r\n        label: 'Sản Phẩm',\r\n    },\r\n    {\r\n        _id: 'delete',\r\n        numeric: false,\r\n        label: '',\r\n    },\r\n];\r\n\r\n\r\ninterface EnhancedTableProps {\r\n    onRequestSort: (event: React.MouseEvent<unknown>, property: keyof DataUser) => void;\r\n    order: Order;\r\n    orderBy: string;\r\n}\r\n\r\nfunction EnhancedTableHead(props: EnhancedTableProps) {\r\n    const { order, orderBy, onRequestSort } =\r\n        props;\r\n    const createSortHandler =\r\n        (property: keyof DataUser) => (event: React.MouseEvent<unknown>) => {\r\n            onRequestSort(event, property);\r\n        };\r\n    return (\r\n        <TableHead style={{ backgroundColor: \"#f4f5f5\" }}\r\n            sx={{\r\n                '& th:first-child': {\r\n                    borderRadius: '1em 0 0 0'\r\n                },\r\n                '& th:last-child': {\r\n                    borderRadius: '0 1em 0 0'\r\n                }\r\n            }}>\r\n            <TableRow>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell._id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        style={{ fontSize: '13px' }}\r\n                        sortDirection={orderBy === headCell._id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell._id}\r\n                            direction={orderBy === headCell._id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell._id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell._id ? (\r\n                                <Box component=\"span\" sx={visuallyHidden}>\r\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                </Box>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nconst OrderCart: React.FC = (): JSX.Element => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const [carts, setCarts] = React.useState<ICart[]>([]);\r\n    const admin = useSelector((state: RootState) => state.admin);\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState([null]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const [filterName, setFilterName] = React.useState('');\r\n\r\n    const [order, setOrder] = React.useState<Order>('asc');\r\n    const [orderBy, setOrderBy] = React.useState<keyof DataUser>('date');\r\n\r\n\r\n\r\n    const handleRequestSort = (\r\n        event: React.MouseEvent<unknown>,\r\n        property: keyof DataUser,\r\n    ) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event: any) => {\r\n        setPage(0);\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n    };\r\n\r\n    const handleChangePage = (event: any, newPage: any) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleFilterByName = (event: any) => {\r\n        setPage(0);\r\n        const keyword = event.target.value;\r\n\r\n        if (keyword !== '') {\r\n            const results = admin?.carts?.filter((cart: any) => {\r\n                return cart.city.nameCity.toLowerCase().startsWith(keyword.toLowerCase()) || cart.nameCompany.toLowerCase().startsWith(keyword.toLowerCase()) || cart.fullName.toLowerCase().startsWith(keyword.toLowerCase()) ;\r\n            });\r\n            setCarts(results);\r\n        } else {\r\n            setCarts(() => admin?.carts?.filter((cart: any) => cart.nameCompany));\r\n        }\r\n\r\n        setFilterName(keyword);\r\n    };\r\n\r\n    const sortCart = stableSort(carts, getComparator(order, orderBy));\r\n\r\n    React.useEffect(() => {\r\n        dispatch(getCart());\r\n    }, [dispatch]);\r\n\r\n    React.useEffect(() => {\r\n        setCarts(() => admin?.carts?.filter((cart: any) => cart.nameCompany));\r\n    }, [admin]);\r\n\r\n    React.useEffect(() => {\r\n        document.title = \"Khách Hàng\";\r\n    }, []);\r\n\r\n    return (\r\n\r\n        <>\r\n            <Container>\r\n                <Card style={{ padding: \"20px\", marginTop: \"20px\", paddingBottom: \"40px\", borderRadius: \"22px\" }}>\r\n                    <StyledRoot\r\n                        style={{ display: \"flex\", flexDirection: \"row\" }}\r\n                        sx={{\r\n                            color: 'primary.main',\r\n                            bgcolor: 'primary.lighter',\r\n                        }}\r\n                    >\r\n                        <Box>\r\n                            <Typography gutterBottom style={{ color: \"black\", fontSize: \"22px\" }}>\r\n                                Danh Sách Khách Hàng\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box style={{ display: \"flex\", flexDirection: \"row\" }} >\r\n                            <Box style={{ marginRight: \"14px\" }}>\r\n                                <StyledSearch\r\n                                    style={{ borderRadius: '30px', fontSize: '13px', height: \"48px\" }}\r\n                                    value={filterName}\r\n                                    onChange={handleFilterByName}\r\n                                    placeholder=\"Tìm kiếm...\"\r\n                                    startAdornment={\r\n                                        <InputAdornment position=\"start\" sx={{ paddingLeft: 1.3 }}>\r\n                                            <SearchIcon style={{ width: '16px' }} sx={{ color: 'text.disabled' }} />\r\n                                        </InputAdornment>\r\n                                    }\r\n                                />\r\n                            </Box>\r\n                        </Box>\r\n                    </StyledRoot>\r\n                    <TableContainer>\r\n                        <Table >\r\n                            <EnhancedTableHead\r\n                                order={order}\r\n                                orderBy={orderBy}\r\n                                onRequestSort={handleRequestSort}\r\n                            />\r\n                            {carts && carts.length > 0 ? (\r\n                                <TableBody>\r\n                                    {sortCart.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((cart: any, index) =>\r\n                                        <TableRow key={cart._id}>\r\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\r\n                                                {cart.date}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\r\n                                                {cart.fullName}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\r\n                                                {cart.nameCompany}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\r\n                                                {cart.address}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\r\n                                                {cart.city.nameCity}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\r\n                                                {cart.sdt}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\r\n                                                {cart.email}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\r\n                                                {cart.note}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\" sx={{ fontSize: '12px' }}>\r\n                                                {cart.product.map((product: any) =>\r\n                                                    <Box>\r\n                                                        <Box>\r\n                                                            <Typography style={{ fontWeight: \"bold\", fontSize: \"14px\" }}>Tên sản phẩm: </Typography>{product.nameProduct}\r\n                                                        </Box>\r\n                                                        <Box>\r\n                                                            <Typography style={{ fontWeight: \"bold\", fontSize: \"14px\" }}>Loại sản phẩm: </Typography> {product.nameTypeProduct}\r\n                                                        </Box>\r\n                                                        <Box>\r\n                                                            <Typography style={{ fontWeight: \"bold\", fontSize: \"14px\" }}>Đơn giá: </Typography> {new Intl.NumberFormat('de-DE').format(product.price)} VNĐ\r\n                                                        </Box>\r\n                                                        <Box>\r\n                                                            <Typography style={{ fontWeight: \"bold\", fontSize: \"14px\" }}>Số lượng: </Typography> {product.quantity}\r\n                                                        </Box>\r\n                                                        <Box>\r\n                                                            <Typography style={{ fontWeight: \"bold\", fontSize: \"14px\" }}>Thành tiền: </Typography> {new Intl.NumberFormat('de-DE').format(product.total)} VNĐ\r\n                                                        </Box>\r\n                                                        <Divider style={{backgroundColor:\"black\", height:\"2px\"}} />\r\n                                                    </Box>\r\n                                                )}\r\n                                                <Box display={'flex'} flexDirection={'row'} sx={{marginTop:\"10px\"}}>\r\n                                                    <Box sx={{ fontWeight: \"bold\", fontSize: \"14px\", color:\"#0066BF\" }}>Tổng tiền: </Box> \r\n                                                    <Box flexGrow={1}/>\r\n                                                    <Box sx={{marginTop:\"2px\", fontWeight: \"bold\"}}>\r\n                                                         {new Intl.NumberFormat('de-DE').format(cart.product.map((product: any) => product.total).reduce((a: any, b: any) => a + b))} VNĐ\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </TableCell>\r\n                                            <TableCell >\r\n                                                <Button style={{ color: \"red\" }} onClick={(e) => dispatch(deleteCart(cart._id))} >\r\n                                                    <DeleteForeverIcon style={{ width: \"16px\" }} />\r\n                                                </Button>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )}\r\n\r\n                                    <TableRow>\r\n                                        <TablePagination\r\n                                            style={{ fontSize: \"12px\" }}\r\n                                            sx={{\r\n                                                '& .MuiTablePagination-selectLabel': {\r\n                                                    fontSize: \"12px\"\r\n                                                },\r\n                                                '& .MuiTablePagination-selectIcon': {\r\n                                                    width: \"16px\"\r\n                                                },\r\n                                                '& .MuiInputBase-root': {\r\n                                                    fontSize: \"12px\"\r\n                                                },\r\n                                                '& .MuiTablePagination-displayedRows': {\r\n                                                    fontSize: \"12px\"\r\n                                                },\r\n                                                '& .MuiSvgIcon-root': {\r\n                                                    fontSize: \"16px\"\r\n                                                },\r\n                                            }}\r\n                                            rowsPerPageOptions={[5, 10, 25, 70]}\r\n                                            labelRowsPerPage={\"Số lượng hàng:\"}\r\n                                            count={carts.length}\r\n                                            rowsPerPage={rowsPerPage}\r\n                                            page={page}\r\n                                            onPageChange={handleChangePage}\r\n                                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                                            SelectProps={{\r\n                                                MenuProps: {\r\n                                                    sx: {\r\n                                                        \"&& .MuiTablePagination-menuItem\": {\r\n                                                            fontSize: \"12px\"\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            ) : (\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\r\n                                            <Typography variant=\"h6\" paragraph>\r\n                                                Không tồn tại khách hàng\r\n                                            </Typography>\r\n\r\n                                            <Typography variant=\"body2\">\r\n                                                Không tìm thấy kết quả &nbsp;\r\n                                                <strong>&quot;{filterName}&quot;</strong>.\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            )}\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Card>\r\n            </Container>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default OrderCart;\r\n","D:\\WORKSPACE\\Project\\BinhMinhGlobal\\frontend\\src\\pages\\guest\\LoaiSanPham.tsx",["946","947","948","949","950"],{"ruleId":"951","replacedBy":"952"},{"ruleId":"953","replacedBy":"954"},{"ruleId":"955","severity":1,"message":"956","line":34,"column":43,"nodeType":"957","messageId":"958","endLine":34,"endColumn":45},{"ruleId":"955","severity":1,"message":"956","line":34,"column":97,"nodeType":"957","messageId":"958","endLine":34,"endColumn":99},{"ruleId":"955","severity":1,"message":"959","line":34,"column":97,"nodeType":"957","messageId":"958","endLine":34,"endColumn":99},{"ruleId":"955","severity":1,"message":"959","line":34,"column":121,"nodeType":"957","messageId":"958","endLine":34,"endColumn":123},{"ruleId":"955","severity":1,"message":"959","line":34,"column":171,"nodeType":"957","messageId":"958","endLine":34,"endColumn":173},{"ruleId":"955","severity":1,"message":"959","line":34,"column":195,"nodeType":"957","messageId":"958","endLine":34,"endColumn":197},{"ruleId":"955","severity":1,"message":"959","line":34,"column":244,"nodeType":"957","messageId":"958","endLine":34,"endColumn":246},{"ruleId":"955","severity":1,"message":"959","line":34,"column":268,"nodeType":"957","messageId":"958","endLine":34,"endColumn":270},{"ruleId":"960","severity":1,"message":"961","line":38,"column":11,"nodeType":"962","endLine":38,"endColumn":81},{"ruleId":"963","severity":1,"message":"964","line":7,"column":8,"nodeType":"965","messageId":"966","endLine":7,"endColumn":19},{"ruleId":"963","severity":1,"message":"967","line":8,"column":8,"nodeType":"965","messageId":"966","endLine":8,"endColumn":24},{"ruleId":"963","severity":1,"message":"968","line":2,"column":18,"nodeType":"965","messageId":"966","endLine":2,"endColumn":23},{"ruleId":"963","severity":1,"message":"969","line":7,"column":94,"nodeType":"965","messageId":"966","endLine":7,"endColumn":106},{"ruleId":"963","severity":1,"message":"970","line":18,"column":10,"nodeType":"965","messageId":"966","endLine":18,"endColumn":16},{"ruleId":"963","severity":1,"message":"971","line":21,"column":19,"nodeType":"965","messageId":"966","endLine":21,"endColumn":32},{"ruleId":"972","severity":1,"message":"973","line":114,"column":27,"nodeType":"974","messageId":"975","endLine":114,"endColumn":29},{"ruleId":"976","severity":1,"message":"977","line":116,"column":8,"nodeType":"978","endLine":116,"endColumn":14,"suggestions":"979"},{"ruleId":"955","severity":1,"message":"959","line":150,"column":109,"nodeType":"957","messageId":"958","endLine":150,"endColumn":111},{"ruleId":"955","severity":1,"message":"959","line":150,"column":197,"nodeType":"957","messageId":"958","endLine":150,"endColumn":199},{"ruleId":"960","severity":1,"message":"961","line":171,"column":29,"nodeType":"962","endLine":171,"endColumn":99},{"ruleId":"960","severity":1,"message":"961","line":340,"column":33,"nodeType":"962","endLine":340,"endColumn":138},{"ruleId":"963","severity":1,"message":"968","line":2,"column":18,"nodeType":"965","messageId":"966","endLine":2,"endColumn":23},{"ruleId":"963","severity":1,"message":"969","line":7,"column":94,"nodeType":"965","messageId":"966","endLine":7,"endColumn":106},{"ruleId":"963","severity":1,"message":"970","line":18,"column":10,"nodeType":"965","messageId":"966","endLine":18,"endColumn":16},{"ruleId":"963","severity":1,"message":"971","line":21,"column":18,"nodeType":"965","messageId":"966","endLine":21,"endColumn":31},{"ruleId":"972","severity":1,"message":"973","line":107,"column":23,"nodeType":"974","messageId":"975","endLine":107,"endColumn":25},{"ruleId":"976","severity":1,"message":"977","line":109,"column":8,"nodeType":"978","endLine":109,"endColumn":14,"suggestions":"980"},{"ruleId":"955","severity":1,"message":"959","line":143,"column":109,"nodeType":"957","messageId":"958","endLine":143,"endColumn":111},{"ruleId":"955","severity":1,"message":"959","line":143,"column":197,"nodeType":"957","messageId":"958","endLine":143,"endColumn":199},{"ruleId":"960","severity":1,"message":"961","line":164,"column":29,"nodeType":"962","endLine":164,"endColumn":99},{"ruleId":"960","severity":1,"message":"961","line":327,"column":33,"nodeType":"962","endLine":327,"endColumn":138},{"ruleId":"963","severity":1,"message":"968","line":2,"column":18,"nodeType":"965","messageId":"966","endLine":2,"endColumn":23},{"ruleId":"963","severity":1,"message":"969","line":7,"column":94,"nodeType":"965","messageId":"966","endLine":7,"endColumn":106},{"ruleId":"963","severity":1,"message":"970","line":18,"column":10,"nodeType":"965","messageId":"966","endLine":18,"endColumn":16},{"ruleId":"963","severity":1,"message":"971","line":21,"column":18,"nodeType":"965","messageId":"966","endLine":21,"endColumn":31},{"ruleId":"972","severity":1,"message":"973","line":114,"column":27,"nodeType":"974","messageId":"975","endLine":114,"endColumn":29},{"ruleId":"976","severity":1,"message":"977","line":116,"column":8,"nodeType":"978","endLine":116,"endColumn":14,"suggestions":"981"},{"ruleId":"955","severity":1,"message":"959","line":150,"column":109,"nodeType":"957","messageId":"958","endLine":150,"endColumn":111},{"ruleId":"955","severity":1,"message":"959","line":150,"column":197,"nodeType":"957","messageId":"958","endLine":150,"endColumn":199},{"ruleId":"960","severity":1,"message":"961","line":171,"column":29,"nodeType":"962","endLine":171,"endColumn":99},{"ruleId":"960","severity":1,"message":"961","line":340,"column":33,"nodeType":"962","endLine":340,"endColumn":138},{"ruleId":"963","severity":1,"message":"982","line":4,"column":22,"nodeType":"965","messageId":"966","endLine":4,"endColumn":31},{"ruleId":"963","severity":1,"message":"983","line":4,"column":33,"nodeType":"965","messageId":"966","endLine":4,"endColumn":44},{"ruleId":"963","severity":1,"message":"984","line":7,"column":123,"nodeType":"965","messageId":"966","endLine":7,"endColumn":138},{"ruleId":"963","severity":1,"message":"985","line":7,"column":162,"nodeType":"965","messageId":"966","endLine":7,"endColumn":169},{"ruleId":"963","severity":1,"message":"986","line":49,"column":10,"nodeType":"965","messageId":"966","endLine":49,"endColumn":23},{"ruleId":"963","severity":1,"message":"987","line":61,"column":10,"nodeType":"965","messageId":"966","endLine":61,"endColumn":20},{"ruleId":"963","severity":1,"message":"988","line":83,"column":12,"nodeType":"965","messageId":"966","endLine":83,"endColumn":20},{"ruleId":"963","severity":1,"message":"989","line":83,"column":22,"nodeType":"965","messageId":"966","endLine":83,"endColumn":33},{"ruleId":"963","severity":1,"message":"990","line":87,"column":25,"nodeType":"965","messageId":"966","endLine":87,"endColumn":39},{"ruleId":"972","severity":1,"message":"973","line":108,"column":78,"nodeType":"974","messageId":"975","endLine":108,"endColumn":80},{"ruleId":"976","severity":1,"message":"991","line":116,"column":8,"nodeType":"978","endLine":116,"endColumn":17,"suggestions":"992"},{"ruleId":"960","severity":1,"message":"961","line":164,"column":37,"nodeType":"962","endLine":164,"endColumn":95},{"ruleId":"972","severity":1,"message":"973","line":270,"column":76,"nodeType":"974","messageId":"975","endLine":270,"endColumn":78},{"ruleId":"976","severity":1,"message":"991","line":278,"column":6,"nodeType":"978","endLine":278,"endColumn":15,"suggestions":"993"},{"ruleId":"963","severity":1,"message":"984","line":8,"column":139,"nodeType":"965","messageId":"966","endLine":8,"endColumn":154},{"ruleId":"963","severity":1,"message":"994","line":132,"column":10,"nodeType":"965","messageId":"966","endLine":132,"endColumn":27},{"ruleId":"963","severity":1,"message":"990","line":190,"column":25,"nodeType":"965","messageId":"966","endLine":190,"endColumn":39},{"ruleId":"963","severity":1,"message":"995","line":193,"column":19,"nodeType":"965","messageId":"966","endLine":193,"endColumn":27},{"ruleId":"963","severity":1,"message":"996","line":194,"column":21,"nodeType":"965","messageId":"966","endLine":194,"endColumn":31},{"ruleId":"972","severity":1,"message":"973","line":235,"column":78,"nodeType":"974","messageId":"975","endLine":235,"endColumn":80},{"ruleId":"976","severity":1,"message":"991","line":243,"column":8,"nodeType":"978","endLine":243,"endColumn":17,"suggestions":"997"},{"ruleId":"960","severity":1,"message":"961","line":291,"column":37,"nodeType":"962","endLine":291,"endColumn":96},{"ruleId":"972","severity":1,"message":"973","line":262,"column":71,"nodeType":"974","messageId":"975","endLine":262,"endColumn":73},{"ruleId":"976","severity":1,"message":"977","line":263,"column":6,"nodeType":"978","endLine":263,"endColumn":15,"suggestions":"998"},{"ruleId":"963","severity":1,"message":"999","line":15,"column":100,"nodeType":"965","messageId":"966","endLine":15,"endColumn":109},{"ruleId":"963","severity":1,"message":"1000","line":16,"column":10,"nodeType":"965","messageId":"966","endLine":16,"endColumn":16},{"ruleId":"1001","severity":1,"message":"1002","line":203,"column":59,"nodeType":"1003","messageId":"1004","endLine":203,"endColumn":61},{"ruleId":"963","severity":1,"message":"1005","line":58,"column":10,"nodeType":"965","messageId":"966","endLine":58,"endColumn":21},{"ruleId":"1001","severity":1,"message":"1002","line":216,"column":56,"nodeType":"1003","messageId":"1004","endLine":216,"endColumn":58},{"ruleId":"972","severity":1,"message":"973","line":270,"column":93,"nodeType":"974","messageId":"975","endLine":270,"endColumn":95},{"ruleId":"976","severity":1,"message":"977","line":271,"column":8,"nodeType":"978","endLine":271,"endColumn":17,"suggestions":"1006"},{"ruleId":"963","severity":1,"message":"1007","line":209,"column":33,"nodeType":"965","messageId":"966","endLine":209,"endColumn":39},{"ruleId":"963","severity":1,"message":"1008","line":221,"column":10,"nodeType":"965","messageId":"966","endLine":221,"endColumn":18},{"ruleId":"960","severity":1,"message":"961","line":330,"column":11,"nodeType":"962","endLine":330,"endColumn":35},{"ruleId":"963","severity":1,"message":"1009","line":7,"column":10,"nodeType":"965","messageId":"966","endLine":7,"endColumn":21},{"ruleId":"963","severity":1,"message":"1010","line":9,"column":8,"nodeType":"965","messageId":"966","endLine":9,"endColumn":17},{"ruleId":"963","severity":1,"message":"1011","line":12,"column":52,"nodeType":"965","messageId":"966","endLine":12,"endColumn":56},{"ruleId":"963","severity":1,"message":"1012","line":16,"column":66,"nodeType":"965","messageId":"966","endLine":16,"endColumn":74},{"ruleId":"963","severity":1,"message":"1013","line":16,"column":76,"nodeType":"965","messageId":"966","endLine":16,"endColumn":82},{"ruleId":"963","severity":1,"message":"1014","line":81,"column":9,"nodeType":"965","messageId":"966","endLine":81,"endColumn":19},{"ruleId":"963","severity":1,"message":"1015","line":104,"column":9,"nodeType":"965","messageId":"966","endLine":104,"endColumn":21},{"ruleId":"963","severity":1,"message":"1013","line":5,"column":10,"nodeType":"965","messageId":"966","endLine":5,"endColumn":16},{"ruleId":"963","severity":1,"message":"1012","line":5,"column":18,"nodeType":"965","messageId":"966","endLine":5,"endColumn":26},{"ruleId":"963","severity":1,"message":"1008","line":16,"column":10,"nodeType":"965","messageId":"966","endLine":16,"endColumn":18},{"ruleId":"963","severity":1,"message":"1005","line":115,"column":10,"nodeType":"965","messageId":"966","endLine":115,"endColumn":21},{"ruleId":"960","severity":1,"message":"961","line":159,"column":11,"nodeType":"962","endLine":159,"endColumn":35},{"ruleId":"963","severity":1,"message":"1012","line":6,"column":177,"nodeType":"965","messageId":"966","endLine":6,"endColumn":185},{"ruleId":"972","severity":1,"message":"973","line":111,"column":27,"nodeType":"974","messageId":"975","endLine":111,"endColumn":29},{"ruleId":"976","severity":1,"message":"977","line":113,"column":8,"nodeType":"978","endLine":113,"endColumn":14,"suggestions":"1016"},{"ruleId":"955","severity":1,"message":"959","line":147,"column":109,"nodeType":"957","messageId":"958","endLine":147,"endColumn":111},{"ruleId":"955","severity":1,"message":"959","line":147,"column":197,"nodeType":"957","messageId":"958","endLine":147,"endColumn":199},{"ruleId":"960","severity":1,"message":"961","line":168,"column":29,"nodeType":"962","endLine":168,"endColumn":99},{"ruleId":"960","severity":1,"message":"961","line":319,"column":33,"nodeType":"962","endLine":319,"endColumn":138},{"ruleId":"963","severity":1,"message":"1012","line":6,"column":177,"nodeType":"965","messageId":"966","endLine":6,"endColumn":185},{"ruleId":"972","severity":1,"message":"973","line":111,"column":27,"nodeType":"974","messageId":"975","endLine":111,"endColumn":29},{"ruleId":"976","severity":1,"message":"977","line":113,"column":8,"nodeType":"978","endLine":113,"endColumn":14,"suggestions":"1017"},{"ruleId":"955","severity":1,"message":"959","line":147,"column":109,"nodeType":"957","messageId":"958","endLine":147,"endColumn":111},{"ruleId":"955","severity":1,"message":"959","line":147,"column":197,"nodeType":"957","messageId":"958","endLine":147,"endColumn":199},{"ruleId":"960","severity":1,"message":"961","line":168,"column":29,"nodeType":"962","endLine":168,"endColumn":99},{"ruleId":"960","severity":1,"message":"961","line":319,"column":33,"nodeType":"962","endLine":319,"endColumn":138},{"ruleId":"963","severity":1,"message":"1018","line":6,"column":10,"nodeType":"965","messageId":"966","endLine":6,"endColumn":16},{"ruleId":"963","severity":1,"message":"1019","line":6,"column":83,"nodeType":"965","messageId":"966","endLine":6,"endColumn":93},{"ruleId":"963","severity":1,"message":"1020","line":9,"column":10,"nodeType":"965","messageId":"966","endLine":9,"endColumn":24},{"ruleId":"963","severity":1,"message":"1021","line":10,"column":10,"nodeType":"965","messageId":"966","endLine":10,"endColumn":17},{"ruleId":"963","severity":1,"message":"1022","line":19,"column":10,"nodeType":"965","messageId":"966","endLine":19,"endColumn":16},{"ruleId":"963","severity":1,"message":"1023","line":19,"column":18,"nodeType":"965","messageId":"966","endLine":19,"endColumn":27},{"ruleId":"963","severity":1,"message":"1024","line":75,"column":11,"nodeType":"965","messageId":"966","endLine":75,"endColumn":19},{"ruleId":"963","severity":1,"message":"1025","line":76,"column":11,"nodeType":"965","messageId":"966","endLine":76,"endColumn":26},{"ruleId":"963","severity":1,"message":"1026","line":79,"column":11,"nodeType":"965","messageId":"966","endLine":79,"endColumn":26},{"ruleId":"972","severity":1,"message":"973","line":110,"column":33,"nodeType":"974","messageId":"975","endLine":110,"endColumn":35},{"ruleId":"976","severity":1,"message":"1027","line":112,"column":8,"nodeType":"978","endLine":112,"endColumn":14,"suggestions":"1028"},{"ruleId":"955","severity":1,"message":"959","line":146,"column":109,"nodeType":"957","messageId":"958","endLine":146,"endColumn":111},{"ruleId":"955","severity":1,"message":"959","line":146,"column":197,"nodeType":"957","messageId":"958","endLine":146,"endColumn":199},{"ruleId":"960","severity":1,"message":"961","line":167,"column":29,"nodeType":"962","endLine":167,"endColumn":99},{"ruleId":"960","severity":1,"message":"961","line":255,"column":33,"nodeType":"962","endLine":255,"endColumn":121},{"ruleId":"963","severity":1,"message":"1029","line":3,"column":71,"nodeType":"965","messageId":"966","endLine":3,"endColumn":80},{"ruleId":"963","severity":1,"message":"1030","line":5,"column":13,"nodeType":"965","messageId":"966","endLine":5,"endColumn":16},{"ruleId":"963","severity":1,"message":"1031","line":107,"column":19,"nodeType":"965","messageId":"966","endLine":107,"endColumn":27},{"ruleId":"963","severity":1,"message":"1031","line":99,"column":19,"nodeType":"965","messageId":"966","endLine":99,"endColumn":27},{"ruleId":"963","severity":1,"message":"1032","line":9,"column":10,"nodeType":"965","messageId":"966","endLine":9,"endColumn":22},{"ruleId":"963","severity":1,"message":"1033","line":9,"column":24,"nodeType":"965","messageId":"966","endLine":9,"endColumn":38},{"ruleId":"963","severity":1,"message":"1034","line":103,"column":11,"nodeType":"965","messageId":"966","endLine":103,"endColumn":19},{"ruleId":"963","severity":1,"message":"1031","line":104,"column":19,"nodeType":"965","messageId":"966","endLine":104,"endColumn":27},{"ruleId":"972","severity":1,"message":"973","line":110,"column":155,"nodeType":"974","messageId":"975","endLine":110,"endColumn":157},{"ruleId":"972","severity":1,"message":"973","line":132,"column":67,"nodeType":"974","messageId":"975","endLine":132,"endColumn":69},{"ruleId":"972","severity":1,"message":"973","line":136,"column":70,"nodeType":"974","messageId":"975","endLine":136,"endColumn":72},{"ruleId":"972","severity":1,"message":"973","line":140,"column":70,"nodeType":"974","messageId":"975","endLine":140,"endColumn":72},{"ruleId":"963","severity":1,"message":"1035","line":3,"column":76,"nodeType":"965","messageId":"966","endLine":3,"endColumn":86},{"ruleId":"963","severity":1,"message":"1036","line":106,"column":11,"nodeType":"965","messageId":"966","endLine":106,"endColumn":15},{"ruleId":"963","severity":1,"message":"1031","line":107,"column":19,"nodeType":"965","messageId":"966","endLine":107,"endColumn":27},{"ruleId":"963","severity":1,"message":"1037","line":109,"column":14,"nodeType":"965","messageId":"966","endLine":109,"endColumn":32},{"ruleId":"963","severity":1,"message":"1038","line":113,"column":14,"nodeType":"965","messageId":"966","endLine":113,"endColumn":34},{"ruleId":"963","severity":1,"message":"1034","line":95,"column":11,"nodeType":"965","messageId":"966","endLine":95,"endColumn":19},{"ruleId":"963","severity":1,"message":"1036","line":96,"column":11,"nodeType":"965","messageId":"966","endLine":96,"endColumn":15},{"ruleId":"963","severity":1,"message":"1031","line":97,"column":19,"nodeType":"965","messageId":"966","endLine":97,"endColumn":27},{"ruleId":"963","severity":1,"message":"1029","line":3,"column":71,"nodeType":"965","messageId":"966","endLine":3,"endColumn":80},{"ruleId":"963","severity":1,"message":"1039","line":3,"column":82,"nodeType":"965","messageId":"966","endLine":3,"endColumn":98},{"ruleId":"963","severity":1,"message":"1031","line":104,"column":19,"nodeType":"965","messageId":"966","endLine":104,"endColumn":27},{"ruleId":"972","severity":1,"message":"973","line":136,"column":63,"nodeType":"974","messageId":"975","endLine":136,"endColumn":65},{"ruleId":"972","severity":1,"message":"973","line":140,"column":66,"nodeType":"974","messageId":"975","endLine":140,"endColumn":68},{"ruleId":"972","severity":1,"message":"973","line":144,"column":66,"nodeType":"974","messageId":"975","endLine":144,"endColumn":68},{"ruleId":"972","severity":1,"message":"973","line":180,"column":72,"nodeType":"974","messageId":"975","endLine":180,"endColumn":74},{"ruleId":"955","severity":1,"message":"956","line":180,"column":98,"nodeType":"957","messageId":"958","endLine":180,"endColumn":100},{"ruleId":"972","severity":1,"message":"973","line":180,"column":118,"nodeType":"974","messageId":"975","endLine":180,"endColumn":120},{"ruleId":"955","severity":1,"message":"956","line":180,"column":137,"nodeType":"957","messageId":"958","endLine":180,"endColumn":139},{"ruleId":"955","severity":1,"message":"959","line":180,"column":137,"nodeType":"957","messageId":"958","endLine":180,"endColumn":139},{"ruleId":"972","severity":1,"message":"973","line":180,"column":159,"nodeType":"974","messageId":"975","endLine":180,"endColumn":161},{"ruleId":"955","severity":1,"message":"959","line":180,"column":185,"nodeType":"957","messageId":"958","endLine":180,"endColumn":187},{"ruleId":"972","severity":1,"message":"973","line":180,"column":205,"nodeType":"974","messageId":"975","endLine":180,"endColumn":207},{"ruleId":"963","severity":1,"message":"1031","line":104,"column":19,"nodeType":"965","messageId":"966","endLine":104,"endColumn":27},{"ruleId":"972","severity":1,"message":"973","line":185,"column":126,"nodeType":"974","messageId":"975","endLine":185,"endColumn":128},{"ruleId":"963","severity":1,"message":"971","line":20,"column":18,"nodeType":"965","messageId":"966","endLine":20,"endColumn":31},{"ruleId":"972","severity":1,"message":"973","line":111,"column":33,"nodeType":"974","messageId":"975","endLine":111,"endColumn":35},{"ruleId":"976","severity":1,"message":"1027","line":113,"column":8,"nodeType":"978","endLine":113,"endColumn":14,"suggestions":"1040"},{"ruleId":"955","severity":1,"message":"959","line":147,"column":109,"nodeType":"957","messageId":"958","endLine":147,"endColumn":111},{"ruleId":"955","severity":1,"message":"959","line":147,"column":197,"nodeType":"957","messageId":"958","endLine":147,"endColumn":199},{"ruleId":"960","severity":1,"message":"961","line":168,"column":29,"nodeType":"962","endLine":168,"endColumn":99},{"ruleId":"960","severity":1,"message":"961","line":337,"column":33,"nodeType":"962","endLine":337,"endColumn":121},{"ruleId":"963","severity":1,"message":"1041","line":6,"column":8,"nodeType":"965","messageId":"966","endLine":6,"endColumn":20},{"ruleId":"963","severity":1,"message":"1042","line":8,"column":8,"nodeType":"965","messageId":"966","endLine":8,"endColumn":17},{"ruleId":"963","severity":1,"message":"1043","line":9,"column":8,"nodeType":"965","messageId":"966","endLine":9,"endColumn":19},{"ruleId":"963","severity":1,"message":"1044","line":10,"column":8,"nodeType":"965","messageId":"966","endLine":10,"endColumn":15},{"ruleId":"963","severity":1,"message":"1045","line":12,"column":10,"nodeType":"965","messageId":"966","endLine":12,"endColumn":14},{"ruleId":"963","severity":1,"message":"1046","line":12,"column":16,"nodeType":"965","messageId":"966","endLine":12,"endColumn":23},{"ruleId":"963","severity":1,"message":"1018","line":14,"column":10,"nodeType":"965","messageId":"966","endLine":14,"endColumn":16},{"ruleId":"963","severity":1,"message":"1047","line":14,"column":47,"nodeType":"965","messageId":"966","endLine":14,"endColumn":58},{"ruleId":"963","severity":1,"message":"985","line":14,"column":76,"nodeType":"965","messageId":"966","endLine":14,"endColumn":83},{"ruleId":"963","severity":1,"message":"999","line":14,"column":100,"nodeType":"965","messageId":"966","endLine":14,"endColumn":109},{"ruleId":"963","severity":1,"message":"1048","line":14,"column":133,"nodeType":"965","messageId":"966","endLine":14,"endColumn":140},{"ruleId":"963","severity":1,"message":"1049","line":16,"column":10,"nodeType":"965","messageId":"966","endLine":16,"endColumn":24},{"ruleId":"963","severity":1,"message":"1020","line":17,"column":10,"nodeType":"965","messageId":"966","endLine":17,"endColumn":24},{"ruleId":"963","severity":1,"message":"1025","line":36,"column":11,"nodeType":"965","messageId":"966","endLine":36,"endColumn":26},{"ruleId":"963","severity":1,"message":"1026","line":44,"column":11,"nodeType":"965","messageId":"966","endLine":44,"endColumn":26},{"ruleId":"963","severity":1,"message":"1050","line":64,"column":11,"nodeType":"965","messageId":"966","endLine":64,"endColumn":25},{"ruleId":"963","severity":1,"message":"1051","line":73,"column":11,"nodeType":"965","messageId":"966","endLine":73,"endColumn":26},{"ruleId":"963","severity":1,"message":"1052","line":5,"column":33,"nodeType":"965","messageId":"966","endLine":5,"endColumn":42},{"ruleId":"963","severity":1,"message":"1053","line":5,"column":52,"nodeType":"965","messageId":"966","endLine":5,"endColumn":55},{"ruleId":"951","replacedBy":"1054"},{"ruleId":"953","replacedBy":"1055"},{"ruleId":"963","severity":1,"message":"1056","line":16,"column":10,"nodeType":"965","messageId":"966","endLine":16,"endColumn":19},{"ruleId":"963","severity":1,"message":"1057","line":8,"column":7,"nodeType":"965","messageId":"966","endLine":8,"endColumn":15},{"ruleId":"955","severity":1,"message":"956","line":19,"column":62,"nodeType":"957","messageId":"958","endLine":19,"endColumn":64},{"ruleId":"955","severity":1,"message":"956","line":19,"column":108,"nodeType":"957","messageId":"958","endLine":19,"endColumn":110},{"ruleId":"955","severity":1,"message":"959","line":19,"column":108,"nodeType":"957","messageId":"958","endLine":19,"endColumn":110},{"ruleId":"955","severity":1,"message":"959","line":19,"column":170,"nodeType":"957","messageId":"958","endLine":19,"endColumn":172},{"ruleId":"955","severity":1,"message":"959","line":19,"column":216,"nodeType":"957","messageId":"958","endLine":19,"endColumn":218},{"ruleId":"955","severity":1,"message":"959","line":19,"column":278,"nodeType":"957","messageId":"958","endLine":19,"endColumn":280},{"ruleId":"955","severity":1,"message":"959","line":19,"column":327,"nodeType":"957","messageId":"958","endLine":19,"endColumn":329},{"ruleId":"955","severity":1,"message":"959","line":19,"column":389,"nodeType":"957","messageId":"958","endLine":19,"endColumn":391},{"ruleId":"955","severity":1,"message":"959","line":19,"column":438,"nodeType":"957","messageId":"958","endLine":19,"endColumn":440},{"ruleId":"955","severity":1,"message":"959","line":19,"column":500,"nodeType":"957","messageId":"958","endLine":19,"endColumn":502},{"ruleId":"955","severity":1,"message":"959","line":19,"column":552,"nodeType":"957","messageId":"958","endLine":19,"endColumn":554},{"ruleId":"955","severity":1,"message":"959","line":19,"column":614,"nodeType":"957","messageId":"958","endLine":19,"endColumn":616},{"ruleId":"955","severity":1,"message":"959","line":19,"column":667,"nodeType":"957","messageId":"958","endLine":19,"endColumn":669},{"ruleId":"955","severity":1,"message":"959","line":19,"column":729,"nodeType":"957","messageId":"958","endLine":19,"endColumn":731},{"ruleId":"955","severity":1,"message":"956","line":46,"column":45,"nodeType":"957","messageId":"958","endLine":46,"endColumn":47},{"ruleId":"955","severity":1,"message":"956","line":46,"column":91,"nodeType":"957","messageId":"958","endLine":46,"endColumn":93},{"ruleId":"955","severity":1,"message":"959","line":46,"column":91,"nodeType":"957","messageId":"958","endLine":46,"endColumn":93},{"ruleId":"955","severity":1,"message":"959","line":46,"column":116,"nodeType":"957","messageId":"958","endLine":46,"endColumn":118},{"ruleId":"955","severity":1,"message":"959","line":46,"column":162,"nodeType":"957","messageId":"958","endLine":46,"endColumn":164},{"ruleId":"955","severity":1,"message":"959","line":46,"column":187,"nodeType":"957","messageId":"958","endLine":46,"endColumn":189},{"ruleId":"955","severity":1,"message":"959","line":46,"column":236,"nodeType":"957","messageId":"958","endLine":46,"endColumn":238},{"ruleId":"955","severity":1,"message":"959","line":46,"column":261,"nodeType":"957","messageId":"958","endLine":46,"endColumn":263},{"ruleId":"955","severity":1,"message":"959","line":46,"column":310,"nodeType":"957","messageId":"958","endLine":46,"endColumn":312},{"ruleId":"955","severity":1,"message":"959","line":46,"column":335,"nodeType":"957","messageId":"958","endLine":46,"endColumn":337},{"ruleId":"955","severity":1,"message":"959","line":46,"column":387,"nodeType":"957","messageId":"958","endLine":46,"endColumn":389},{"ruleId":"955","severity":1,"message":"959","line":46,"column":412,"nodeType":"957","messageId":"958","endLine":46,"endColumn":414},{"ruleId":"955","severity":1,"message":"959","line":46,"column":465,"nodeType":"957","messageId":"958","endLine":46,"endColumn":467},{"ruleId":"955","severity":1,"message":"959","line":46,"column":490,"nodeType":"957","messageId":"958","endLine":46,"endColumn":492},{"ruleId":"955","severity":1,"message":"959","line":46,"column":546,"nodeType":"957","messageId":"958","endLine":46,"endColumn":548},{"ruleId":"955","severity":1,"message":"959","line":46,"column":571,"nodeType":"957","messageId":"958","endLine":46,"endColumn":573},{"ruleId":"955","severity":1,"message":"956","line":62,"column":41,"nodeType":"957","messageId":"958","endLine":62,"endColumn":43},{"ruleId":"955","severity":1,"message":"956","line":62,"column":87,"nodeType":"957","messageId":"958","endLine":62,"endColumn":89},{"ruleId":"955","severity":1,"message":"959","line":62,"column":87,"nodeType":"957","messageId":"958","endLine":62,"endColumn":89},{"ruleId":"955","severity":1,"message":"959","line":62,"column":112,"nodeType":"957","messageId":"958","endLine":62,"endColumn":114},{"ruleId":"955","severity":1,"message":"959","line":62,"column":158,"nodeType":"957","messageId":"958","endLine":62,"endColumn":160},{"ruleId":"955","severity":1,"message":"959","line":62,"column":183,"nodeType":"957","messageId":"958","endLine":62,"endColumn":185},{"ruleId":"955","severity":1,"message":"959","line":62,"column":232,"nodeType":"957","messageId":"958","endLine":62,"endColumn":234},{"ruleId":"955","severity":1,"message":"959","line":62,"column":257,"nodeType":"957","messageId":"958","endLine":62,"endColumn":259},{"ruleId":"955","severity":1,"message":"959","line":62,"column":306,"nodeType":"957","messageId":"958","endLine":62,"endColumn":308},{"ruleId":"955","severity":1,"message":"959","line":62,"column":331,"nodeType":"957","messageId":"958","endLine":62,"endColumn":333},{"ruleId":"955","severity":1,"message":"959","line":62,"column":383,"nodeType":"957","messageId":"958","endLine":62,"endColumn":385},{"ruleId":"955","severity":1,"message":"959","line":62,"column":408,"nodeType":"957","messageId":"958","endLine":62,"endColumn":410},{"ruleId":"955","severity":1,"message":"959","line":62,"column":461,"nodeType":"957","messageId":"958","endLine":62,"endColumn":463},{"ruleId":"955","severity":1,"message":"959","line":62,"column":486,"nodeType":"957","messageId":"958","endLine":62,"endColumn":488},{"ruleId":"955","severity":1,"message":"959","line":62,"column":542,"nodeType":"957","messageId":"958","endLine":62,"endColumn":544},{"ruleId":"955","severity":1,"message":"959","line":62,"column":567,"nodeType":"957","messageId":"958","endLine":62,"endColumn":569},{"ruleId":"955","severity":1,"message":"956","line":19,"column":78,"nodeType":"957","messageId":"958","endLine":19,"endColumn":80},{"ruleId":"955","severity":1,"message":"956","line":19,"column":124,"nodeType":"957","messageId":"958","endLine":19,"endColumn":126},{"ruleId":"955","severity":1,"message":"959","line":19,"column":124,"nodeType":"957","messageId":"958","endLine":19,"endColumn":126},{"ruleId":"955","severity":1,"message":"959","line":19,"column":186,"nodeType":"957","messageId":"958","endLine":19,"endColumn":188},{"ruleId":"955","severity":1,"message":"959","line":19,"column":232,"nodeType":"957","messageId":"958","endLine":19,"endColumn":234},{"ruleId":"955","severity":1,"message":"959","line":19,"column":294,"nodeType":"957","messageId":"958","endLine":19,"endColumn":296},{"ruleId":"955","severity":1,"message":"959","line":19,"column":343,"nodeType":"957","messageId":"958","endLine":19,"endColumn":345},{"ruleId":"955","severity":1,"message":"959","line":19,"column":405,"nodeType":"957","messageId":"958","endLine":19,"endColumn":407},{"ruleId":"955","severity":1,"message":"959","line":19,"column":454,"nodeType":"957","messageId":"958","endLine":19,"endColumn":456},{"ruleId":"955","severity":1,"message":"959","line":19,"column":516,"nodeType":"957","messageId":"958","endLine":19,"endColumn":518},{"ruleId":"955","severity":1,"message":"959","line":19,"column":568,"nodeType":"957","messageId":"958","endLine":19,"endColumn":570},{"ruleId":"955","severity":1,"message":"959","line":19,"column":630,"nodeType":"957","messageId":"958","endLine":19,"endColumn":632},{"ruleId":"955","severity":1,"message":"959","line":19,"column":683,"nodeType":"957","messageId":"958","endLine":19,"endColumn":685},{"ruleId":"955","severity":1,"message":"959","line":19,"column":745,"nodeType":"957","messageId":"958","endLine":19,"endColumn":747},{"ruleId":"955","severity":1,"message":"959","line":19,"column":801,"nodeType":"957","messageId":"958","endLine":19,"endColumn":803},{"ruleId":"955","severity":1,"message":"959","line":19,"column":863,"nodeType":"957","messageId":"958","endLine":19,"endColumn":865},{"ruleId":"963","severity":1,"message":"1058","line":2,"column":10,"nodeType":"965","messageId":"966","endLine":2,"endColumn":20},{"ruleId":"963","severity":1,"message":"1059","line":7,"column":90,"nodeType":"965","messageId":"966","endLine":7,"endColumn":99},{"ruleId":"963","severity":1,"message":"1060","line":7,"column":110,"nodeType":"965","messageId":"966","endLine":7,"endColumn":114},{"ruleId":"963","severity":1,"message":"1061","line":7,"column":116,"nodeType":"965","messageId":"966","endLine":7,"endColumn":124},{"ruleId":"963","severity":1,"message":"1062","line":7,"column":126,"nodeType":"965","messageId":"966","endLine":7,"endColumn":138},{"ruleId":"963","severity":1,"message":"1063","line":7,"column":140,"nodeType":"965","messageId":"966","endLine":7,"endColumn":154},{"ruleId":"972","severity":1,"message":"973","line":146,"column":92,"nodeType":"974","messageId":"975","endLine":146,"endColumn":94},{"ruleId":"972","severity":1,"message":"973","line":147,"column":89,"nodeType":"974","messageId":"975","endLine":147,"endColumn":91},{"ruleId":"960","severity":1,"message":"961","line":218,"column":33,"nodeType":"962","endLine":218,"endColumn":98},{"ruleId":"960","severity":1,"message":"961","line":328,"column":45,"nodeType":"962","endLine":328,"endColumn":136},{"ruleId":"960","severity":1,"message":"961","line":340,"column":45,"nodeType":"962","endLine":340,"endColumn":139},{"ruleId":"960","severity":1,"message":"961","line":352,"column":45,"nodeType":"962","endLine":352,"endColumn":138},{"ruleId":"960","severity":1,"message":"961","line":364,"column":45,"nodeType":"962","endLine":364,"endColumn":136},{"ruleId":"960","severity":1,"message":"961","line":376,"column":45,"nodeType":"962","endLine":376,"endColumn":135},{"ruleId":"960","severity":1,"message":"961","line":400,"column":37,"nodeType":"962","endLine":400,"endColumn":129},{"ruleId":"955","severity":1,"message":"956","line":431,"column":152,"nodeType":"957","messageId":"958","endLine":431,"endColumn":154},{"ruleId":"955","severity":1,"message":"956","line":431,"column":230,"nodeType":"957","messageId":"958","endLine":431,"endColumn":232},{"ruleId":"955","severity":1,"message":"959","line":431,"column":230,"nodeType":"957","messageId":"958","endLine":431,"endColumn":232},{"ruleId":"955","severity":1,"message":"959","line":431,"column":325,"nodeType":"957","messageId":"958","endLine":431,"endColumn":327},{"ruleId":"955","severity":1,"message":"959","line":431,"column":403,"nodeType":"957","messageId":"958","endLine":431,"endColumn":405},{"ruleId":"955","severity":1,"message":"959","line":431,"column":498,"nodeType":"957","messageId":"958","endLine":431,"endColumn":500},{"ruleId":"955","severity":1,"message":"959","line":431,"column":576,"nodeType":"957","messageId":"958","endLine":431,"endColumn":578},{"ruleId":"955","severity":1,"message":"959","line":431,"column":671,"nodeType":"957","messageId":"958","endLine":431,"endColumn":673},{"ruleId":"955","severity":1,"message":"959","line":431,"column":749,"nodeType":"957","messageId":"958","endLine":431,"endColumn":751},{"ruleId":"955","severity":1,"message":"959","line":431,"column":844,"nodeType":"957","messageId":"958","endLine":431,"endColumn":846},{"ruleId":"960","severity":1,"message":"961","line":434,"column":37,"nodeType":"962","endLine":434,"endColumn":129},{"ruleId":"955","severity":1,"message":"956","line":465,"column":151,"nodeType":"957","messageId":"958","endLine":465,"endColumn":153},{"ruleId":"955","severity":1,"message":"956","line":465,"column":238,"nodeType":"957","messageId":"958","endLine":465,"endColumn":240},{"ruleId":"955","severity":1,"message":"959","line":465,"column":238,"nodeType":"957","messageId":"958","endLine":465,"endColumn":240},{"ruleId":"955","severity":1,"message":"959","line":465,"column":332,"nodeType":"957","messageId":"958","endLine":465,"endColumn":334},{"ruleId":"955","severity":1,"message":"959","line":465,"column":419,"nodeType":"957","messageId":"958","endLine":465,"endColumn":421},{"ruleId":"955","severity":1,"message":"959","line":465,"column":513,"nodeType":"957","messageId":"958","endLine":465,"endColumn":515},{"ruleId":"955","severity":1,"message":"959","line":465,"column":600,"nodeType":"957","messageId":"958","endLine":465,"endColumn":602},{"ruleId":"955","severity":1,"message":"959","line":465,"column":694,"nodeType":"957","messageId":"958","endLine":465,"endColumn":696},{"ruleId":"955","severity":1,"message":"959","line":465,"column":781,"nodeType":"957","messageId":"958","endLine":465,"endColumn":783},{"ruleId":"955","severity":1,"message":"959","line":465,"column":875,"nodeType":"957","messageId":"958","endLine":465,"endColumn":877},{"ruleId":"960","severity":1,"message":"961","line":468,"column":37,"nodeType":"962","endLine":468,"endColumn":129},{"ruleId":"960","severity":1,"message":"961","line":502,"column":37,"nodeType":"962","endLine":502,"endColumn":129},{"ruleId":"960","severity":1,"message":"961","line":536,"column":37,"nodeType":"962","endLine":536,"endColumn":129},{"ruleId":"960","severity":1,"message":"961","line":596,"column":33,"nodeType":"962","endLine":596,"endColumn":126},{"ruleId":"1001","severity":1,"message":"1002","line":202,"column":56,"nodeType":"1003","messageId":"1004","endLine":202,"endColumn":58},{"ruleId":"963","severity":1,"message":"1035","line":2,"column":87,"nodeType":"965","messageId":"966","endLine":2,"endColumn":97},{"ruleId":"963","severity":1,"message":"1064","line":8,"column":8,"nodeType":"965","messageId":"966","endLine":8,"endColumn":18},{"ruleId":"963","severity":1,"message":"1035","line":2,"column":87,"nodeType":"965","messageId":"966","endLine":2,"endColumn":97},{"ruleId":"963","severity":1,"message":"1052","line":5,"column":23,"nodeType":"965","messageId":"966","endLine":5,"endColumn":32},{"ruleId":"963","severity":1,"message":"1065","line":9,"column":8,"nodeType":"965","messageId":"966","endLine":9,"endColumn":23},{"ruleId":"951","replacedBy":"1066"},{"ruleId":"953","replacedBy":"1067"},{"ruleId":"963","severity":1,"message":"1068","line":10,"column":10,"nodeType":"965","messageId":"966","endLine":10,"endColumn":14},{"ruleId":"963","severity":1,"message":"1069","line":33,"column":7,"nodeType":"965","messageId":"966","endLine":33,"endColumn":16},{"ruleId":"972","severity":1,"message":"973","line":120,"column":41,"nodeType":"974","messageId":"975","endLine":120,"endColumn":43},{"ruleId":"976","severity":1,"message":"977","line":122,"column":8,"nodeType":"978","endLine":122,"endColumn":14,"suggestions":"1070"},{"ruleId":"972","severity":1,"message":"973","line":175,"column":92,"nodeType":"974","messageId":"975","endLine":175,"endColumn":94},{"ruleId":"972","severity":1,"message":"973","line":176,"column":89,"nodeType":"974","messageId":"975","endLine":176,"endColumn":91},{"ruleId":"960","severity":1,"message":"961","line":208,"column":33,"nodeType":"962","endLine":208,"endColumn":98},{"ruleId":"960","severity":1,"message":"961","line":295,"column":41,"nodeType":"962","endLine":295,"endColumn":169},{"ruleId":"960","severity":1,"message":"961","line":355,"column":33,"nodeType":"962","endLine":355,"endColumn":126},{"ruleId":"963","severity":1,"message":"1068","line":10,"column":10,"nodeType":"965","messageId":"966","endLine":10,"endColumn":14},{"ruleId":"963","severity":1,"message":"1069","line":33,"column":7,"nodeType":"965","messageId":"966","endLine":33,"endColumn":16},{"ruleId":"972","severity":1,"message":"973","line":121,"column":41,"nodeType":"974","messageId":"975","endLine":121,"endColumn":43},{"ruleId":"976","severity":1,"message":"977","line":123,"column":8,"nodeType":"978","endLine":123,"endColumn":14,"suggestions":"1071"},{"ruleId":"972","severity":1,"message":"973","line":172,"column":92,"nodeType":"974","messageId":"975","endLine":172,"endColumn":94},{"ruleId":"972","severity":1,"message":"973","line":173,"column":89,"nodeType":"974","messageId":"975","endLine":173,"endColumn":91},{"ruleId":"960","severity":1,"message":"961","line":205,"column":33,"nodeType":"962","endLine":205,"endColumn":98},{"ruleId":"960","severity":1,"message":"961","line":292,"column":41,"nodeType":"962","endLine":292,"endColumn":169},{"ruleId":"960","severity":1,"message":"961","line":352,"column":33,"nodeType":"962","endLine":352,"endColumn":126},{"ruleId":"963","severity":1,"message":"1072","line":13,"column":13,"nodeType":"965","messageId":"966","endLine":13,"endColumn":20},{"ruleId":"963","severity":1,"message":"1073","line":13,"column":22,"nodeType":"965","messageId":"966","endLine":13,"endColumn":31},{"ruleId":"963","severity":1,"message":"1074","line":23,"column":15,"nodeType":"965","messageId":"966","endLine":23,"endColumn":24},{"ruleId":"963","severity":1,"message":"1074","line":40,"column":15,"nodeType":"965","messageId":"966","endLine":40,"endColumn":24},{"ruleId":"976","severity":1,"message":"1075","line":58,"column":8,"nodeType":"978","endLine":58,"endColumn":15,"suggestions":"1076"},{"ruleId":"963","severity":1,"message":"1069","line":31,"column":7,"nodeType":"965","messageId":"966","endLine":31,"endColumn":16},{"ruleId":"963","severity":1,"message":"1077","line":92,"column":11,"nodeType":"965","messageId":"966","endLine":92,"endColumn":21},{"ruleId":"963","severity":1,"message":"1078","line":93,"column":11,"nodeType":"965","messageId":"966","endLine":93,"endColumn":29},{"ruleId":"972","severity":1,"message":"973","line":147,"column":92,"nodeType":"974","messageId":"975","endLine":147,"endColumn":94},{"ruleId":"972","severity":1,"message":"973","line":148,"column":89,"nodeType":"974","messageId":"975","endLine":148,"endColumn":91},{"ruleId":"972","severity":1,"message":"973","line":165,"column":29,"nodeType":"974","messageId":"975","endLine":165,"endColumn":31},{"ruleId":"976","severity":1,"message":"977","line":167,"column":8,"nodeType":"978","endLine":167,"endColumn":14,"suggestions":"1079"},{"ruleId":"960","severity":1,"message":"961","line":198,"column":33,"nodeType":"962","endLine":198,"endColumn":98},{"ruleId":"960","severity":1,"message":"961","line":276,"column":41,"nodeType":"962","endLine":276,"endColumn":152},{"ruleId":"960","severity":1,"message":"961","line":279,"column":41,"nodeType":"962","endLine":279,"endColumn":123},{"ruleId":"960","severity":1,"message":"961","line":352,"column":33,"nodeType":"962","endLine":352,"endColumn":126},{"ruleId":"963","severity":1,"message":"1080","line":57,"column":12,"nodeType":"965","messageId":"966","endLine":57,"endColumn":18},{"ruleId":"963","severity":1,"message":"1058","line":2,"column":10,"nodeType":"965","messageId":"966","endLine":2,"endColumn":20},{"ruleId":"963","severity":1,"message":"1059","line":7,"column":90,"nodeType":"965","messageId":"966","endLine":7,"endColumn":99},{"ruleId":"963","severity":1,"message":"1060","line":7,"column":110,"nodeType":"965","messageId":"966","endLine":7,"endColumn":114},{"ruleId":"963","severity":1,"message":"1061","line":7,"column":116,"nodeType":"965","messageId":"966","endLine":7,"endColumn":124},{"ruleId":"963","severity":1,"message":"1062","line":7,"column":126,"nodeType":"965","messageId":"966","endLine":7,"endColumn":138},{"ruleId":"963","severity":1,"message":"1063","line":7,"column":140,"nodeType":"965","messageId":"966","endLine":7,"endColumn":154},{"ruleId":"963","severity":1,"message":"1081","line":92,"column":11,"nodeType":"965","messageId":"966","endLine":92,"endColumn":18},{"ruleId":"972","severity":1,"message":"973","line":100,"column":84,"nodeType":"974","messageId":"975","endLine":100,"endColumn":86},{"ruleId":"972","severity":1,"message":"973","line":101,"column":81,"nodeType":"974","messageId":"975","endLine":101,"endColumn":83},{"ruleId":"972","severity":1,"message":"973","line":106,"column":82,"nodeType":"974","messageId":"975","endLine":106,"endColumn":84},{"ruleId":"972","severity":1,"message":"973","line":111,"column":88,"nodeType":"974","messageId":"975","endLine":111,"endColumn":90},{"ruleId":"972","severity":1,"message":"973","line":112,"column":81,"nodeType":"974","messageId":"975","endLine":112,"endColumn":83},{"ruleId":"963","severity":1,"message":"1082","line":117,"column":12,"nodeType":"965","messageId":"966","endLine":117,"endColumn":20},{"ruleId":"972","severity":1,"message":"1083","line":124,"column":80,"nodeType":"974","messageId":"975","endLine":124,"endColumn":82},{"ruleId":"960","severity":1,"message":"961","line":171,"column":33,"nodeType":"962","endLine":171,"endColumn":98},{"ruleId":"960","severity":1,"message":"961","line":259,"column":45,"nodeType":"962","endLine":259,"endColumn":116},{"ruleId":"960","severity":1,"message":"961","line":305,"column":29,"nodeType":"962","endLine":305,"endColumn":58},{"ruleId":"960","severity":1,"message":"961","line":348,"column":33,"nodeType":"962","endLine":348,"endColumn":126},{"ruleId":"963","severity":1,"message":"1084","line":111,"column":24,"nodeType":"965","messageId":"966","endLine":111,"endColumn":37},{"ruleId":"963","severity":1,"message":"1082","line":116,"column":12,"nodeType":"965","messageId":"966","endLine":116,"endColumn":20},{"ruleId":"960","severity":1,"message":"961","line":191,"column":29,"nodeType":"962","endLine":191,"endColumn":94},{"ruleId":"1085","severity":1,"message":"1086","line":218,"column":37,"nodeType":"962","endLine":220,"endColumn":45},{"ruleId":"1085","severity":1,"message":"1086","line":222,"column":37,"nodeType":"962","endLine":222,"endColumn":80},{"ruleId":"960","severity":1,"message":"961","line":430,"column":57,"nodeType":"962","endLine":430,"endColumn":148},{"ruleId":"960","severity":1,"message":"961","line":551,"column":33,"nodeType":"962","endLine":551,"endColumn":126},{"ruleId":"963","severity":1,"message":"1052","line":5,"column":23,"nodeType":"965","messageId":"966","endLine":5,"endColumn":32},{"ruleId":"963","severity":1,"message":"988","line":203,"column":12,"nodeType":"965","messageId":"966","endLine":203,"endColumn":20},{"ruleId":"963","severity":1,"message":"989","line":203,"column":22,"nodeType":"965","messageId":"966","endLine":203,"endColumn":33},{"ruleId":"972","severity":1,"message":"973","line":117,"column":92,"nodeType":"974","messageId":"975","endLine":117,"endColumn":94},{"ruleId":"972","severity":1,"message":"973","line":118,"column":89,"nodeType":"974","messageId":"975","endLine":118,"endColumn":91},{"ruleId":"960","severity":1,"message":"961","line":150,"column":33,"nodeType":"962","endLine":150,"endColumn":98},{"ruleId":"960","severity":1,"message":"961","line":229,"column":41,"nodeType":"962","endLine":229,"endColumn":169},{"ruleId":"960","severity":1,"message":"961","line":289,"column":33,"nodeType":"962","endLine":289,"endColumn":126},"no-native-reassign",["1087"],"no-negated-in-lhs",["1088"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'ListAltIcon' is defined but never used.","Identifier","unusedVar","'RecentActorsIcon' is defined but never used.","'alpha' is defined but never used.","'ListItemIcon' is defined but never used.","'purple' is defined but never used.","'Notifications' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.","ArrayExpression",["1089"],["1090"],["1091"],"'acceptCTV' is defined but never used.","'unacceptCTV' is defined but never used.","'TablePagination' is defined but never used.","'Popover' is defined but never used.","'getComparator' is defined but never used.","'stableSort' is defined but never used.","'anchorEl' is assigned a value but never used.","'setAnchorEl' is assigned a value but never used.","'setRowsPerPage' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'checkUserApply'. Either include it or remove the dependency array.",["1092"],["1093"],"'EnhancedTableHead' is defined but never used.","'setOrder' is assigned a value but never used.","'setOrderBy' is assigned a value but never used.",["1094"],["1095"],"'BoxButton' is defined but never used.","'border' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'departments' is assigned a value but never used.",["1096"],"'Drawer' is defined but never used.","'BoxInfor' is defined but never used.","'IDepartment' is defined but never used.","'FormField' is defined but never used.","'Grid' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'Department' is assigned a value but never used.","'handleChange' is assigned a value but never used.",["1097"],["1098"],"'Button' is defined but never used.","'IconButton' is defined but never used.","'StyledMenuItem' is defined but never used.","'BoxSpan' is defined but never used.","'Person' is defined but never used.","'PersonAdd' is defined but never used.","'openUser' is assigned a value but never used.","'handleClickUser' is assigned a value but never used.","'handleCloseUser' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'findIndexEvent'. Either include it or remove the dependency array.",["1099"],"'Accordion' is defined but never used.","'Yup' is defined but never used.","'setValue' is assigned a value but never used.","'userApplyJob' is defined but never used.","'userUnApplyJob' is defined but never used.","'dispatch' is assigned a value but never used.","'Typography' is defined but never used.","'user' is assigned a value but never used.","'handleClickStorage' is defined but never used.","'handleClickUnStorage' is defined but never used.","'AccordionDetails' is defined but never used.",["1100"],"'MoreVertIcon' is defined but never used.","'ClearIcon' is defined but never used.","'RefreshIcon' is defined but never used.","'AddIcon' is defined but never used.","'Link' is defined but never used.","'NavLink' is defined but never used.","'CardContent' is defined but never used.","'Divider' is defined but never used.","'formatDistance' is defined but never used.","'handleOpenMenu' is assigned a value but never used.","'handleCloseMenu' is assigned a value but never used.","'FormLabel' is defined but never used.","'Box' is defined but never used.",["1087"],["1088"],"'loadAdmin' is defined but never used.","'USER_URI' is assigned a value but never used.","'useContext' is defined but never used.","'TextField' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListItemButton' is defined but never used.","'ReactQuill' is defined but never used.","'FormTypeProduct' is defined but never used.",["1087"],["1088"],"'data' is defined but never used.","'useStyles' is assigned a value but never used.",["1101"],["1102"],"'ImageNo' is assigned a value but never used.","'ImageName' is assigned a value but never used.","'myTimeout' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.ImageData'. Either include it or remove the dependency array. If 'setSliderProperty' needs the current value of 'props.ImageData', you can also switch to useReducer instead of useState and read 'props.ImageData' in the reducer.",["1103"],"'productMap' is assigned a value but never used.","'productMapQuantity' is assigned a value but never used.",["1104"],"'cities' is assigned a value but never used.","'classes' is assigned a value but never used.","'products' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'setLocalItems' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"1105","fix":"1106"},{"desc":"1105","fix":"1107"},{"desc":"1105","fix":"1108"},{"desc":"1109","fix":"1110"},{"desc":"1109","fix":"1111"},{"desc":"1109","fix":"1112"},{"desc":"1113","fix":"1114"},{"desc":"1113","fix":"1115"},{"desc":"1105","fix":"1116"},{"desc":"1105","fix":"1117"},{"desc":"1118","fix":"1119"},{"desc":"1118","fix":"1120"},{"desc":"1105","fix":"1121"},{"desc":"1105","fix":"1122"},{"desc":"1123","fix":"1124"},{"desc":"1105","fix":"1125"},"Update the dependencies array to be: [params.id, user]",{"range":"1126","text":"1127"},{"range":"1128","text":"1127"},{"range":"1129","text":"1127"},"Update the dependencies array to be: [checkUserApply, manager]",{"range":"1130","text":"1131"},{"range":"1132","text":"1131"},{"range":"1133","text":"1131"},"Update the dependencies array to be: [manager, params.id]",{"range":"1134","text":"1135"},{"range":"1136","text":"1135"},{"range":"1137","text":"1127"},{"range":"1138","text":"1127"},"Update the dependencies array to be: [findIndexEvent, user]",{"range":"1139","text":"1140"},{"range":"1141","text":"1140"},{"range":"1142","text":"1127"},{"range":"1143","text":"1127"},"Update the dependencies array to be: [count, props.ImageData]",{"range":"1144","text":"1145"},{"range":"1146","text":"1127"},[3628,3634],"[params.id, user]",[3378,3384],[3627,3633],[3727,3736],"[checkUserApply, manager]",[7380,7389],[7318,7327],[7170,7179],"[manager, params.id]",[8271,8280],[3495,3501],[3494,3500],[3470,3476],"[findIndexEvent, user]",[3581,3587],[3686,3692],[3718,3724],[1545,1552],"[count, props.ImageData]",[5835,5841]]